
Console_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  004003e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000042c  00400814  0002042c  2**2
                  ALLOC
  3 .stack        00000404  2000046c  00400854  0002042c  2**0
                  ALLOC
  4 .heap         00000200  20000870  00400c58  0002042c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020456  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000c0c  00000000  00000000  000204af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002f1  00000000  00000000  000210bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008b  00000000  00000000  000213ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000078  00000000  00000000  00021437  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000214af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000e10e  00000000  00000000  000214f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000013ce  00000000  00000000  0002f605  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0003c3e4  00000000  00000000  000309d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000260  00000000  00000000  0006cdb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 08 00 20 3d 01 40 00 39 01 40 00 39 01 40 00     p.. =.@.9.@.9.@.
  400010:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40003c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40005c:	00 00 00 00 39 01 40 00 39 01 40 00 00 00 00 00     ....9.@.9.@.....
  40006c:	39 01 40 00 39 01 40 00 00 00 00 00 39 01 40 00     9.@.9.@.....9.@.
  40007c:	39 01 40 00 00 00 00 00 00 00 00 00 39 01 40 00     9.@.........9.@.
  40008c:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 01 40 00 39 01 40 00 39 01 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  4000b4:	39 01 40 00 39 01 40 00 39 01 40 00 39 01 40 00     9.@.9.@.9.@.9.@.
  4000c4:	39 01 40 00 39 01 40 00                             9.@.9.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000042c 	.word	0x2000042c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004003e8 	.word	0x004003e8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004003e8 	.word	0x004003e8
  40012c:	20000430 	.word	0x20000430
  400130:	004003e8 	.word	0x004003e8
  400134:	00000000 	.word	0x00000000

00400138 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400138:	e7fe      	b.n	400138 <Dummy_Handler>
	...

0040013c <Reset_Handler>:
{
  40013c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40013e:	4b17      	ldr	r3, [pc, #92]	; (40019c <Reset_Handler+0x60>)
  400140:	4a17      	ldr	r2, [pc, #92]	; (4001a0 <Reset_Handler+0x64>)
  400142:	429a      	cmp	r2, r3
  400144:	d010      	beq.n	400168 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  400146:	4b17      	ldr	r3, [pc, #92]	; (4001a4 <Reset_Handler+0x68>)
  400148:	4a14      	ldr	r2, [pc, #80]	; (40019c <Reset_Handler+0x60>)
  40014a:	429a      	cmp	r2, r3
  40014c:	d20c      	bcs.n	400168 <Reset_Handler+0x2c>
  40014e:	3b01      	subs	r3, #1
  400150:	1a9b      	subs	r3, r3, r2
  400152:	f023 0303 	bic.w	r3, r3, #3
  400156:	3304      	adds	r3, #4
  400158:	4413      	add	r3, r2
  40015a:	4911      	ldr	r1, [pc, #68]	; (4001a0 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  40015c:	f851 0b04 	ldr.w	r0, [r1], #4
  400160:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400164:	429a      	cmp	r2, r3
  400166:	d1f9      	bne.n	40015c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  400168:	4b0f      	ldr	r3, [pc, #60]	; (4001a8 <Reset_Handler+0x6c>)
  40016a:	4a10      	ldr	r2, [pc, #64]	; (4001ac <Reset_Handler+0x70>)
  40016c:	429a      	cmp	r2, r3
  40016e:	d20a      	bcs.n	400186 <Reset_Handler+0x4a>
  400170:	3b01      	subs	r3, #1
  400172:	1a9b      	subs	r3, r3, r2
  400174:	f023 0303 	bic.w	r3, r3, #3
  400178:	3304      	adds	r3, #4
  40017a:	4413      	add	r3, r2
                *pDest++ = 0;
  40017c:	2100      	movs	r1, #0
  40017e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400182:	4293      	cmp	r3, r2
  400184:	d1fb      	bne.n	40017e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400186:	4a0a      	ldr	r2, [pc, #40]	; (4001b0 <Reset_Handler+0x74>)
  400188:	4b0a      	ldr	r3, [pc, #40]	; (4001b4 <Reset_Handler+0x78>)
  40018a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40018e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400190:	4b09      	ldr	r3, [pc, #36]	; (4001b8 <Reset_Handler+0x7c>)
  400192:	4798      	blx	r3
        main();
  400194:	4b09      	ldr	r3, [pc, #36]	; (4001bc <Reset_Handler+0x80>)
  400196:	4798      	blx	r3
  400198:	e7fe      	b.n	400198 <Reset_Handler+0x5c>
  40019a:	bf00      	nop
  40019c:	20000000 	.word	0x20000000
  4001a0:	004003e8 	.word	0x004003e8
  4001a4:	2000042c 	.word	0x2000042c
  4001a8:	2000046c 	.word	0x2000046c
  4001ac:	2000042c 	.word	0x2000042c
  4001b0:	e000ed00 	.word	0xe000ed00
  4001b4:	00400000 	.word	0x00400000
  4001b8:	00400251 	.word	0x00400251
  4001bc:	004001d1 	.word	0x004001d1

004001c0 <SystemInit>:
   * For SAM4S, the internal 4MHz fast RC oscillator is the default clock
   * selected at system reset state.
   */

  /* Set FWS according to default clock configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
  4001c0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4001c4:	4b01      	ldr	r3, [pc, #4]	; (4001cc <SystemInit+0xc>)
  4001c6:	601a      	str	r2, [r3, #0]
  4001c8:	4770      	bx	lr
  4001ca:	bf00      	nop
  4001cc:	400e0a00 	.word	0x400e0a00

004001d0 <main>:
#include "sam.h"
#include "spi.h"
#include "usart.h"

int main(void)
{
  4001d0:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
  4001d2:	4b1a      	ldr	r3, [pc, #104]	; (40023c <main+0x6c>)
  4001d4:	4798      	blx	r3
	
	while(!(REG_PMC_SR & PMC_SR_MOSCRCS));
  4001d6:	4b1a      	ldr	r3, [pc, #104]	; (400240 <main+0x70>)
  4001d8:	681a      	ldr	r2, [r3, #0]
  4001da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  4001de:	d0fb      	beq.n	4001d8 <main+0x8>
	REG_CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCF_12_MHz;
  4001e0:	4a18      	ldr	r2, [pc, #96]	; (400244 <main+0x74>)
  4001e2:	6813      	ldr	r3, [r2, #0]
  4001e4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4001e8:	f043 0320 	orr.w	r3, r3, #32
  4001ec:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & PMC_SR_MCKRDY));
  4001ee:	4b14      	ldr	r3, [pc, #80]	; (400240 <main+0x70>)
  4001f0:	681a      	ldr	r2, [r3, #0]
  4001f2:	f012 0f08 	tst.w	r2, #8
  4001f6:	d0fb      	beq.n	4001f0 <main+0x20>
	REG_CKGR_PLLAR |= CKGR_PLLAR_DIVA(1);
  4001f8:	4b13      	ldr	r3, [pc, #76]	; (400248 <main+0x78>)
  4001fa:	681a      	ldr	r2, [r3, #0]
  4001fc:	f042 0201 	orr.w	r2, r2, #1
  400200:	601a      	str	r2, [r3, #0]
	REG_CKGR_PLLAR |= CKGR_PLLAR_MULA(9);
  400202:	681a      	ldr	r2, [r3, #0]
  400204:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
  400208:	601a      	str	r2, [r3, #0]
	while(!(REG_PMC_SR & PMC_SR_LOCKA));
  40020a:	3340      	adds	r3, #64	; 0x40
  40020c:	681a      	ldr	r2, [r3, #0]
  40020e:	f012 0f02 	tst.w	r2, #2
  400212:	d0fb      	beq.n	40020c <main+0x3c>
	REG_PMC_MCKR |= PMC_MCKR_PRES_CLK_1;
  400214:	4b0d      	ldr	r3, [pc, #52]	; (40024c <main+0x7c>)
  400216:	681a      	ldr	r2, [r3, #0]
  400218:	601a      	str	r2, [r3, #0]
	while(!(REG_PMC_SR & PMC_SR_MCKRDY));
  40021a:	3338      	adds	r3, #56	; 0x38
  40021c:	681a      	ldr	r2, [r3, #0]
  40021e:	f012 0f08 	tst.w	r2, #8
  400222:	d0fb      	beq.n	40021c <main+0x4c>
	REG_PMC_MCKR |= PMC_MCKR_CSS_PLLA_CLK;
  400224:	4a09      	ldr	r2, [pc, #36]	; (40024c <main+0x7c>)
  400226:	6813      	ldr	r3, [r2, #0]
  400228:	f043 0302 	orr.w	r3, r3, #2
  40022c:	6013      	str	r3, [r2, #0]
	while(!(REG_PMC_SR & PMC_SR_MCKRDY));
  40022e:	4b04      	ldr	r3, [pc, #16]	; (400240 <main+0x70>)
  400230:	681a      	ldr	r2, [r3, #0]
  400232:	f012 0f08 	tst.w	r2, #8
  400236:	d0fb      	beq.n	400230 <main+0x60>
  400238:	e7fe      	b.n	400238 <main+0x68>
  40023a:	bf00      	nop
  40023c:	004001c1 	.word	0x004001c1
  400240:	400e0468 	.word	0x400e0468
  400244:	400e0420 	.word	0x400e0420
  400248:	400e0428 	.word	0x400e0428
  40024c:	400e0430 	.word	0x400e0430

00400250 <__libc_init_array>:
  400250:	b570      	push	{r4, r5, r6, lr}
  400252:	4e0f      	ldr	r6, [pc, #60]	; (400290 <__libc_init_array+0x40>)
  400254:	4d0f      	ldr	r5, [pc, #60]	; (400294 <__libc_init_array+0x44>)
  400256:	1b76      	subs	r6, r6, r5
  400258:	10b6      	asrs	r6, r6, #2
  40025a:	bf18      	it	ne
  40025c:	2400      	movne	r4, #0
  40025e:	d005      	beq.n	40026c <__libc_init_array+0x1c>
  400260:	3401      	adds	r4, #1
  400262:	f855 3b04 	ldr.w	r3, [r5], #4
  400266:	4798      	blx	r3
  400268:	42a6      	cmp	r6, r4
  40026a:	d1f9      	bne.n	400260 <__libc_init_array+0x10>
  40026c:	4e0a      	ldr	r6, [pc, #40]	; (400298 <__libc_init_array+0x48>)
  40026e:	4d0b      	ldr	r5, [pc, #44]	; (40029c <__libc_init_array+0x4c>)
  400270:	1b76      	subs	r6, r6, r5
  400272:	f000 f8a7 	bl	4003c4 <_init>
  400276:	10b6      	asrs	r6, r6, #2
  400278:	bf18      	it	ne
  40027a:	2400      	movne	r4, #0
  40027c:	d006      	beq.n	40028c <__libc_init_array+0x3c>
  40027e:	3401      	adds	r4, #1
  400280:	f855 3b04 	ldr.w	r3, [r5], #4
  400284:	4798      	blx	r3
  400286:	42a6      	cmp	r6, r4
  400288:	d1f9      	bne.n	40027e <__libc_init_array+0x2e>
  40028a:	bd70      	pop	{r4, r5, r6, pc}
  40028c:	bd70      	pop	{r4, r5, r6, pc}
  40028e:	bf00      	nop
  400290:	004003d0 	.word	0x004003d0
  400294:	004003d0 	.word	0x004003d0
  400298:	004003d8 	.word	0x004003d8
  40029c:	004003d0 	.word	0x004003d0

004002a0 <register_fini>:
  4002a0:	4b02      	ldr	r3, [pc, #8]	; (4002ac <register_fini+0xc>)
  4002a2:	b113      	cbz	r3, 4002aa <register_fini+0xa>
  4002a4:	4802      	ldr	r0, [pc, #8]	; (4002b0 <register_fini+0x10>)
  4002a6:	f000 b805 	b.w	4002b4 <atexit>
  4002aa:	4770      	bx	lr
  4002ac:	00000000 	.word	0x00000000
  4002b0:	004002c1 	.word	0x004002c1

004002b4 <atexit>:
  4002b4:	2300      	movs	r3, #0
  4002b6:	4601      	mov	r1, r0
  4002b8:	461a      	mov	r2, r3
  4002ba:	4618      	mov	r0, r3
  4002bc:	f000 b81e 	b.w	4002fc <__register_exitproc>

004002c0 <__libc_fini_array>:
  4002c0:	b538      	push	{r3, r4, r5, lr}
  4002c2:	4c0a      	ldr	r4, [pc, #40]	; (4002ec <__libc_fini_array+0x2c>)
  4002c4:	4d0a      	ldr	r5, [pc, #40]	; (4002f0 <__libc_fini_array+0x30>)
  4002c6:	1b64      	subs	r4, r4, r5
  4002c8:	10a4      	asrs	r4, r4, #2
  4002ca:	d00a      	beq.n	4002e2 <__libc_fini_array+0x22>
  4002cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4002d0:	3b01      	subs	r3, #1
  4002d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4002d6:	3c01      	subs	r4, #1
  4002d8:	f855 3904 	ldr.w	r3, [r5], #-4
  4002dc:	4798      	blx	r3
  4002de:	2c00      	cmp	r4, #0
  4002e0:	d1f9      	bne.n	4002d6 <__libc_fini_array+0x16>
  4002e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4002e6:	f000 b877 	b.w	4003d8 <_fini>
  4002ea:	bf00      	nop
  4002ec:	004003e8 	.word	0x004003e8
  4002f0:	004003e4 	.word	0x004003e4

004002f4 <__retarget_lock_acquire_recursive>:
  4002f4:	4770      	bx	lr
  4002f6:	bf00      	nop

004002f8 <__retarget_lock_release_recursive>:
  4002f8:	4770      	bx	lr
  4002fa:	bf00      	nop

004002fc <__register_exitproc>:
  4002fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400300:	4d2c      	ldr	r5, [pc, #176]	; (4003b4 <__register_exitproc+0xb8>)
  400302:	4606      	mov	r6, r0
  400304:	6828      	ldr	r0, [r5, #0]
  400306:	4698      	mov	r8, r3
  400308:	460f      	mov	r7, r1
  40030a:	4691      	mov	r9, r2
  40030c:	f7ff fff2 	bl	4002f4 <__retarget_lock_acquire_recursive>
  400310:	4b29      	ldr	r3, [pc, #164]	; (4003b8 <__register_exitproc+0xbc>)
  400312:	681c      	ldr	r4, [r3, #0]
  400314:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400318:	2b00      	cmp	r3, #0
  40031a:	d03e      	beq.n	40039a <__register_exitproc+0x9e>
  40031c:	685a      	ldr	r2, [r3, #4]
  40031e:	2a1f      	cmp	r2, #31
  400320:	dc1c      	bgt.n	40035c <__register_exitproc+0x60>
  400322:	f102 0e01 	add.w	lr, r2, #1
  400326:	b176      	cbz	r6, 400346 <__register_exitproc+0x4a>
  400328:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40032c:	2401      	movs	r4, #1
  40032e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400332:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400336:	4094      	lsls	r4, r2
  400338:	4320      	orrs	r0, r4
  40033a:	2e02      	cmp	r6, #2
  40033c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400340:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400344:	d023      	beq.n	40038e <__register_exitproc+0x92>
  400346:	3202      	adds	r2, #2
  400348:	f8c3 e004 	str.w	lr, [r3, #4]
  40034c:	6828      	ldr	r0, [r5, #0]
  40034e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400352:	f7ff ffd1 	bl	4002f8 <__retarget_lock_release_recursive>
  400356:	2000      	movs	r0, #0
  400358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40035c:	4b17      	ldr	r3, [pc, #92]	; (4003bc <__register_exitproc+0xc0>)
  40035e:	b30b      	cbz	r3, 4003a4 <__register_exitproc+0xa8>
  400360:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400364:	f3af 8000 	nop.w
  400368:	4603      	mov	r3, r0
  40036a:	b1d8      	cbz	r0, 4003a4 <__register_exitproc+0xa8>
  40036c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400370:	6002      	str	r2, [r0, #0]
  400372:	2100      	movs	r1, #0
  400374:	6041      	str	r1, [r0, #4]
  400376:	460a      	mov	r2, r1
  400378:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40037c:	f04f 0e01 	mov.w	lr, #1
  400380:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400384:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400388:	2e00      	cmp	r6, #0
  40038a:	d0dc      	beq.n	400346 <__register_exitproc+0x4a>
  40038c:	e7cc      	b.n	400328 <__register_exitproc+0x2c>
  40038e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400392:	430c      	orrs	r4, r1
  400394:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400398:	e7d5      	b.n	400346 <__register_exitproc+0x4a>
  40039a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40039e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4003a2:	e7bb      	b.n	40031c <__register_exitproc+0x20>
  4003a4:	6828      	ldr	r0, [r5, #0]
  4003a6:	f7ff ffa7 	bl	4002f8 <__retarget_lock_release_recursive>
  4003aa:	f04f 30ff 	mov.w	r0, #4294967295
  4003ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003b2:	bf00      	nop
  4003b4:	20000428 	.word	0x20000428
  4003b8:	004003c0 	.word	0x004003c0
  4003bc:	00000000 	.word	0x00000000

004003c0 <_global_impure_ptr>:
  4003c0:	20000000                                ... 

004003c4 <_init>:
  4003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4003c6:	bf00      	nop
  4003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4003ca:	bc08      	pop	{r3}
  4003cc:	469e      	mov	lr, r3
  4003ce:	4770      	bx	lr

004003d0 <__init_array_start>:
  4003d0:	004002a1 	.word	0x004002a1

004003d4 <__frame_dummy_init_array_entry>:
  4003d4:	004000f1                                ..@.

004003d8 <_fini>:
  4003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4003da:	bf00      	nop
  4003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4003de:	bc08      	pop	{r3}
  4003e0:	469e      	mov	lr, r3
  4003e2:	4770      	bx	lr

004003e4 <__fini_array_start>:
  4003e4:	004000cd 	.word	0x004000cd
