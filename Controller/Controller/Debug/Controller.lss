
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f31  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a2  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad7  00000000  00000000  00001bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075a  00000000  00000000  00002e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00003569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	ac c0       	rjmp	.+344    	; 0x16a <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	82 c0       	rjmp	.+260    	; 0x120 <__vector_13>
  1c:	91 c0       	rjmp	.+290    	; 0x140 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 eb       	ldi	r30, 0xB2	; 178
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	50 d0       	rcall	.+160    	; 0xfa <main>
  5a:	a9 c0       	rjmp	.+338    	; 0x1ae <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_2>:
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
	  
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <i2c_send_start>:
	
	PORT(_PORT) |= (1<<_SDA);					//enable SDA pull up
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
	
	return(buf);
}
  72:	c5 98       	cbi	0x18, 5	; 24
  74:	c5 99       	sbic	0x18, 5	; 24
  76:	fe cf       	rjmp	.-4      	; 0x74 <i2c_send_start+0x2>
  78:	00 c0       	rjmp	.+0      	; 0x7a <i2c_send_start+0x8>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <i2c_send_start+0xa>
  7c:	00 00       	nop
  7e:	c7 98       	cbi	0x18, 7	; 24
  80:	c7 9a       	sbi	0x18, 7	; 24
  82:	08 95       	ret

00000084 <i2c_send_stop>:
  84:	c5 98       	cbi	0x18, 5	; 24
  86:	c5 99       	sbic	0x18, 5	; 24
  88:	fe cf       	rjmp	.-4      	; 0x86 <i2c_send_stop+0x2>
  8a:	c7 9a       	sbi	0x18, 7	; 24
  8c:	c7 9b       	sbis	0x18, 7	; 24
  8e:	fe cf       	rjmp	.-4      	; 0x8c <i2c_send_stop+0x8>
  90:	00 c0       	rjmp	.+0      	; 0x92 <i2c_send_stop+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <i2c_send_stop+0x10>
  94:	00 00       	nop
  96:	c5 9a       	sbi	0x18, 5	; 24
  98:	00 c0       	rjmp	.+0      	; 0x9a <i2c_send_stop+0x16>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <i2c_send_stop+0x18>
  9c:	00 00       	nop
  9e:	08 95       	ret

000000a0 <i2c_get_ack>:
  a0:	bd 98       	cbi	0x17, 5	; 23
  a2:	c7 9a       	sbi	0x18, 7	; 24
  a4:	c7 9b       	sbis	0x18, 7	; 24
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <i2c_get_ack+0x4>
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	00 c0       	rjmp	.+0      	; 0xac <i2c_get_ack+0xc>
  ac:	00 c0       	rjmp	.+0      	; 0xae <i2c_get_ack+0xe>
  ae:	00 00       	nop
  b0:	c7 98       	cbi	0x18, 7	; 24
  b2:	c5 9a       	sbi	0x18, 5	; 24
  b4:	bd 9a       	sbi	0x17, 5	; 23
  b6:	85 fb       	bst	r24, 5
  b8:	88 27       	eor	r24, r24
  ba:	80 f9       	bld	r24, 0
  bc:	08 95       	ret

000000be <usi_init>:

void usi_init(){	
	USIDR = 0xFF;							//set data register high for start condition
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) = (1<<_SDA)|(1<<_SCL);		//set HIGH with pull up.
  c2:	80 ea       	ldi	r24, 0xA0	; 160
  c4:	88 bb       	out	0x18, r24	; 24
	DDR(_PORT) = (1<<_SDA)|(1<<_SCL);		//enable output driver for SDA and SCL.
  c6:	87 bb       	out	0x17, r24	; 23
	//SDA corresponds with MSB of USIDR and PORTB bit. SCL is high unless forced low by start detector or bit PORTB register.
	USICR = (0<<USISIE)|(0<<USISIE)|(1<<USIWM1)|(0<<USIWM0)|(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|(0<<USITC);
  c8:	8a e2       	ldi	r24, 0x2A	; 42
  ca:	8d b9       	out	0x0d, r24	; 13
	USISR = (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|(0x0<<USICNT0);		//reset flags and counter value
  cc:	80 ef       	ldi	r24, 0xF0	; 240
  ce:	8e b9       	out	0x0e, r24	; 14
  d0:	08 95       	ret

000000d2 <usi_send>:
}

void usi_send(uint8_t data){
	PORT(_PORT) |= (1<<_SCL);					//release SCL
  d2:	c7 9a       	sbi	0x18, 7	; 24
	USICR |= (1<<USITC);						//toggle SCL to HIGH
  d4:	68 9a       	sbi	0x0d, 0	; 13
	USISR &= ~(0xF<<USICNT0);					//reset counter
  d6:	9e b1       	in	r25, 0x0e	; 14
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	9e b9       	out	0x0e, r25	; 14
	USIDR = data;
  dc:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) |= (1<<_SDA);
  de:	c5 9a       	sbi	0x18, 5	; 24
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
  e0:	68 9a       	sbi	0x0d, 0	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <__stack+0x5>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__stack+0x7>
  e6:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
  e8:	68 9a       	sbi	0x0d, 0	; 13
  ea:	00 c0       	rjmp	.+0      	; 0xec <__stack+0xd>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__stack+0xf>
  ee:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
  f0:	76 9b       	sbis	0x0e, 6	; 14
  f2:	f6 cf       	rjmp	.-20     	; 0xe0 <__stack+0x1>
	USIDR = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8f b9       	out	0x0f, r24	; 15
  f8:	08 95       	ret

000000fa <main>:
#include "timer.h"


int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
  fe:	16 bc       	out	0x26, r1	; 38
	
	usi_init();
 100:	de df       	rcall	.-68     	; 0xbe <usi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	8d e3       	ldi	r24, 0x3D	; 61
 106:	99 e4       	ldi	r25, 0x49	; 73
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0xe>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x18>
 112:	00 00       	nop
	_delay_ms(3000);
	i2c_send_start();
 114:	ae df       	rcall	.-164    	; 0x72 <i2c_send_start>
	usi_send(0x11);
 116:	81 e1       	ldi	r24, 0x11	; 17
 118:	dc df       	rcall	.-72     	; 0xd2 <usi_send>
	i2c_get_ack();
 11a:	c2 df       	rcall	.-124    	; 0xa0 <i2c_get_ack>
	i2c_send_stop();
 11c:	b3 df       	rcall	.-154    	; 0x84 <i2c_send_stop>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x24>

00000120 <__vector_13>:
	OCR0B = 9;
	TIMSK |= (1<<OCIE0A)|(1<<OCIE0B);
	SREG |= (1<<SREG_I);								//enable global interrupt
 }
 
 ISR(TIMER0_COMPA_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	88 7f       	andi	r24, 0xF8	; 248
 130:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 132:	12 be       	out	0x32, r1	; 50
 }
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_14>:
 
 ISR(TIMER0_COMPB_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	OCR0B += 10;
 14e:	8c b7       	in	r24, 0x3c	; 60
 150:	86 5f       	subi	r24, 0xF6	; 246
 152:	8c bf       	out	0x3c, r24	; 60
	PORTB ^= (1<<2);
 154:	98 b3       	in	r25, 0x18	; 24
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	89 27       	eor	r24, r25
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_8>:
  bytes = 2;
  UCSRB |= (1<<UDRIE);							// enable uart data interrupt (send data)
}

//send a command out of the buffer
ISR(USART_UDRE_vect) {
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	if(bytes > 0){
 17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 17e:	88 23       	and	r24, r24
 180:	69 f0       	breq	.+26     	; 0x19c <__vector_8+0x32>
		UDR = tx_buffer[bytes];					//write byte to data register
 182:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ee 59       	subi	r30, 0x9E	; 158
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	80 81       	ld	r24, Z
 18e:	8c b9       	out	0x0c, r24	; 12
		bytes--;								//lower bytes by one
 190:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 194:	81 50       	subi	r24, 0x01	; 1
 196:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 19a:	01 c0       	rjmp	.+2      	; 0x19e <__vector_8+0x34>
	}else{
		UCSRB &= ~(1<<UDRIE);					//disable interrupt
 19c:	55 98       	cbi	0x0a, 5	; 10
	}
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
