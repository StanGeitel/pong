
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001408  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbb  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a91  00000000  00000000  00003946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000043d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	41 c0       	rjmp	.+130    	; 0x86 <__vector_1>
   4:	9f c0       	rjmp	.+318    	; 0x144 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	65 c0       	rjmp	.+202    	; 0xd6 <__vector_5>
   c:	e2 c0       	rjmp	.+452    	; 0x1d2 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	2c c2       	rjmp	.+1112   	; 0x46a <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	07 c1       	rjmp	.+526    	; 0x226 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	f8 d1       	rcall	.+1008   	; 0x434 <main>
  44:	37 c2       	rjmp	.+1134   	; 0x4b4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <acc_init>:
		count++;
	}while(count != 0x0400);
	
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
}
  48:	42 d1       	rcall	.+644    	; 0x2ce <i2c_init>
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	6b e6       	ldi	r22, 0x6B	; 107
  4e:	88 e6       	ldi	r24, 0x68	; 104
  50:	ac d1       	rcall	.+856    	; 0x3aa <i2c_single_write>
  52:	40 e0       	ldi	r20, 0x00	; 0
  54:	6c e1       	ldi	r22, 0x1C	; 28
  56:	88 e6       	ldi	r24, 0x68	; 104
  58:	a8 d1       	rcall	.+848    	; 0x3aa <i2c_single_write>
  5a:	40 e0       	ldi	r20, 0x00	; 0
  5c:	69 e1       	ldi	r22, 0x19	; 25
  5e:	88 e6       	ldi	r24, 0x68	; 104
  60:	a4 d1       	rcall	.+840    	; 0x3aa <i2c_single_write>
  62:	40 e0       	ldi	r20, 0x00	; 0
  64:	67 e3       	ldi	r22, 0x37	; 55
  66:	88 e6       	ldi	r24, 0x68	; 104
  68:	a0 d1       	rcall	.+832    	; 0x3aa <i2c_single_write>
  6a:	eb d1       	rcall	.+982    	; 0x442 <uart_init>
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	85 bf       	out	0x35, r24	; 53
  72:	85 b7       	in	r24, 0x35	; 53
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 bf       	out	0x35, r24	; 53
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	8b bf       	out	0x3b, r24	; 59
  7e:	8f b7       	in	r24, 0x3f	; 63
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8f bf       	out	0x3f, r24	; 63
  84:	08 95       	ret

00000086 <__vector_1>:

ISR(INT0_vect){		//External interrupt0 service routine
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	2f 93       	push	r18
  92:	3f 93       	push	r19
  94:	4f 93       	push	r20
  96:	5f 93       	push	r21
  98:	6f 93       	push	r22
  9a:	7f 93       	push	r23
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	TCNT1 = 0x0000;
	ovf_counter = 0;
*/	
	uint16_t temp_16;
	uint8_t temp_8[2];
	temp_16 = i2c_burst_read(ACC_ADD, X_MSB);
  a8:	6b e3       	ldi	r22, 0x3B	; 59
  aa:	88 e6       	ldi	r24, 0x68	; 104
  ac:	ab d1       	rcall	.+854    	; 0x404 <i2c_burst_read>
	temp_8[1] = (temp_16>>8);
	temp_8[0] = (temp_16&0xFF);
	uart_put_com(temp_8[1], temp_8[0]);
  ae:	68 2f       	mov	r22, r24
  b0:	89 2f       	mov	r24, r25
  b2:	d2 d1       	rcall	.+932    	; 0x458 <uart_put_com>
}
  b4:	ff 91       	pop	r31
  b6:	ef 91       	pop	r30
  b8:	bf 91       	pop	r27
  ba:	af 91       	pop	r26
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	7f 91       	pop	r23
  c2:	6f 91       	pop	r22
  c4:	5f 91       	pop	r21
  c6:	4f 91       	pop	r20
  c8:	3f 91       	pop	r19
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_5>:

ISR(TIMER1_OVF_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
	ovf_counter++;
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <gauge_init>:
#include "i2c.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_init();
  f8:	ea d0       	rcall	.+468    	; 0x2ce <i2c_init>
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	4f ef       	ldi	r20, 0xFF	; 255
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	5c d1       	rcall	.+696    	; 0x3bc <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 104:	2c e1       	ldi	r18, 0x1C	; 28
 106:	4c e7       	ldi	r20, 0x7C	; 124
 108:	66 e0       	ldi	r22, 0x06	; 6
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	57 d1       	rcall	.+686    	; 0x3bc <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 10e:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 110:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 112:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 114:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 116:	89 b7       	in	r24, 0x39	; 57
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 120:	85 b7       	in	r24, 0x35	; 53
 122:	88 60       	ori	r24, 0x08	; 8
 124:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 126:	8b b7       	in	r24, 0x3b	; 59
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 12c:	8f b7       	in	r24, 0x3f	; 63
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8f bf       	out	0x3f, r24	; 63
 132:	08 95       	ret

00000134 <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 134:	d9 d0       	rcall	.+434    	; 0x2e8 <i2c_send_start>
	i2c_send_data(ARA<<1);
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	15 d1       	rcall	.+554    	; 0x364 <i2c_send_data>
	i2c_get_ack();						
 13a:	03 d1       	rcall	.+518    	; 0x342 <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 13c:	4e d1       	rcall	.+668    	; 0x3da <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 13e:	f9 d0       	rcall	.+498    	; 0x332 <i2c_send_nack>
	i2c_send_stop();
 140:	e7 d0       	rcall	.+462    	; 0x310 <i2c_send_stop>
 142:	08 95       	ret

00000144 <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 166:	03 b6       	in	r0, 0x33	; 51
 168:	02 fe       	sbrs	r0, 2
 16a:	13 c0       	rjmp	.+38     	; 0x192 <__vector_2+0x4e>
 16c:	03 b6       	in	r0, 0x33	; 51
 16e:	00 fe       	sbrs	r0, 0
 170:	10 c0       	rjmp	.+32     	; 0x192 <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 172:	83 b7       	in	r24, 0x33	; 51
 174:	8a 7f       	andi	r24, 0xFA	; 250
 176:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 178:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	84 e6       	ldi	r24, 0x64	; 100
 182:	1c d1       	rcall	.+568    	; 0x3bc <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 184:	2c e1       	ldi	r18, 0x1C	; 28
 186:	4c e7       	ldi	r20, 0x7C	; 124
 188:	66 e0       	ldi	r22, 0x06	; 6
 18a:	84 e6       	ldi	r24, 0x64	; 100
 18c:	17 d1       	rcall	.+558    	; 0x3bc <i2c_burst_write>
		gauge_send_arp();	
 18e:	d2 df       	rcall	.-92     	; 0x134 <gauge_send_arp>
 190:	0f c0       	rjmp	.+30     	; 0x1b0 <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 192:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 194:	83 b7       	in	r24, 0x33	; 51
 196:	85 60       	ori	r24, 0x05	; 5
 198:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	66 e0       	ldi	r22, 0x06	; 6
 1a0:	84 e6       	ldi	r24, 0x64	; 100
 1a2:	0c d1       	rcall	.+536    	; 0x3bc <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 1a4:	2d ef       	ldi	r18, 0xFD	; 253
 1a6:	4d e7       	ldi	r20, 0x7D	; 125
 1a8:	64 e0       	ldi	r22, 0x04	; 4
 1aa:	84 e6       	ldi	r24, 0x64	; 100
 1ac:	07 d1       	rcall	.+526    	; 0x3bc <i2c_burst_write>
		gauge_send_arp();
 1ae:	c2 df       	rcall	.-124    	; 0x134 <gauge_send_arp>
	}
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_6>:

ISR(TIMER0_OVF_vect){
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
	if(count == 17){
 1e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count>
 1e4:	81 31       	cpi	r24, 0x11	; 17
 1e6:	39 f4       	brne	.+14     	; 0x1f6 <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 1e8:	98 b3       	in	r25, 0x18	; 24
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	89 27       	eor	r24, r25
 1ee:	88 bb       	out	0x18, r24	; 24
		count = 0;
 1f0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <__vector_6+0x2a>
	}else{
		count++;
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count>
	}
}
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <buttons_init>:
#include "i2c.h"

volatile uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 20a:	87 b3       	in	r24, 0x17	; 23
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 210:	80 b5       	in	r24, 0x20	; 32
 212:	8f 60       	ori	r24, 0x0F	; 15
 214:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 216:	8b b7       	in	r24, 0x3b	; 59
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 21c:	8f b7       	in	r24, 0x3f	; 63
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	8f bf       	out	0x3f, r24	; 63
	
	uart_init();
 222:	0f d1       	rcall	.+542    	; 0x442 <uart_init>
 224:	08 95       	ret

00000226 <__vector_11>:
}

ISR(PCINT0_vect){		
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 24c:	d6 b3       	in	r29, 0x16	; 22
 24e:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 250:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <old_buttons>
 254:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 256:	c0 ff       	sbrs	r28, 0
 258:	07 c0       	rjmp	.+14     	; 0x268 <__vector_11+0x42>
 25a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 25e:	80 ff       	sbrs	r24, 0
 260:	03 c0       	rjmp	.+6      	; 0x268 <__vector_11+0x42>
		uart_put_com(0xBB, 0xBB);
 262:	6b eb       	ldi	r22, 0xBB	; 187
 264:	8b eb       	ldi	r24, 0xBB	; 187
 266:	f8 d0       	rcall	.+496    	; 0x458 <uart_put_com>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 268:	c1 ff       	sbrs	r28, 1
 26a:	07 c0       	rjmp	.+14     	; 0x27a <__vector_11+0x54>
 26c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 270:	81 ff       	sbrs	r24, 1
 272:	03 c0       	rjmp	.+6      	; 0x27a <__vector_11+0x54>
		uart_put_com(0x44, 0x44);
 274:	64 e4       	ldi	r22, 0x44	; 68
 276:	84 e4       	ldi	r24, 0x44	; 68
 278:	ef d0       	rcall	.+478    	; 0x458 <uart_put_com>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 27a:	c2 ff       	sbrs	r28, 2
 27c:	07 c0       	rjmp	.+14     	; 0x28c <__vector_11+0x66>
 27e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 282:	82 ff       	sbrs	r24, 2
 284:	03 c0       	rjmp	.+6      	; 0x28c <__vector_11+0x66>
		uart_put_com(0x11, 0x11);
 286:	61 e1       	ldi	r22, 0x11	; 17
 288:	81 e1       	ldi	r24, 0x11	; 17
 28a:	e6 d0       	rcall	.+460    	; 0x458 <uart_put_com>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 28c:	c3 ff       	sbrs	r28, 3
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <__vector_11+0x7e>
 290:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 294:	83 ff       	sbrs	r24, 3
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <__vector_11+0x7e>
		uint16_t temp_16;
		uint8_t temp_8[2];
		temp_16 = i2c_burst_read(ACC_ADD, X_MSB);
 298:	6b e3       	ldi	r22, 0x3B	; 59
 29a:	88 e6       	ldi	r24, 0x68	; 104
 29c:	b3 d0       	rcall	.+358    	; 0x404 <i2c_burst_read>
		temp_8[1] = (temp_16>>8);
		temp_8[0] = (temp_16&0xFF);
		uart_put_com(temp_8[1], temp_8[0]);
 29e:	68 2f       	mov	r22, r24
 2a0:	89 2f       	mov	r24, r25
 2a2:	da d0       	rcall	.+436    	; 0x458 <uart_put_com>
	}
	old_buttons = new_buttons;
 2a4:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <old_buttons>
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	8f b9       	out	0x0f, r24	; 15
 2d2:	88 b3       	in	r24, 0x18	; 24
 2d4:	80 6a       	ori	r24, 0xA0	; 160
 2d6:	88 bb       	out	0x18, r24	; 24
 2d8:	87 b3       	in	r24, 0x17	; 23
 2da:	80 6a       	ori	r24, 0xA0	; 160
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	8a e2       	ldi	r24, 0x2A	; 42
 2e0:	8d b9       	out	0x0d, r24	; 13
 2e2:	80 ef       	ldi	r24, 0xF0	; 240
 2e4:	8e b9       	out	0x0e, r24	; 14
 2e6:	08 95       	ret

000002e8 <i2c_send_start>:
 2e8:	88 b3       	in	r24, 0x18	; 24
 2ea:	80 6a       	ori	r24, 0xA0	; 160
 2ec:	88 bb       	out	0x18, r24	; 24
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	98 b3       	in	r25, 0x18	; 24
 2f2:	88 b3       	in	r24, 0x18	; 24
 2f4:	85 fb       	bst	r24, 5
 2f6:	88 27       	eor	r24, r24
 2f8:	80 f9       	bld	r24, 0
 2fa:	82 13       	cpse	r24, r18
 2fc:	f9 cf       	rjmp	.-14     	; 0x2f0 <i2c_send_start+0x8>
 2fe:	99 23       	and	r25, r25
 300:	bc f7       	brge	.-18     	; 0x2f0 <i2c_send_start+0x8>
 302:	c5 98       	cbi	0x18, 5	; 24
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	8a 95       	dec	r24
 308:	f1 f7       	brne	.-4      	; 0x306 <i2c_send_start+0x1e>
 30a:	00 00       	nop
 30c:	c7 98       	cbi	0x18, 7	; 24
 30e:	08 95       	ret

00000310 <i2c_send_stop>:
 310:	c5 98       	cbi	0x18, 5	; 24
 312:	c7 9a       	sbi	0x18, 7	; 24
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <i2c_send_stop+0x6>
 31a:	00 00       	nop
 31c:	c5 9a       	sbi	0x18, 5	; 24
 31e:	08 95       	ret

00000320 <i2c_send_ack>:
 320:	c5 98       	cbi	0x18, 5	; 24
 322:	c7 9a       	sbi	0x18, 7	; 24
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <i2c_send_ack+0x6>
 32a:	00 00       	nop
 32c:	c7 98       	cbi	0x18, 7	; 24
 32e:	c5 9a       	sbi	0x18, 5	; 24
 330:	08 95       	ret

00000332 <i2c_send_nack>:
 332:	c5 9a       	sbi	0x18, 5	; 24
 334:	c7 9a       	sbi	0x18, 7	; 24
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	8a 95       	dec	r24
 33a:	f1 f7       	brne	.-4      	; 0x338 <i2c_send_nack+0x6>
 33c:	00 00       	nop
 33e:	c7 98       	cbi	0x18, 7	; 24
 340:	08 95       	ret

00000342 <i2c_get_ack>:
 342:	bd 98       	cbi	0x17, 5	; 23
 344:	68 9a       	sbi	0x0d, 0	; 13
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	8a 95       	dec	r24
 34a:	f1 f7       	brne	.-4      	; 0x348 <i2c_get_ack+0x6>
 34c:	00 00       	nop
 34e:	68 9a       	sbi	0x0d, 0	; 13
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	8a 95       	dec	r24
 354:	f1 f7       	brne	.-4      	; 0x352 <i2c_get_ack+0x10>
 356:	00 00       	nop
 358:	8f b1       	in	r24, 0x0f	; 15
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	9f b9       	out	0x0f, r25	; 15
 35e:	bd 9a       	sbi	0x17, 5	; 23
 360:	81 70       	andi	r24, 0x01	; 1
 362:	08 95       	ret

00000364 <i2c_send_data>:
 364:	8f b9       	out	0x0f, r24	; 15
 366:	c5 9a       	sbi	0x18, 5	; 24
 368:	8e b1       	in	r24, 0x0e	; 14
 36a:	80 7f       	andi	r24, 0xF0	; 240
 36c:	8e b9       	out	0x0e, r24	; 14
 36e:	68 9a       	sbi	0x0d, 0	; 13
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <i2c_send_data+0xe>
 376:	00 00       	nop
 378:	68 9a       	sbi	0x0d, 0	; 13
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <i2c_send_data+0x18>
 380:	00 00       	nop
 382:	76 9b       	sbis	0x0e, 6	; 14
 384:	f4 cf       	rjmp	.-24     	; 0x36e <i2c_send_data+0xa>
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	8f b9       	out	0x0f, r24	; 15
 38a:	08 95       	ret

0000038c <i2c_send_reg_add>:
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	d8 2f       	mov	r29, r24
 392:	c6 2f       	mov	r28, r22
 394:	a9 df       	rcall	.-174    	; 0x2e8 <i2c_send_start>
 396:	8d 2f       	mov	r24, r29
 398:	88 0f       	add	r24, r24
 39a:	e4 df       	rcall	.-56     	; 0x364 <i2c_send_data>
 39c:	d2 df       	rcall	.-92     	; 0x342 <i2c_get_ack>
 39e:	8c 2f       	mov	r24, r28
 3a0:	e1 df       	rcall	.-62     	; 0x364 <i2c_send_data>
 3a2:	cf df       	rcall	.-98     	; 0x342 <i2c_get_ack>
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <i2c_single_write>:
 3aa:	cf 93       	push	r28
 3ac:	c4 2f       	mov	r28, r20
 3ae:	ee df       	rcall	.-36     	; 0x38c <i2c_send_reg_add>
 3b0:	8c 2f       	mov	r24, r28
 3b2:	d8 df       	rcall	.-80     	; 0x364 <i2c_send_data>
 3b4:	c6 df       	rcall	.-116    	; 0x342 <i2c_get_ack>
 3b6:	ac df       	rcall	.-168    	; 0x310 <i2c_send_stop>
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <i2c_burst_write>:
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	d4 2f       	mov	r29, r20
 3c2:	c2 2f       	mov	r28, r18
 3c4:	e3 df       	rcall	.-58     	; 0x38c <i2c_send_reg_add>
 3c6:	8d 2f       	mov	r24, r29
 3c8:	cd df       	rcall	.-102    	; 0x364 <i2c_send_data>
 3ca:	bb df       	rcall	.-138    	; 0x342 <i2c_get_ack>
 3cc:	8c 2f       	mov	r24, r28
 3ce:	ca df       	rcall	.-108    	; 0x364 <i2c_send_data>
 3d0:	b8 df       	rcall	.-144    	; 0x342 <i2c_get_ack>
 3d2:	9e df       	rcall	.-196    	; 0x310 <i2c_send_stop>
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <i2c_get_data>:
 3da:	bd 98       	cbi	0x17, 5	; 23
 3dc:	8e b1       	in	r24, 0x0e	; 14
 3de:	80 7f       	andi	r24, 0xF0	; 240
 3e0:	8e b9       	out	0x0e, r24	; 14
 3e2:	68 9a       	sbi	0x0d, 0	; 13
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	8a 95       	dec	r24
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <i2c_get_data+0xc>
 3ea:	00 00       	nop
 3ec:	68 9a       	sbi	0x0d, 0	; 13
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	8a 95       	dec	r24
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <i2c_get_data+0x16>
 3f4:	00 00       	nop
 3f6:	76 9b       	sbis	0x0e, 6	; 14
 3f8:	f4 cf       	rjmp	.-24     	; 0x3e2 <i2c_get_data+0x8>
 3fa:	8f b1       	in	r24, 0x0f	; 15
 3fc:	9f ef       	ldi	r25, 0xFF	; 255
 3fe:	9f b9       	out	0x0f, r25	; 15
 400:	bd 9a       	sbi	0x17, 5	; 23
 402:	08 95       	ret

00000404 <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 40a:	c0 df       	rcall	.-128    	; 0x38c <i2c_send_reg_add>
	i2c_send_start();
 40c:	6d df       	rcall	.-294    	; 0x2e8 <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 40e:	8c 2f       	mov	r24, r28
 410:	88 0f       	add	r24, r24
 412:	81 60       	ori	r24, 0x01	; 1
 414:	a7 df       	rcall	.-178    	; 0x364 <i2c_send_data>
	i2c_get_ack();
 416:	95 df       	rcall	.-214    	; 0x342 <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 418:	e0 df       	rcall	.-64     	; 0x3da <i2c_get_data>
 41a:	c8 2f       	mov	r28, r24
 41c:	d0 e0       	ldi	r29, 0x00	; 0
 41e:	dc 2f       	mov	r29, r28
 420:	cc 27       	eor	r28, r28
	i2c_send_ack();
 422:	7e df       	rcall	.-260    	; 0x320 <i2c_send_ack>
	ret |= i2c_get_data();
 424:	da df       	rcall	.-76     	; 0x3da <i2c_get_data>
 426:	c8 2b       	or	r28, r24
	i2c_send_nack();
 428:	84 df       	rcall	.-248    	; 0x332 <i2c_send_nack>
	i2c_send_stop();
 42a:	72 df       	rcall	.-284    	; 0x310 <i2c_send_stop>
	return(ret);
}
 42c:	ce 01       	movw	r24, r28
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 434:	80 e8       	ldi	r24, 0x80	; 128
 436:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 438:	16 bc       	out	0x26, r1	; 38
	
	buttons_init();
 43a:	e7 de       	rcall	.-562    	; 0x20a <buttons_init>
	gauge_init();
 43c:	5d de       	rcall	.-838    	; 0xf8 <gauge_init>
	acc_init();
 43e:	04 de       	rcall	.-1016   	; 0x48 <acc_init>
 440:	ff cf       	rjmp	.-2      	; 0x440 <main+0xc>

00000442 <uart_init>:

volatile static uint8_t tx_buffer[2];
volatile static uint8_t size = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 442:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 444:	87 e6       	ldi	r24, 0x67	; 103
 446:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
 44c:	86 e2       	ldi	r24, 0x26	; 38
 44e:	83 b9       	out	0x03, r24	; 3
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 450:	8f b7       	in	r24, 0x3f	; 63
 452:	80 68       	ori	r24, 0x80	; 128
 454:	8f bf       	out	0x3f, r24	; 63
 456:	08 95       	ret

00000458 <uart_put_com>:
}

void uart_put_com(uint8_t command, uint8_t data){
	tx_buffer[1] = command;
 458:	e4 e6       	ldi	r30, 0x64	; 100
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 45e:	60 83       	st	Z, r22
	size = 2;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <size>
	UCSRB |= (1<<UDRIE);
 466:	55 9a       	sbi	0x0a, 5	; 10
 468:	08 95       	ret

0000046a <__vector_8>:
}

ISR(USART_UDRE_vect){
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	8f 93       	push	r24
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	if(size > 0){
 47a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 47e:	88 23       	and	r24, r24
 480:	61 f0       	breq	.+24     	; 0x49a <__vector_8+0x30>
		UDR = tx_buffer[size-1];
 482:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <size>
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	ed 59       	subi	r30, 0x9D	; 157
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	80 81       	ld	r24, Z
 48e:	8c b9       	out	0x0c, r24	; 12
		size--;
 490:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 494:	81 50       	subi	r24, 0x01	; 1
 496:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <size>
	}
	if(size == 0){
 49a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 49e:	81 11       	cpse	r24, r1
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__vector_8+0x3a>
		UCSRB &= ~(1<<UDRIE);
 4a2:	55 98       	cbi	0x0a, 5	; 10
	}
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>
