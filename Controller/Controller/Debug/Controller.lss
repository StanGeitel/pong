
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df8  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089b  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000968  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000023d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fe  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000030e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	a0 c0       	rjmp	.+320    	; 0x152 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	76 c0       	rjmp	.+236    	; 0x108 <__vector_13>
  1c:	85 c0       	rjmp	.+266    	; 0x128 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e9       	ldi	r30, 0x9A	; 154
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	44 d0       	rcall	.+136    	; 0xe2 <main>
  5a:	9d c0       	rjmp	.+314    	; 0x196 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_2>:
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
	  
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <i2c_init>:

void i2c_send_nack(){
	PORT(_PORT) |= (1<<_SDA);				//release SDA
	PORT(_PORT) |= (1<<_SCL);				//release SCL
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	8f b9       	out	0x0f, r24	; 15
  76:	80 ea       	ldi	r24, 0xA0	; 160
  78:	88 bb       	out	0x18, r24	; 24
  7a:	87 bb       	out	0x17, r24	; 23
  7c:	8a e2       	ldi	r24, 0x2A	; 42
  7e:	8d b9       	out	0x0d, r24	; 13
  80:	80 ef       	ldi	r24, 0xF0	; 240
  82:	8e b9       	out	0x0e, r24	; 14
  84:	08 95       	ret

00000086 <i2c_send_start>:
  86:	c5 98       	cbi	0x18, 5	; 24
  88:	00 c0       	rjmp	.+0      	; 0x8a <i2c_send_start+0x4>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <i2c_send_start+0x6>
  8c:	00 00       	nop
  8e:	c7 98       	cbi	0x18, 7	; 24
  90:	08 95       	ret

00000092 <i2c_send_stop>:
  92:	c5 98       	cbi	0x18, 5	; 24
  94:	c7 9a       	sbi	0x18, 7	; 24
  96:	00 c0       	rjmp	.+0      	; 0x98 <i2c_send_stop+0x6>
  98:	00 c0       	rjmp	.+0      	; 0x9a <i2c_send_stop+0x8>
  9a:	00 00       	nop
  9c:	c5 9a       	sbi	0x18, 5	; 24
  9e:	08 95       	ret

000000a0 <i2c_get_ack>:
}

uint8_t i2c_get_ack(){
	uint8_t ret;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
  a0:	bd 98       	cbi	0x17, 5	; 23
	
	PORT(_PORT) |= (1<<_SCL);					//release SCL
  a2:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <i2c_get_ack+0x6>
  a6:	00 00       	nop
	_delay_us(BIT_TIME/2);
	if(PORT(_PORT) & (1<<_SDA)){				//read if SDA is 1
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	00 c0       	rjmp	.+0      	; 0xac <i2c_get_ack+0xc>
  ac:	00 00       	nop
		ret = 1;
	}else{
		ret = 0;
	}
	_delay_us(BIT_TIME/2);
	PORT(_PORT) &= ~(1<<_SCL);					//force SCL low
  ae:	c7 98       	cbi	0x18, 7	; 24
	
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
  b0:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
  b2:	85 fb       	bst	r24, 5
  b4:	88 27       	eor	r24, r24
  b6:	80 f9       	bld	r24, 0
  b8:	08 95       	ret

000000ba <i2c_send_data>:

void i2c_send_data(uint8_t data){
	PORT(_PORT) |= (1<<_SCL);					//release SCL
  ba:	c7 9a       	sbi	0x18, 7	; 24
	USICR |= (1<<USITC);						//toggle SCL to HIGH
  bc:	68 9a       	sbi	0x0d, 0	; 13
	USISR &= ~(0xF<<USICNT0);					//reset counter
  be:	9e b1       	in	r25, 0x0e	; 14
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	9e b9       	out	0x0e, r25	; 14
	USIDR = data;
  c4:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) |= (1<<_SDA);
  c6:	c5 9a       	sbi	0x18, 5	; 24
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
  c8:	68 9a       	sbi	0x0d, 0	; 13
  ca:	00 c0       	rjmp	.+0      	; 0xcc <i2c_send_data+0x12>
  cc:	00 c0       	rjmp	.+0      	; 0xce <i2c_send_data+0x14>
  ce:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
  d0:	68 9a       	sbi	0x0d, 0	; 13
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <i2c_send_data+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <i2c_send_data+0x1c>
  d6:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
  d8:	76 9b       	sbis	0x0e, 6	; 14
  da:	f6 cf       	rjmp	.-20     	; 0xc8 <i2c_send_data+0xe>
	USIDR = 0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	8f b9       	out	0x0f, r24	; 15
  e0:	08 95       	ret

000000e2 <main>:
#include "usart.h"


int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
  e6:	16 bc       	out	0x26, r1	; 38
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	8d e3       	ldi	r24, 0x3D	; 61
  ec:	99 e4       	ldi	r25, 0x49	; 73
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x16>
  f8:	00 00       	nop
	
	_delay_ms(3000);
	i2c_init();
  fa:	bb df       	rcall	.-138    	; 0x72 <i2c_init>
	i2c_send_start();
  fc:	c4 df       	rcall	.-120    	; 0x86 <i2c_send_start>
	i2c_send_data(0x25);
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	dc df       	rcall	.-72     	; 0xba <i2c_send_data>
	i2c_get_ack();
 102:	ce df       	rcall	.-100    	; 0xa0 <i2c_get_ack>
	i2c_send_stop();
 104:	c6 df       	rcall	.-116    	; 0x92 <i2c_send_stop>
 106:	ff cf       	rjmp	.-2      	; 0x106 <main+0x24>

00000108 <__vector_13>:
	OCR0B = 9;
	TIMSK |= (1<<OCIE0A)|(1<<OCIE0B);
	SREG |= (1<<SREG_I);								//enable global interrupt
 }
 
 ISR(TIMER0_COMPA_vect){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 114:	83 b7       	in	r24, 0x33	; 51
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 11a:	12 be       	out	0x32, r1	; 50
 }
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_14>:
 
 ISR(TIMER0_COMPB_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
	OCR0B += 10;
 136:	8c b7       	in	r24, 0x3c	; 60
 138:	86 5f       	subi	r24, 0xF6	; 246
 13a:	8c bf       	out	0x3c, r24	; 60
	PORTB ^= (1<<2);
 13c:	98 b3       	in	r25, 0x18	; 24
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	89 27       	eor	r24, r25
 142:	88 bb       	out	0x18, r24	; 24
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_8>:
  bytes = 2;
  UCSRB |= (1<<UDRIE);							// enable uart data interrupt (send data)
}

//send a command out of the buffer
ISR(USART_UDRE_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	if(bytes > 0){
 162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 166:	88 23       	and	r24, r24
 168:	69 f0       	breq	.+26     	; 0x184 <__vector_8+0x32>
		UDR = tx_buffer[bytes];					//write byte to data register
 16a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ee 59       	subi	r30, 0x9E	; 158
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	80 81       	ld	r24, Z
 176:	8c b9       	out	0x0c, r24	; 12
		bytes--;								//lower bytes by one
 178:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 182:	01 c0       	rjmp	.+2      	; 0x186 <__vector_8+0x34>
	}else{
		UCSRB &= ~(1<<UDRIE);					//disable interrupt
 184:	55 98       	cbi	0x0a, 5	; 10
	}
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
