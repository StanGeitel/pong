
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001209  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093d  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b68  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00002bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000952  00000000  00000000  000033e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003d35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	43 c0       	rjmp	.+134    	; 0x8c <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	31 c1       	rjmp	.+610    	; 0x274 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	58 c0       	rjmp	.+176    	; 0xc8 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	05 d1       	rcall	.+522    	; 0x24e <main>
  44:	39 c1       	rjmp	.+626    	; 0x2b8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <acc_init>:
uint16_t x_vel[2], y_vel[2];
uint16_t x_pos[2], y_pos[2];
uint16_t x_noise, y_noise;

void acc_init(){
	i2c_init();
  48:	93 d0       	rcall	.+294    	; 0x170 <i2c_init>
//	ext_int0_init();
	
	i2c_single_write(ACC_ADD, PWR_MAN, 0x00);		//turn off sleep mode
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	6b e6       	ldi	r22, 0x6B	; 107
  4e:	88 e6       	ldi	r24, 0x68	; 104
  50:	e6 d0       	rcall	.+460    	; 0x21e <i2c_single_write>
  52:	08 95       	ret

00000054 <gauge_init>:
	// 17301 is 0% en 31771,5 is 30% en 65535 is 100%
	if (buffer > 31772){
		PORT(_PORT) &= ~(1<<L0);
	}
	else{
		PORT(_PORT) |= (1<<L0);
  54:	8d d0       	rcall	.+282    	; 0x170 <i2c_init>
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	4f ef       	ldi	r20, 0xFF	; 255
  5a:	62 e0       	ldi	r22, 0x02	; 2
  5c:	84 e6       	ldi	r24, 0x64	; 100
  5e:	e8 d0       	rcall	.+464    	; 0x230 <i2c_burst_write>
  60:	2c e1       	ldi	r18, 0x1C	; 28
  62:	4c e7       	ldi	r20, 0x7C	; 124
  64:	66 e0       	ldi	r22, 0x06	; 6
  66:	84 e6       	ldi	r24, 0x64	; 100
  68:	e3 d0       	rcall	.+454    	; 0x230 <i2c_burst_write>
  6a:	44 e0       	ldi	r20, 0x04	; 4
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	84 e6       	ldi	r24, 0x64	; 100
  70:	d6 d0       	rcall	.+428    	; 0x21e <i2c_single_write>
  72:	85 b7       	in	r24, 0x35	; 53
  74:	84 60       	ori	r24, 0x04	; 4
  76:	85 bf       	out	0x35, r24	; 53
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	85 bf       	out	0x35, r24	; 53
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b bf       	out	0x3b, r24	; 59
  84:	8f b7       	in	r24, 0x3f	; 63
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8f bf       	out	0x3f, r24	; 63
  8a:	08 95       	ret

0000008c <__vector_2>:
	}
}

ISR(INT1_vect){							//External interrupt1 service routine
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
	
}
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <gpio_init>:
#include "acc.h"

volatile uint8_t old_buttons = 0x0;

void gpio_init(){
	DDR(_PORT) &= ~((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));				//set buttons as input
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	80 7f       	andi	r24, 0xF0	; 240
  a4:	87 bb       	out	0x17, r24	; 23
	PORT(_PORT) |= (1<<L0);											//enable pull up on led
  a6:	c4 9a       	sbi	0x18, 4	; 24
	DDR(_PORT) |= (1<<L0);											//set led as output
  a8:	bc 9a       	sbi	0x17, 4	; 23
	PCMSK0 |= ((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));					//set buttons as source for pin change interrupt 0
  aa:	80 b5       	in	r24, 0x20	; 32
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);											//enable pin change interrupt 0
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	8b bf       	out	0x3b, r24	; 59

	TCCR0A = ((0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00));	//normal mode
  b6:	10 be       	out	0x30, r1	; 48
	TCCR0B = ((0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00));			//stop timer
  b8:	13 be       	out	0x33, r1	; 51
	TIMSK |= (1<<TOIE0);											//enable overflow interrupt
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<SREG_I);											//enable interrupts I in global status register
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63
  c6:	08 95       	ret

000000c8 <__vector_11>:
	//results in ~30ms timer before checking the buttons states
}

ISR(PCINT0_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	TCNT0 = 0x00;
  d4:	12 be       	out	0x32, r1	; 50
	TCCR0B |= ((1<<CS02)|(0<<CS01)|(1<<CS00));					//Select 8MHz clock with 1024 prescaler
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	83 bf       	out	0x33, r24	; 51
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_6>:

ISR(TIMER0_OVF_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));					//stop timer
  fa:	83 b7       	in	r24, 0x33	; 51
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	83 bf       	out	0x33, r24	; 51
	
	uint8_t new_buttons = (PIN(_PORT) & 0xF);
 100:	96 b3       	in	r25, 0x16	; 22
 102:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 108:	89 27       	eor	r24, r25
	if((temp & (1<<B0)) && (!(old_buttons & (1<<B0)))){
 10a:	80 ff       	sbrs	r24, 0
 10c:	08 c0       	rjmp	.+16     	; 0x11e <__vector_6+0x36>
 10e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 112:	20 fd       	sbrc	r18, 0
 114:	04 c0       	rjmp	.+8      	; 0x11e <__vector_6+0x36>
		PORT(_PORT) ^= (1<<L0);
 116:	38 b3       	in	r19, 0x18	; 24
 118:	20 e1       	ldi	r18, 0x10	; 16
 11a:	23 27       	eor	r18, r19
 11c:	28 bb       	out	0x18, r18	; 24
		//uart_put_com((B0_COM<<2), (PIN(_PORT) & (1<<B0));
	}
	if((temp & (1<<B1)) && (!(old_buttons & (1<<B1)))){
 11e:	81 ff       	sbrs	r24, 1
 120:	08 c0       	rjmp	.+16     	; 0x132 <__vector_6+0x4a>
 122:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 126:	21 fd       	sbrc	r18, 1
 128:	04 c0       	rjmp	.+8      	; 0x132 <__vector_6+0x4a>
		PORT(_PORT) ^= (1<<L0);
 12a:	38 b3       	in	r19, 0x18	; 24
 12c:	20 e1       	ldi	r18, 0x10	; 16
 12e:	23 27       	eor	r18, r19
 130:	28 bb       	out	0x18, r18	; 24
		//uart_put_com((B1_COM<<2), (PIN(_PORT) & (1<<B1));
	}
	if((temp & (1<<B2)) && (!(old_buttons & (1<<B2)))){
 132:	82 ff       	sbrs	r24, 2
 134:	08 c0       	rjmp	.+16     	; 0x146 <__vector_6+0x5e>
 136:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 13a:	22 fd       	sbrc	r18, 2
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__vector_6+0x5e>
		PORT(_PORT) ^= (1<<L0);
 13e:	38 b3       	in	r19, 0x18	; 24
 140:	20 e1       	ldi	r18, 0x10	; 16
 142:	23 27       	eor	r18, r19
 144:	28 bb       	out	0x18, r18	; 24
		//uart_put_com((B2_COM<<2), (PIN(_PORT) & (1<<B2));
	}
	if((temp & (1<<B3)) && (!(old_buttons & (1<<B3)))){
 146:	83 ff       	sbrs	r24, 3
 148:	08 c0       	rjmp	.+16     	; 0x15a <__vector_6+0x72>
 14a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 14e:	83 fd       	sbrc	r24, 3
 150:	04 c0       	rjmp	.+8      	; 0x15a <__vector_6+0x72>
		PORT(_PORT) ^= (1<<L0);
 152:	28 b3       	in	r18, 0x18	; 24
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	82 27       	eor	r24, r18
 158:	88 bb       	out	0x18, r24	; 24
		//acc_calibrate();
	}
	old_buttons = new_buttons;	
 15a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
}
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <i2c_init>:

void i2c_send_nack(){
	PORT(_PORT) |= (1<<_SDA);				//release SDA
	PORT(_PORT) |= (1<<_SCL);				//release SCL
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8f b9       	out	0x0f, r24	; 15
 174:	88 b3       	in	r24, 0x18	; 24
 176:	80 6a       	ori	r24, 0xA0	; 160
 178:	88 bb       	out	0x18, r24	; 24
 17a:	87 b3       	in	r24, 0x17	; 23
 17c:	80 6a       	ori	r24, 0xA0	; 160
 17e:	87 bb       	out	0x17, r24	; 23
 180:	8a e2       	ldi	r24, 0x2A	; 42
 182:	8d b9       	out	0x0d, r24	; 13
 184:	80 ef       	ldi	r24, 0xF0	; 240
 186:	8e b9       	out	0x0e, r24	; 14
 188:	08 95       	ret

0000018a <i2c_send_start>:
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	80 6a       	ori	r24, 0xA0	; 160
 18e:	88 bb       	out	0x18, r24	; 24
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	98 b3       	in	r25, 0x18	; 24
 194:	88 b3       	in	r24, 0x18	; 24
 196:	85 fb       	bst	r24, 5
 198:	88 27       	eor	r24, r24
 19a:	80 f9       	bld	r24, 0
 19c:	82 13       	cpse	r24, r18
 19e:	f9 cf       	rjmp	.-14     	; 0x192 <i2c_send_start+0x8>
 1a0:	99 23       	and	r25, r25
 1a2:	bc f7       	brge	.-18     	; 0x192 <i2c_send_start+0x8>
 1a4:	c5 98       	cbi	0x18, 5	; 24
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <i2c_send_start+0x1e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <i2c_send_start+0x20>
 1aa:	00 00       	nop
 1ac:	c7 98       	cbi	0x18, 7	; 24
 1ae:	08 95       	ret

000001b0 <i2c_send_stop>:
 1b0:	c5 98       	cbi	0x18, 5	; 24
 1b2:	c7 9a       	sbi	0x18, 7	; 24
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <i2c_send_stop+0x6>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <i2c_send_stop+0x8>
 1b8:	00 00       	nop
 1ba:	c5 9a       	sbi	0x18, 5	; 24
 1bc:	08 95       	ret

000001be <i2c_get_ack>:
}

uint8_t i2c_get_ack(){
	uint8_t ret = 0;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 1be:	bd 98       	cbi	0x17, 5	; 23
	USICR |= (1<<USITC);						//toggle SCL to HIGH
 1c0:	68 9a       	sbi	0x0d, 0	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <i2c_get_ack+0x6>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <i2c_get_ack+0x8>
 1c6:	00 00       	nop
	_delay_us(BIT_TIME);
	USICR |= (1<<USITC);						//toggle SCL to LOW
 1c8:	68 9a       	sbi	0x0d, 0	; 13
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <i2c_get_ack+0xe>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <i2c_get_ack+0x10>
 1ce:	00 00       	nop
	_delay_us(BIT_TIME);
	ret = (USIDR & 1);
 1d0:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 1d2:	9f ef       	ldi	r25, 0xFF	; 255
 1d4:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 1d6:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 1d8:	81 70       	andi	r24, 0x01	; 1
 1da:	08 95       	ret

000001dc <i2c_send_data>:

void i2c_send_data(uint8_t data){
	USIDR = data;
 1dc:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) |= (1<<_SDA);
 1de:	c5 9a       	sbi	0x18, 5	; 24
	USISR &= ~(0xF<<USICNT0);					//reset counter
 1e0:	8e b1       	in	r24, 0x0e	; 14
 1e2:	80 7f       	andi	r24, 0xF0	; 240
 1e4:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 1e6:	68 9a       	sbi	0x0d, 0	; 13
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <i2c_send_data+0xe>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <i2c_send_data+0x10>
 1ec:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 1ee:	68 9a       	sbi	0x0d, 0	; 13
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <i2c_send_data+0x16>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <i2c_send_data+0x18>
 1f4:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 1f6:	76 9b       	sbis	0x0e, 6	; 14
 1f8:	f6 cf       	rjmp	.-20     	; 0x1e6 <i2c_send_data+0xa>
	
	USIDR = 0xFF;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	8f b9       	out	0x0f, r24	; 15
 1fe:	08 95       	ret

00000200 <i2c_send_reg_add>:
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}

void i2c_send_reg_add(uint8_t dev_address, uint8_t reg_address){
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	d8 2f       	mov	r29, r24
 206:	c6 2f       	mov	r28, r22
	i2c_send_start();
 208:	c0 df       	rcall	.-128    	; 0x18a <i2c_send_start>
	i2c_send_data(dev_address<<1);				//send device address and write is 0
 20a:	8d 2f       	mov	r24, r29
 20c:	88 0f       	add	r24, r24
 20e:	e6 df       	rcall	.-52     	; 0x1dc <i2c_send_data>
	i2c_get_ack();							//wait for acknowledge
 210:	d6 df       	rcall	.-84     	; 0x1be <i2c_get_ack>
	i2c_send_data(reg_address);				//send register address of MPU
 212:	8c 2f       	mov	r24, r28
 214:	e3 df       	rcall	.-58     	; 0x1dc <i2c_send_data>
	i2c_get_ack();							//wait for acknowledge
 216:	d3 df       	rcall	.-90     	; 0x1be <i2c_get_ack>
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <i2c_single_write>:
#include <avr/interrupt.h>

#include "i2c.h"
#include "gpio.h"

void i2c_single_write(uint8_t dev_address, uint8_t reg_address, uint8_t data){
 21e:	cf 93       	push	r28
 220:	c4 2f       	mov	r28, r20
	i2c_send_reg_add(dev_address, reg_address);
 222:	ee df       	rcall	.-36     	; 0x200 <i2c_send_reg_add>
	i2c_send_data(data);
 224:	8c 2f       	mov	r24, r28
 226:	da df       	rcall	.-76     	; 0x1dc <i2c_send_data>
	i2c_get_ack();
 228:	ca df       	rcall	.-108    	; 0x1be <i2c_get_ack>
	i2c_send_stop();
 22a:	c2 df       	rcall	.-124    	; 0x1b0 <i2c_send_stop>
}
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <i2c_burst_write>:

void i2c_burst_write(uint8_t dev_address, uint8_t reg_address, uint8_t data1, uint8_t data2){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	d4 2f       	mov	r29, r20
 236:	c2 2f       	mov	r28, r18
	i2c_send_reg_add(dev_address, reg_address);
 238:	e3 df       	rcall	.-58     	; 0x200 <i2c_send_reg_add>
	i2c_send_data(data1);
 23a:	8d 2f       	mov	r24, r29
 23c:	cf df       	rcall	.-98     	; 0x1dc <i2c_send_data>
	i2c_get_ack();
 23e:	bf df       	rcall	.-130    	; 0x1be <i2c_get_ack>
	i2c_send_data(data2);
 240:	8c 2f       	mov	r24, r28
 242:	cc df       	rcall	.-104    	; 0x1dc <i2c_send_data>
	i2c_get_ack();
 244:	bc df       	rcall	.-136    	; 0x1be <i2c_get_ack>
	i2c_send_stop();
 246:	b4 df       	rcall	.-152    	; 0x1b0 <i2c_send_stop>
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 252:	16 bc       	out	0x26, r1	; 38
		
	gpio_init();
 254:	25 df       	rcall	.-438    	; 0xa0 <gpio_init>
	gauge_init();
 256:	fe de       	rcall	.-516    	; 0x54 <gauge_init>
	uart_init();
 258:	02 d0       	rcall	.+4      	; 0x25e <uart_init>
	acc_init();
 25a:	f6 de       	rcall	.-532    	; 0x48 <acc_init>
 25c:	ff cf       	rjmp	.-2      	; 0x25c <main+0xe>

0000025e <uart_init>:
void uart_put_com(uint8_t command, uint8_t data){
	while(size > 0);
	tx_buffer[1] = command;
	tx_buffer[0] = data;
	size = 2;
	UCSRB |= (1<<UDRIE);
 25e:	12 b8       	out	0x02, r1	; 2
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	89 b9       	out	0x09, r24	; 9
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	8a b9       	out	0x0a, r24	; 10
 268:	86 e2       	ldi	r24, 0x26	; 38
 26a:	83 b9       	out	0x03, r24	; 3
 26c:	8f b7       	in	r24, 0x3f	; 63
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	8f bf       	out	0x3f, r24	; 63
 272:	08 95       	ret

00000274 <__vector_8>:
}

ISR(USART_UDRE_vect){
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	8f 93       	push	r24
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	if(size > 0){
 284:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
 288:	88 23       	and	r24, r24
 28a:	69 f0       	breq	.+26     	; 0x2a6 <__vector_8+0x32>
		UDR = tx_buffer[size-1];
 28c:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <size>
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	ef 59       	subi	r30, 0x9F	; 159
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	80 81       	ld	r24, Z
 298:	8c b9       	out	0x0c, r24	; 12
		size--;
 29a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
 29e:	81 50       	subi	r24, 0x01	; 1
 2a0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <size>
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <__vector_8+0x34>
	}else{
		UCSRB &= ~(1<<UDRIE);
 2a6:	55 98       	cbi	0x0a, 5	; 10
	}
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	8f 91       	pop	r24
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
