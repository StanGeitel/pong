
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800060  00800060  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001487  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00001e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c99  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b04  00000000  00000000  00003e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	69 c0       	rjmp	.+210    	; 0xd6 <__vector_1>
   4:	7a c1       	rjmp	.+756    	; 0x2fa <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	24 c3       	rjmp	.+1608   	; 0x652 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	bd c1       	rjmp	.+890    	; 0x388 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	57 c3       	rjmp	.+1710   	; 0x6c0 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	e3 c1       	rjmp	.+966    	; 0x3de <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 39       	cpi	r26, 0x9A	; 154
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	c8 d2       	rcall	.+1424   	; 0x5d4 <main>
  44:	98 c3       	rjmp	.+1840   	; 0x776 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <acc_calibrate>:
	
	SREG |= (1<<SREG_I);							//enable interrupts I in global status register
}

void acc_calibrate(){
	x_acc[0] = x_acc[1] = y_acc[0] = y_acc[1] = x_vel[0] = x_vel[1] = y_vel[0] = y_vel[1] =	x_pos[0] = x_pos[1] = y_pos[0] = y_pos[1] = 0;	
  48:	e5 e6       	ldi	r30, 0x65	; 101
  4a:	f0 e0       	ldi	r31, 0x00	; 0
  4c:	13 82       	std	Z+3, r1	; 0x03
  4e:	12 82       	std	Z+2, r1	; 0x02
  50:	11 82       	std	Z+1, r1	; 0x01
  52:	10 82       	st	Z, r1
  54:	e9 e6       	ldi	r30, 0x69	; 105
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	13 82       	std	Z+3, r1	; 0x03
  5a:	12 82       	std	Z+2, r1	; 0x02
  5c:	11 82       	std	Z+1, r1	; 0x01
  5e:	10 82       	st	Z, r1
  60:	ed e6       	ldi	r30, 0x6D	; 109
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	13 82       	std	Z+3, r1	; 0x03
  66:	12 82       	std	Z+2, r1	; 0x02
  68:	11 82       	std	Z+1, r1	; 0x01
  6a:	10 82       	st	Z, r1
  6c:	e1 e7       	ldi	r30, 0x71	; 113
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	13 82       	std	Z+3, r1	; 0x03
  72:	12 82       	std	Z+2, r1	; 0x02
  74:	11 82       	std	Z+1, r1	; 0x01
  76:	10 82       	st	Z, r1
  78:	e5 e7       	ldi	r30, 0x75	; 117
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	13 82       	std	Z+3, r1	; 0x03
  7e:	12 82       	std	Z+2, r1	; 0x02
  80:	11 82       	std	Z+1, r1	; 0x01
  82:	10 82       	st	Z, r1
  84:	e9 e7       	ldi	r30, 0x79	; 121
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	13 82       	std	Z+3, r1	; 0x03
  8a:	12 82       	std	Z+2, r1	; 0x02
  8c:	11 82       	std	Z+1, r1	; 0x01
  8e:	10 82       	st	Z, r1
  90:	08 95       	ret

00000092 <acc_init>:
volatile static int16_t x_pos[2], y_pos[2];
volatile static int16_t x_noise = 0, y_noise = 0;
volatile static uint8_t drift_cnt = 0;

void acc_init(){
	i2c_single_write(ACC_ADD, PWR_MAN, 0x00);		//turn off sleep mode
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	6b e6       	ldi	r22, 0x6B	; 107
  96:	88 e6       	ldi	r24, 0x68	; 104
  98:	58 d2       	rcall	.+1200   	; 0x54a <i2c_single_write>
	i2c_single_write(ACC_ADD, ACC_CON, 0x00);		//set range on +/- 2g
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	6c e1       	ldi	r22, 0x1C	; 28
  9e:	88 e6       	ldi	r24, 0x68	; 104
  a0:	54 d2       	rcall	.+1192   	; 0x54a <i2c_single_write>
	i2c_single_write(ACC_ADD, SMPRT_DIV, 0x08);		//1kHz sample rate and interrupt rate
  a2:	48 e0       	ldi	r20, 0x08	; 8
  a4:	69 e1       	ldi	r22, 0x19	; 25
  a6:	88 e6       	ldi	r24, 0x68	; 104
  a8:	50 d2       	rcall	.+1184   	; 0x54a <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_CON, 0x10);		//clear interrupt on any read
  aa:	40 e1       	ldi	r20, 0x10	; 16
  ac:	67 e3       	ldi	r22, 0x37	; 55
  ae:	88 e6       	ldi	r24, 0x68	; 104
  b0:	4c d2       	rcall	.+1176   	; 0x54a <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_EN, 0x01);		//enable interrupt on data ready
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	68 e3       	ldi	r22, 0x38	; 56
  b6:	88 e6       	ldi	r24, 0x68	; 104
  b8:	48 d2       	rcall	.+1168   	; 0x54a <i2c_single_write>
	
	acc_calibrate();
  ba:	c6 df       	rcall	.-116    	; 0x48 <acc_calibrate>

	MCUCR |= (1 << ISC00);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);							//The rising edge of INT0 generates an interrupt request
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);							//enable external interrupt 0 in general interrupt mask register
  c8:	8b b7       	in	r24, 0x3b	; 59
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);							//enable interrupts I in global status register
  ce:	8f b7       	in	r24, 0x3f	; 63
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	8f bf       	out	0x3f, r24	; 63
  d4:	08 95       	ret

000000d6 <__vector_1>:
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
*/
}

ISR(INT0_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	x_acc[1] = i2c_burst_read(ACC_ADD, X_MSB) + x_noise;
  fc:	6b e3       	ldi	r22, 0x3B	; 59
  fe:	88 e6       	ldi	r24, 0x68	; 104
 100:	51 d2       	rcall	.+1186   	; 0x5a4 <i2c_burst_read>
 102:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <x_noise>
 106:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <x_noise+0x1>
 10a:	82 0f       	add	r24, r18
 10c:	93 1f       	adc	r25, r19
 10e:	c9 e7       	ldi	r28, 0x79	; 121
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	9b 83       	std	Y+3, r25	; 0x03
 114:	8a 83       	std	Y+2, r24	; 0x02
	y_acc[1] = i2c_burst_read(ACC_ADD, Y_MSB) + y_noise;
 116:	6d e3       	ldi	r22, 0x3D	; 61
 118:	88 e6       	ldi	r24, 0x68	; 104
 11a:	44 d2       	rcall	.+1160   	; 0x5a4 <i2c_burst_read>
 11c:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <y_noise>
 120:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <y_noise+0x1>
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <y_acc+0x3>
 12c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <y_acc+0x2>
	
	if((x_acc[1] <= 50 && x_acc[1] >= -50) && (y_acc[1] <= 50 && y_acc[1] >= -50)){
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	9b 81       	ldd	r25, Y+3	; 0x03
 134:	c3 97       	sbiw	r24, 0x33	; 51
 136:	d4 f4       	brge	.+52     	; 0x16c <__stack+0x8d>
 138:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <x_acc+0x2>
 13c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <x_acc+0x3>
 140:	8e 3c       	cpi	r24, 0xCE	; 206
 142:	9f 4f       	sbci	r25, 0xFF	; 255
 144:	9c f0       	brlt	.+38     	; 0x16c <__stack+0x8d>
 146:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <y_acc+0x2>
 14a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <y_acc+0x3>
 14e:	c3 97       	sbiw	r24, 0x33	; 51
 150:	6c f4       	brge	.+26     	; 0x16c <__stack+0x8d>
 152:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <y_acc+0x2>
 156:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <y_acc+0x3>
 15a:	8e 3c       	cpi	r24, 0xCE	; 206
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	34 f0       	brlt	.+12     	; 0x16c <__stack+0x8d>
		drift_cnt++;
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 16a:	5f c0       	rjmp	.+190    	; 0x22a <__stack+0x14b>
	}
	else{
		drift_cnt = 0;
 16c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		x_vel[1] = x_vel[0] + (x_acc[0] + ((x_acc[1] - x_acc[0])>>1));
 170:	a1 e7       	ldi	r26, 0x71	; 113
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	2d 91       	ld	r18, X+
 176:	3c 91       	ld	r19, X
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	e9 e7       	ldi	r30, 0x79	; 121
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	40 81       	ld	r20, Z
 180:	51 81       	ldd	r21, Z+1	; 0x01
 182:	82 81       	ldd	r24, Z+2	; 0x02
 184:	93 81       	ldd	r25, Z+3	; 0x03
 186:	60 81       	ld	r22, Z
 188:	71 81       	ldd	r23, Z+1	; 0x01
 18a:	86 1b       	sub	r24, r22
 18c:	97 0b       	sbc	r25, r23
 18e:	95 95       	asr	r25
 190:	87 95       	ror	r24
 192:	84 0f       	add	r24, r20
 194:	95 1f       	adc	r25, r21
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	13 96       	adiw	r26, 0x03	; 3
 19c:	9c 93       	st	X, r25
 19e:	8e 93       	st	-X, r24
 1a0:	12 97       	sbiw	r26, 0x02	; 2
		y_vel[1] = y_vel[0] + (y_acc[0] + ((y_acc[1] - y_acc[0])>>1));
 1a2:	ed e6       	ldi	r30, 0x6D	; 109
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	20 81       	ld	r18, Z
 1a8:	31 81       	ldd	r19, Z+1	; 0x01
 1aa:	c5 e7       	ldi	r28, 0x75	; 117
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	48 81       	ld	r20, Y
 1b0:	59 81       	ldd	r21, Y+1	; 0x01
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	9b 81       	ldd	r25, Y+3	; 0x03
 1b6:	68 81       	ld	r22, Y
 1b8:	79 81       	ldd	r23, Y+1	; 0x01
 1ba:	86 1b       	sub	r24, r22
 1bc:	97 0b       	sbc	r25, r23
 1be:	95 95       	asr	r25
 1c0:	87 95       	ror	r24
 1c2:	84 0f       	add	r24, r20
 1c4:	95 1f       	adc	r25, r21
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	93 83       	std	Z+3, r25	; 0x03
 1cc:	82 83       	std	Z+2, r24	; 0x02
		
		x_pos[1] = x_pos[0] + (x_vel[0] + ((x_vel[1] - x_vel[0])>>1));
 1ce:	c9 e6       	ldi	r28, 0x69	; 105
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	28 81       	ld	r18, Y
 1d4:	39 81       	ldd	r19, Y+1	; 0x01
 1d6:	4d 91       	ld	r20, X+
 1d8:	5c 91       	ld	r21, X
 1da:	11 97       	sbiw	r26, 0x01	; 1
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	8d 91       	ld	r24, X+
 1e0:	9c 91       	ld	r25, X
 1e2:	13 97       	sbiw	r26, 0x03	; 3
 1e4:	6d 91       	ld	r22, X+
 1e6:	7c 91       	ld	r23, X
 1e8:	86 1b       	sub	r24, r22
 1ea:	97 0b       	sbc	r25, r23
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	84 0f       	add	r24, r20
 1f2:	95 1f       	adc	r25, r21
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	9b 83       	std	Y+3, r25	; 0x03
 1fa:	8a 83       	std	Y+2, r24	; 0x02
		y_pos[1] = y_pos[0] + (y_vel[0] + ((y_vel[1] - y_vel[0])>>1));
 1fc:	a5 e6       	ldi	r26, 0x65	; 101
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	2d 91       	ld	r18, X+
 202:	3c 91       	ld	r19, X
 204:	11 97       	sbiw	r26, 0x01	; 1
 206:	40 81       	ld	r20, Z
 208:	51 81       	ldd	r21, Z+1	; 0x01
 20a:	82 81       	ldd	r24, Z+2	; 0x02
 20c:	93 81       	ldd	r25, Z+3	; 0x03
 20e:	60 81       	ld	r22, Z
 210:	71 81       	ldd	r23, Z+1	; 0x01
 212:	86 1b       	sub	r24, r22
 214:	97 0b       	sbc	r25, r23
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	84 0f       	add	r24, r20
 21c:	95 1f       	adc	r25, r21
 21e:	82 0f       	add	r24, r18
 220:	93 1f       	adc	r25, r19
 222:	13 96       	adiw	r26, 0x03	; 3
 224:	9c 93       	st	X, r25
 226:	8e 93       	st	-X, r24
 228:	12 97       	sbiw	r26, 0x02	; 2
	}
	
	//uart_set_pos(x_pos[1], y_pos[1]);
	//uart_set_pos(0x5555,0x5555);
	
	if(drift_cnt == 8){
 22a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	41 f4       	brne	.+16     	; 0x242 <__stack+0x163>
		x_vel[1] = 0;
 232:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <x_vel+0x3>
 236:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <x_vel+0x2>
		y_vel[1] = 0;
 23a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <y_vel+0x3>
 23e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <y_vel+0x2>
	}
	x_acc[0] = x_acc[1];
 242:	e9 e7       	ldi	r30, 0x79	; 121
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	82 81       	ldd	r24, Z+2	; 0x02
 248:	93 81       	ldd	r25, Z+3	; 0x03
 24a:	91 83       	std	Z+1, r25	; 0x01
 24c:	80 83       	st	Z, r24
	y_acc[0] = y_acc[1];
 24e:	e5 e7       	ldi	r30, 0x75	; 117
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	93 81       	ldd	r25, Z+3	; 0x03
 256:	91 83       	std	Z+1, r25	; 0x01
 258:	80 83       	st	Z, r24

	x_vel[0] = x_vel[1];
 25a:	e1 e7       	ldi	r30, 0x71	; 113
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	82 81       	ldd	r24, Z+2	; 0x02
 260:	93 81       	ldd	r25, Z+3	; 0x03
 262:	91 83       	std	Z+1, r25	; 0x01
 264:	80 83       	st	Z, r24
	y_vel[0] = y_vel[1];
 266:	ed e6       	ldi	r30, 0x6D	; 109
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	93 81       	ldd	r25, Z+3	; 0x03
 26e:	91 83       	std	Z+1, r25	; 0x01
 270:	80 83       	st	Z, r24

	x_pos[0] = x_pos[1];
 272:	e9 e6       	ldi	r30, 0x69	; 105
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	82 81       	ldd	r24, Z+2	; 0x02
 278:	93 81       	ldd	r25, Z+3	; 0x03
 27a:	91 83       	std	Z+1, r25	; 0x01
 27c:	80 83       	st	Z, r24
	y_pos[0] = y_pos[1];
 27e:	e5 e6       	ldi	r30, 0x65	; 101
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	82 81       	ldd	r24, Z+2	; 0x02
 284:	93 81       	ldd	r25, Z+3	; 0x03
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <gauge_init>:
#include "i2c.h"

volatile static uint8_t count = 0;

void gauge_init(void){
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	4f ef       	ldi	r20, 0xFF	; 255
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	84 e6       	ldi	r24, 0x64	; 100
 2b8:	51 d1       	rcall	.+674    	; 0x55c <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 2ba:	2c e1       	ldi	r18, 0x1C	; 28
 2bc:	4c e7       	ldi	r20, 0x7C	; 124
 2be:	66 e0       	ldi	r22, 0x06	; 6
 2c0:	84 e6       	ldi	r24, 0x64	; 100
 2c2:	4c d1       	rcall	.+664    	; 0x55c <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 2c4:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 2c6:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 2c8:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 2ca:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 2cc:	89 b7       	in	r24, 0x39	; 57
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 2d2:	85 b7       	in	r24, 0x35	; 53
 2d4:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 2d6:	85 b7       	in	r24, 0x35	; 53
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 2dc:	8b b7       	in	r24, 0x3b	; 59
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 2e2:	8f b7       	in	r24, 0x3f	; 63
 2e4:	80 68       	ori	r24, 0x80	; 128
 2e6:	8f bf       	out	0x3f, r24	; 63
 2e8:	08 95       	ret

000002ea <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 2ea:	ce d0       	rcall	.+412    	; 0x488 <i2c_send_start>
	i2c_send_data(ARA<<1);
 2ec:	88 e1       	ldi	r24, 0x18	; 24
 2ee:	0a d1       	rcall	.+532    	; 0x504 <i2c_send_data>
	i2c_get_ack();						
 2f0:	f8 d0       	rcall	.+496    	; 0x4e2 <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 2f2:	43 d1       	rcall	.+646    	; 0x57a <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 2f4:	ee d0       	rcall	.+476    	; 0x4d2 <i2c_send_nack>
	i2c_send_stop();
 2f6:	dc d0       	rcall	.+440    	; 0x4b0 <i2c_send_stop>
 2f8:	08 95       	ret

000002fa <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 31c:	03 b6       	in	r0, 0x33	; 51
 31e:	02 fe       	sbrs	r0, 2
 320:	13 c0       	rjmp	.+38     	; 0x348 <__vector_2+0x4e>
 322:	03 b6       	in	r0, 0x33	; 51
 324:	00 fe       	sbrs	r0, 0
 326:	10 c0       	rjmp	.+32     	; 0x348 <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	8a 7f       	andi	r24, 0xFA	; 250
 32c:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 32e:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	64 e0       	ldi	r22, 0x04	; 4
 336:	84 e6       	ldi	r24, 0x64	; 100
 338:	11 d1       	rcall	.+546    	; 0x55c <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 33a:	2c e1       	ldi	r18, 0x1C	; 28
 33c:	4c e7       	ldi	r20, 0x7C	; 124
 33e:	66 e0       	ldi	r22, 0x06	; 6
 340:	84 e6       	ldi	r24, 0x64	; 100
 342:	0c d1       	rcall	.+536    	; 0x55c <i2c_burst_write>
		gauge_send_arp();	
 344:	d2 df       	rcall	.-92     	; 0x2ea <gauge_send_arp>
 346:	0f c0       	rjmp	.+30     	; 0x366 <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 348:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 34a:	83 b7       	in	r24, 0x33	; 51
 34c:	85 60       	ori	r24, 0x05	; 5
 34e:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	66 e0       	ldi	r22, 0x06	; 6
 356:	84 e6       	ldi	r24, 0x64	; 100
 358:	01 d1       	rcall	.+514    	; 0x55c <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 35a:	2d ef       	ldi	r18, 0xFD	; 253
 35c:	4d e7       	ldi	r20, 0x7D	; 125
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	84 e6       	ldi	r24, 0x64	; 100
 362:	fc d0       	rcall	.+504    	; 0x55c <i2c_burst_write>
		gauge_send_arp();
 364:	c2 df       	rcall	.-124    	; 0x2ea <gauge_send_arp>
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_6>:

ISR(TIMER0_OVF_vect){
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
	if(count == 17){
 396:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <count>
 39a:	81 31       	cpi	r24, 0x11	; 17
 39c:	39 f4       	brne	.+14     	; 0x3ac <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 39e:	98 b3       	in	r25, 0x18	; 24
 3a0:	80 e1       	ldi	r24, 0x10	; 16
 3a2:	89 27       	eor	r24, r25
 3a4:	88 bb       	out	0x18, r24	; 24
		count = 0;
 3a6:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <count>
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <__vector_6+0x2e>
	}else{
		count++;
 3ac:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <count>
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <count>
	}
}
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <buttons_init>:
#include "uart.h"

volatile static uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 3c4:	87 b3       	in	r24, 0x17	; 23
 3c6:	80 7f       	andi	r24, 0xF0	; 240
 3c8:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 3ca:	80 b5       	in	r24, 0x20	; 32
 3cc:	8f 60       	ori	r24, 0x0F	; 15
 3ce:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 3d0:	8b b7       	in	r24, 0x3b	; 59
 3d2:	80 62       	ori	r24, 0x20	; 32
 3d4:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 3d6:	8f b7       	in	r24, 0x3f	; 63
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	8f bf       	out	0x3f, r24	; 63
 3dc:	08 95       	ret

000003de <__vector_11>:
}

ISR(PCINT0_vect){		
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 404:	d6 b3       	in	r29, 0x16	; 22
 406:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 408:	c0 91 7e 00 	lds	r28, 0x007E	; 0x80007e <old_buttons>
 40c:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 40e:	c0 ff       	sbrs	r28, 0
 410:	06 c0       	rjmp	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <old_buttons>
 416:	80 ff       	sbrs	r24, 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		uart_set_button(0);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	f9 d0       	rcall	.+498    	; 0x610 <uart_set_button>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 41e:	c1 ff       	sbrs	r28, 1
 420:	06 c0       	rjmp	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 422:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <old_buttons>
 426:	81 ff       	sbrs	r24, 1
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		uart_set_button(1);
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	f1 d0       	rcall	.+482    	; 0x610 <uart_set_button>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 42e:	c2 ff       	sbrs	r28, 2
 430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 432:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <old_buttons>
 436:	82 ff       	sbrs	r24, 2
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		uart_set_button(2);
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	e9 d0       	rcall	.+466    	; 0x610 <uart_set_button>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 43e:	c3 fd       	sbrc	r28, 3
 440:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <old_buttons>
		
	}
	old_buttons = new_buttons;
 444:	d0 93 7e 00 	sts	0x007E, r29	; 0x80007e <old_buttons>
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	8f b9       	out	0x0f, r24	; 15
 472:	88 b3       	in	r24, 0x18	; 24
 474:	80 6a       	ori	r24, 0xA0	; 160
 476:	88 bb       	out	0x18, r24	; 24
 478:	87 b3       	in	r24, 0x17	; 23
 47a:	80 6a       	ori	r24, 0xA0	; 160
 47c:	87 bb       	out	0x17, r24	; 23
 47e:	8a e2       	ldi	r24, 0x2A	; 42
 480:	8d b9       	out	0x0d, r24	; 13
 482:	80 ef       	ldi	r24, 0xF0	; 240
 484:	8e b9       	out	0x0e, r24	; 14
 486:	08 95       	ret

00000488 <i2c_send_start>:
 488:	88 b3       	in	r24, 0x18	; 24
 48a:	80 6a       	ori	r24, 0xA0	; 160
 48c:	88 bb       	out	0x18, r24	; 24
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	98 b3       	in	r25, 0x18	; 24
 492:	88 b3       	in	r24, 0x18	; 24
 494:	85 fb       	bst	r24, 5
 496:	88 27       	eor	r24, r24
 498:	80 f9       	bld	r24, 0
 49a:	82 13       	cpse	r24, r18
 49c:	f9 cf       	rjmp	.-14     	; 0x490 <i2c_send_start+0x8>
 49e:	99 23       	and	r25, r25
 4a0:	bc f7       	brge	.-18     	; 0x490 <i2c_send_start+0x8>
 4a2:	c5 98       	cbi	0x18, 5	; 24
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	8a 95       	dec	r24
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <i2c_send_start+0x1e>
 4aa:	00 00       	nop
 4ac:	c7 98       	cbi	0x18, 7	; 24
 4ae:	08 95       	ret

000004b0 <i2c_send_stop>:
 4b0:	c5 98       	cbi	0x18, 5	; 24
 4b2:	c7 9a       	sbi	0x18, 7	; 24
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	8a 95       	dec	r24
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <i2c_send_stop+0x6>
 4ba:	00 00       	nop
 4bc:	c5 9a       	sbi	0x18, 5	; 24
 4be:	08 95       	ret

000004c0 <i2c_send_ack>:
 4c0:	c5 98       	cbi	0x18, 5	; 24
 4c2:	c7 9a       	sbi	0x18, 7	; 24
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	8a 95       	dec	r24
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <i2c_send_ack+0x6>
 4ca:	00 00       	nop
 4cc:	c7 98       	cbi	0x18, 7	; 24
 4ce:	c5 9a       	sbi	0x18, 5	; 24
 4d0:	08 95       	ret

000004d2 <i2c_send_nack>:
 4d2:	c5 9a       	sbi	0x18, 5	; 24
 4d4:	c7 9a       	sbi	0x18, 7	; 24
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	8a 95       	dec	r24
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <i2c_send_nack+0x6>
 4dc:	00 00       	nop
 4de:	c7 98       	cbi	0x18, 7	; 24
 4e0:	08 95       	ret

000004e2 <i2c_get_ack>:
 4e2:	bd 98       	cbi	0x17, 5	; 23
 4e4:	68 9a       	sbi	0x0d, 0	; 13
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	8a 95       	dec	r24
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <i2c_get_ack+0x6>
 4ec:	00 00       	nop
 4ee:	68 9a       	sbi	0x0d, 0	; 13
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	8a 95       	dec	r24
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <i2c_get_ack+0x10>
 4f6:	00 00       	nop
 4f8:	8f b1       	in	r24, 0x0f	; 15
 4fa:	9f ef       	ldi	r25, 0xFF	; 255
 4fc:	9f b9       	out	0x0f, r25	; 15
 4fe:	bd 9a       	sbi	0x17, 5	; 23
 500:	81 70       	andi	r24, 0x01	; 1
 502:	08 95       	ret

00000504 <i2c_send_data>:
 504:	8f b9       	out	0x0f, r24	; 15
 506:	c5 9a       	sbi	0x18, 5	; 24
 508:	8e b1       	in	r24, 0x0e	; 14
 50a:	80 7f       	andi	r24, 0xF0	; 240
 50c:	8e b9       	out	0x0e, r24	; 14
 50e:	68 9a       	sbi	0x0d, 0	; 13
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	8a 95       	dec	r24
 514:	f1 f7       	brne	.-4      	; 0x512 <i2c_send_data+0xe>
 516:	00 00       	nop
 518:	68 9a       	sbi	0x0d, 0	; 13
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	8a 95       	dec	r24
 51e:	f1 f7       	brne	.-4      	; 0x51c <i2c_send_data+0x18>
 520:	00 00       	nop
 522:	76 9b       	sbis	0x0e, 6	; 14
 524:	f4 cf       	rjmp	.-24     	; 0x50e <i2c_send_data+0xa>
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	8f b9       	out	0x0f, r24	; 15
 52a:	08 95       	ret

0000052c <i2c_send_reg_add>:
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	d8 2f       	mov	r29, r24
 532:	c6 2f       	mov	r28, r22
 534:	a9 df       	rcall	.-174    	; 0x488 <i2c_send_start>
 536:	8d 2f       	mov	r24, r29
 538:	88 0f       	add	r24, r24
 53a:	e4 df       	rcall	.-56     	; 0x504 <i2c_send_data>
 53c:	d2 df       	rcall	.-92     	; 0x4e2 <i2c_get_ack>
 53e:	8c 2f       	mov	r24, r28
 540:	e1 df       	rcall	.-62     	; 0x504 <i2c_send_data>
 542:	cf df       	rcall	.-98     	; 0x4e2 <i2c_get_ack>
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <i2c_single_write>:
 54a:	cf 93       	push	r28
 54c:	c4 2f       	mov	r28, r20
 54e:	ee df       	rcall	.-36     	; 0x52c <i2c_send_reg_add>
 550:	8c 2f       	mov	r24, r28
 552:	d8 df       	rcall	.-80     	; 0x504 <i2c_send_data>
 554:	c6 df       	rcall	.-116    	; 0x4e2 <i2c_get_ack>
 556:	ac df       	rcall	.-168    	; 0x4b0 <i2c_send_stop>
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <i2c_burst_write>:
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	d4 2f       	mov	r29, r20
 562:	c2 2f       	mov	r28, r18
 564:	e3 df       	rcall	.-58     	; 0x52c <i2c_send_reg_add>
 566:	8d 2f       	mov	r24, r29
 568:	cd df       	rcall	.-102    	; 0x504 <i2c_send_data>
 56a:	bb df       	rcall	.-138    	; 0x4e2 <i2c_get_ack>
 56c:	8c 2f       	mov	r24, r28
 56e:	ca df       	rcall	.-108    	; 0x504 <i2c_send_data>
 570:	b8 df       	rcall	.-144    	; 0x4e2 <i2c_get_ack>
 572:	9e df       	rcall	.-196    	; 0x4b0 <i2c_send_stop>
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <i2c_get_data>:
 57a:	bd 98       	cbi	0x17, 5	; 23
 57c:	8e b1       	in	r24, 0x0e	; 14
 57e:	80 7f       	andi	r24, 0xF0	; 240
 580:	8e b9       	out	0x0e, r24	; 14
 582:	68 9a       	sbi	0x0d, 0	; 13
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	8a 95       	dec	r24
 588:	f1 f7       	brne	.-4      	; 0x586 <i2c_get_data+0xc>
 58a:	00 00       	nop
 58c:	68 9a       	sbi	0x0d, 0	; 13
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	8a 95       	dec	r24
 592:	f1 f7       	brne	.-4      	; 0x590 <i2c_get_data+0x16>
 594:	00 00       	nop
 596:	76 9b       	sbis	0x0e, 6	; 14
 598:	f4 cf       	rjmp	.-24     	; 0x582 <i2c_get_data+0x8>
 59a:	8f b1       	in	r24, 0x0f	; 15
 59c:	9f ef       	ldi	r25, 0xFF	; 255
 59e:	9f b9       	out	0x0f, r25	; 15
 5a0:	bd 9a       	sbi	0x17, 5	; 23
 5a2:	08 95       	ret

000005a4 <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 5aa:	c0 df       	rcall	.-128    	; 0x52c <i2c_send_reg_add>
	i2c_send_start();
 5ac:	6d df       	rcall	.-294    	; 0x488 <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 5ae:	8c 2f       	mov	r24, r28
 5b0:	88 0f       	add	r24, r24
 5b2:	81 60       	ori	r24, 0x01	; 1
 5b4:	a7 df       	rcall	.-178    	; 0x504 <i2c_send_data>
	i2c_get_ack();
 5b6:	95 df       	rcall	.-214    	; 0x4e2 <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 5b8:	e0 df       	rcall	.-64     	; 0x57a <i2c_get_data>
 5ba:	c8 2f       	mov	r28, r24
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	dc 2f       	mov	r29, r28
 5c0:	cc 27       	eor	r28, r28
	i2c_send_ack();
 5c2:	7e df       	rcall	.-260    	; 0x4c0 <i2c_send_ack>
	ret |= i2c_get_data();
 5c4:	da df       	rcall	.-76     	; 0x57a <i2c_get_data>
 5c6:	c8 2b       	or	r28, r24
	i2c_send_nack();
 5c8:	84 df       	rcall	.-248    	; 0x4d2 <i2c_send_nack>
	i2c_send_stop();
 5ca:	72 df       	rcall	.-284    	; 0x4b0 <i2c_send_stop>
	return(ret);
}
 5cc:	ce 01       	movw	r24, r28
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 5d8:	16 bc       	out	0x26, r1	; 38
	
	i2c_init();
 5da:	49 df       	rcall	.-366    	; 0x46e <i2c_init>
	uart_init();
 5dc:	04 d0       	rcall	.+8      	; 0x5e6 <uart_init>
	gauge_init();
 5de:	68 de       	rcall	.-816    	; 0x2b0 <gauge_init>
	buttons_init();
 5e0:	f1 de       	rcall	.-542    	; 0x3c4 <buttons_init>
	acc_init();
 5e2:	57 dd       	rcall	.-1362   	; 0x92 <acc_init>
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <main+0x10>

000005e6 <uart_init>:

void uart_set_pos(int16_t xpos, int16_t ypos){
	tx_tele[X_L] = (xpos&0xFF);			//x_pos_LSB
	tx_tele[X_H] = (xpos>>8);			//x_pos_MSB
	tx_tele[Y_L] = (ypos&0xFF);			//y_pos_LSB
	tx_tele[Y_H] = (ypos>>8);			//y_pos_MSB
 5e6:	12 b8       	out	0x02, r1	; 2
 5e8:	83 e3       	ldi	r24, 0x33	; 51
 5ea:	89 b9       	out	0x09, r24	; 9
 5ec:	88 e0       	ldi	r24, 0x08	; 8
 5ee:	8a b9       	out	0x0a, r24	; 10
 5f0:	86 e0       	ldi	r24, 0x06	; 6
 5f2:	83 b9       	out	0x03, r24	; 3
 5f4:	1f bc       	out	0x2f, r1	; 47
 5f6:	8a e0       	ldi	r24, 0x0A	; 10
 5f8:	8e bd       	out	0x2e, r24	; 46
 5fa:	89 b7       	in	r24, 0x39	; 57
 5fc:	80 64       	ori	r24, 0x40	; 64
 5fe:	89 bf       	out	0x39, r24	; 57
 600:	87 e2       	ldi	r24, 0x27	; 39
 602:	8b bd       	out	0x2b, r24	; 43
 604:	80 e1       	ldi	r24, 0x10	; 16
 606:	8a bd       	out	0x2a, r24	; 42
 608:	8f b7       	in	r24, 0x3f	; 63
 60a:	80 68       	ori	r24, 0x80	; 128
 60c:	8f bf       	out	0x3f, r24	; 63
 60e:	08 95       	ret

00000610 <uart_set_button>:
}

void uart_set_button(uint8_t button){
	tx_tele[BUTTONS] = (1<<button);		//set one button as pressed
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <uart_set_button+0xa>
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	8a 95       	dec	r24
 61c:	e2 f7       	brpl	.-8      	; 0x616 <uart_set_button+0x6>
 61e:	20 93 97 00 	sts	0x0097, r18	; 0x800097 <tx_tele+0x4>
 622:	08 95       	ret

00000624 <uart_putc>:
}

void uart_putc(uint8_t c) {
 624:	38 2f       	mov	r19, r24
	uint8_t tmp_head = (tx_head + 1) % BUFFER_SIZE;
 626:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <tx_head>
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	64 e1       	ldi	r22, 0x14	; 20
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	7a d0       	rcall	.+244    	; 0x728 <__divmodhi4>
 634:	28 2f       	mov	r18, r24
	while (tmp_head == tx_tail);
 636:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <tx_tail>
 63a:	29 17       	cp	r18, r25
 63c:	e1 f3       	breq	.-8      	; 0x636 <uart_putc+0x12>
	tx_buffer[tx_head] = c;
 63e:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <tx_head>
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	e1 58       	subi	r30, 0x81	; 129
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	30 83       	st	Z, r19
	tx_head = tmp_head;
 64a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <tx_head>
	UCSRB |= (1<<UDRIE);
 64e:	55 9a       	sbi	0x0a, 5	; 10
 650:	08 95       	ret

00000652 <__vector_4>:
}

ISR(TIMER1_COMPA_vect){
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	uart_putc(tx_tele[X_L]);
 678:	c3 e9       	ldi	r28, 0x93	; 147
 67a:	d0 e0       	ldi	r29, 0x00	; 0
 67c:	88 81       	ld	r24, Y
 67e:	d2 df       	rcall	.-92     	; 0x624 <uart_putc>
	uart_putc(tx_tele[X_H]);
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	d0 df       	rcall	.-96     	; 0x624 <uart_putc>
	uart_putc(tx_tele[Y_L]);
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	ce df       	rcall	.-100    	; 0x624 <uart_putc>
	uart_putc(tx_tele[Y_H]);
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	cc df       	rcall	.-104    	; 0x624 <uart_putc>
	uart_putc(tx_tele[BUTTONS]);
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
 68e:	ca df       	rcall	.-108    	; 0x624 <uart_putc>
	
	tx_tele[0] = 0x00;				//reset telegram
 690:	18 82       	st	Y, r1
	tx_tele[1] = 0x00;
 692:	19 82       	std	Y+1, r1	; 0x01
	tx_tele[2] = 0x00;
 694:	1a 82       	std	Y+2, r1	; 0x02
	tx_tele[3] = 0x00;
 696:	1b 82       	std	Y+3, r1	; 0x03
	tx_tele[4] = 0x00;
 698:	1c 82       	std	Y+4, r1	; 0x04
}
 69a:	ff 91       	pop	r31
 69c:	ef 91       	pop	r30
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <__vector_8>:

ISR(USART_UDRE_vect){
 6c0:	1f 92       	push	r1
 6c2:	0f 92       	push	r0
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	0f 92       	push	r0
 6c8:	11 24       	eor	r1, r1
 6ca:	5f 93       	push	r21
 6cc:	6f 93       	push	r22
 6ce:	7f 93       	push	r23
 6d0:	8f 93       	push	r24
 6d2:	9f 93       	push	r25
 6d4:	af 93       	push	r26
 6d6:	bf 93       	push	r27
 6d8:	ef 93       	push	r30
 6da:	ff 93       	push	r31
	uint8_t tmp_tail = 0;
	if(tx_tail != tx_head){
 6dc:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <tx_tail>
 6e0:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <tx_head>
 6e4:	98 17       	cp	r25, r24
 6e6:	89 f0       	breq	.+34     	; 0x70a <__vector_8+0x4a>
		tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 6e8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <tx_tail>
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	64 e1       	ldi	r22, 0x14	; 20
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	19 d0       	rcall	.+50     	; 0x728 <__divmodhi4>
		UDR = tx_buffer[tx_tail];
 6f6:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <tx_tail>
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	e1 58       	subi	r30, 0x81	; 129
 6fe:	ff 4f       	sbci	r31, 0xFF	; 255
 700:	90 81       	ld	r25, Z
 702:	9c b9       	out	0x0c, r25	; 12
		tx_tail = tmp_tail;
 704:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <tx_tail>
 708:	01 c0       	rjmp	.+2      	; 0x70c <__vector_8+0x4c>
	}else{
		UCSRB &= ~(1<<UDRIE);
 70a:	55 98       	cbi	0x0a, 5	; 10
	}
 70c:	ff 91       	pop	r31
 70e:	ef 91       	pop	r30
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	7f 91       	pop	r23
 71a:	6f 91       	pop	r22
 71c:	5f 91       	pop	r21
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <__divmodhi4>:
 728:	97 fb       	bst	r25, 7
 72a:	07 2e       	mov	r0, r23
 72c:	16 f4       	brtc	.+4      	; 0x732 <__divmodhi4+0xa>
 72e:	00 94       	com	r0
 730:	06 d0       	rcall	.+12     	; 0x73e <__divmodhi4_neg1>
 732:	77 fd       	sbrc	r23, 7
 734:	08 d0       	rcall	.+16     	; 0x746 <__divmodhi4_neg2>
 736:	0b d0       	rcall	.+22     	; 0x74e <__udivmodhi4>
 738:	07 fc       	sbrc	r0, 7
 73a:	05 d0       	rcall	.+10     	; 0x746 <__divmodhi4_neg2>
 73c:	3e f4       	brtc	.+14     	; 0x74c <__divmodhi4_exit>

0000073e <__divmodhi4_neg1>:
 73e:	90 95       	com	r25
 740:	81 95       	neg	r24
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__divmodhi4_neg2>:
 746:	70 95       	com	r23
 748:	61 95       	neg	r22
 74a:	7f 4f       	sbci	r23, 0xFF	; 255

0000074c <__divmodhi4_exit>:
 74c:	08 95       	ret

0000074e <__udivmodhi4>:
 74e:	aa 1b       	sub	r26, r26
 750:	bb 1b       	sub	r27, r27
 752:	51 e1       	ldi	r21, 0x11	; 17
 754:	07 c0       	rjmp	.+14     	; 0x764 <__udivmodhi4_ep>

00000756 <__udivmodhi4_loop>:
 756:	aa 1f       	adc	r26, r26
 758:	bb 1f       	adc	r27, r27
 75a:	a6 17       	cp	r26, r22
 75c:	b7 07       	cpc	r27, r23
 75e:	10 f0       	brcs	.+4      	; 0x764 <__udivmodhi4_ep>
 760:	a6 1b       	sub	r26, r22
 762:	b7 0b       	sbc	r27, r23

00000764 <__udivmodhi4_ep>:
 764:	88 1f       	adc	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	5a 95       	dec	r21
 76a:	a9 f7       	brne	.-22     	; 0x756 <__udivmodhi4_loop>
 76c:	80 95       	com	r24
 76e:	90 95       	com	r25
 770:	bc 01       	movw	r22, r24
 772:	cd 01       	movw	r24, r26
 774:	08 95       	ret

00000776 <_exit>:
 776:	f8 94       	cli

00000778 <__stop_program>:
 778:	ff cf       	rjmp	.-2      	; 0x778 <__stop_program>
