
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000132  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000955  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00000c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d3  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000285  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000021a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	6c c0       	rjmp	.+216    	; 0xea <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	33 c0       	rjmp	.+102    	; 0x82 <__vector_13>
  1c:	42 c0       	rjmp	.+132    	; 0xa2 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e3       	ldi	r30, 0x32	; 50
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	0c d0       	rcall	.+24     	; 0x72 <main>
  5a:	69 c0       	rjmp	.+210    	; 0x12e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_2>:
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <main>:
#include "timer.h"


int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
  72:	80 e8       	ldi	r24, 0x80	; 128
  74:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
  76:	16 bc       	out	0x26, r1	; 38
	i2c_send_start();
	usi_send(0x11);
	i2c_get_ack();
	i2c_send_stop();*/
	
	init_uart();
  78:	29 d0       	rcall	.+82     	; 0xcc <init_uart>
	uart_transmit(0x24, 0x42);
  7a:	62 e4       	ldi	r22, 0x42	; 66
  7c:	84 e2       	ldi	r24, 0x24	; 36
  7e:	2e d0       	rcall	.+92     	; 0xdc <uart_transmit>
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0xe>

00000082 <__vector_13>:
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	88 7f       	andi	r24, 0xF8	; 248
  92:	83 bf       	out	0x33, r24	; 51
  94:	12 be       	out	0x32, r1	; 50
  96:	8f 91       	pop	r24
  98:	0f 90       	pop	r0
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	0f 90       	pop	r0
  9e:	1f 90       	pop	r1
  a0:	18 95       	reti

000000a2 <__vector_14>:
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	8c b7       	in	r24, 0x3c	; 60
  b2:	86 5f       	subi	r24, 0xF6	; 246
  b4:	8c bf       	out	0x3c, r24	; 60
  b6:	98 b3       	in	r25, 0x18	; 24
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	89 27       	eor	r24, r25
  bc:	88 bb       	out	0x18, r24	; 24
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <init_uart>:

volatile static uint8_t tx_buffer[2];
volatile static uint8_t bytes = 2;

void init_uart(void) {
  UBRRH = (uint8_t)(MYUBBR >> 8);								//set baud rate
  cc:	12 b8       	out	0x02, r1	; 2
  UBRRL = (uint8_t)(MYUBBR);
  ce:	83 e3       	ldi	r24, 0x33	; 51
  d0:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1 << TXEN);											//enable transmit
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<UPM1) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0);		//enable even parity, set 8-bit character, set 1 stop bit
  d6:	86 e2       	ldi	r24, 0x26	; 38
  d8:	83 b9       	out	0x03, r24	; 3
  da:	08 95       	ret

000000dc <uart_transmit>:
}

void uart_transmit(uint8_t command, uint8_t data) {
  while (!(UCSRA & (1<<UDRE)));
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <uart_transmit>
	UDR = command;
  e0:	8c b9       	out	0x0c, r24	; 12
  
  while (!(UCSRA & (1<<UDRE)));
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <__stack+0x3>
	UDR = data; 
  e6:	6c b9       	out	0x0c, r22	; 12
  e8:	08 95       	ret

000000ea <__vector_8>:
  bytes = 2;
  //UCSRB |= (1<<UDRIE);	*/						// enable uart data interrupt (send data)
}

//send a command out of the buffer
ISR(USART_UDRE_vect) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	if(bytes > 0){
  fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  fe:	88 23       	and	r24, r24
 100:	69 f0       	breq	.+26     	; 0x11c <__vector_8+0x32>
		UDR = tx_buffer[bytes];					//write byte to data register
 102:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ee 59       	subi	r30, 0x9E	; 158
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	8c b9       	out	0x0c, r24	; 12
		bytes--;								//lower bytes by one
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 114:	81 50       	subi	r24, 0x01	; 1
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__vector_8+0x34>
	}else{
		UCSRB &= ~(1<<UDRIE);					//disable interrupt
 11c:	55 98       	cbi	0x0a, 5	; 10
	}
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
