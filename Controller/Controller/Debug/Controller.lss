
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000508  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147e  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e9  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb0  00000000  00000000  000025c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  0000350c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a51  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000044cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	5d c0       	rjmp	.+186    	; 0xbe <__vector_1>
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	41 c0       	rjmp	.+130    	; 0x8e <__vector_5>
   c:	e8 c0       	rjmp	.+464    	; 0x1de <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	4a c2       	rjmp	.+1172   	; 0x4a6 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	0d c1       	rjmp	.+538    	; 0x232 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 37       	cpi	r26, 0x75	; 117
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	fb d1       	rcall	.+1014   	; 0x43a <main>
  44:	5f c2       	rjmp	.+1214   	; 0x504 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <acc_init>:
uint16_t x_pos[2], y_pos[2];
uint16_t x_noise = 0, y_noise = 0;
uint8_t ovf_counter = 0;

void acc_init(){
	i2c_init();
  48:	45 d1       	rcall	.+650    	; 0x2d4 <i2c_init>
	i2c_single_write(ACC_ADD, PWR_MAN, 0x00);		//turn off sleep mode
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	6b e6       	ldi	r22, 0x6B	; 107
  4e:	88 e6       	ldi	r24, 0x68	; 104
  50:	af d1       	rcall	.+862    	; 0x3b0 <i2c_single_write>
	i2c_single_write(ACC_ADD, ACC_CON, 0x00);		//set range on +/- 2g
  52:	40 e0       	ldi	r20, 0x00	; 0
  54:	6c e1       	ldi	r22, 0x1C	; 28
  56:	88 e6       	ldi	r24, 0x68	; 104
  58:	ab d1       	rcall	.+854    	; 0x3b0 <i2c_single_write>
	i2c_single_write(ACC_ADD, SMPRT_DIV, 0x08);		//1kHz sample rate and interrupt rate
  5a:	48 e0       	ldi	r20, 0x08	; 8
  5c:	69 e1       	ldi	r22, 0x19	; 25
  5e:	88 e6       	ldi	r24, 0x68	; 104
  60:	a7 d1       	rcall	.+846    	; 0x3b0 <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_CON, 0x10);		//clear interrupt on any read
  62:	40 e1       	ldi	r20, 0x10	; 16
  64:	67 e3       	ldi	r22, 0x37	; 55
  66:	88 e6       	ldi	r24, 0x68	; 104
  68:	a3 d1       	rcall	.+838    	; 0x3b0 <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_EN, 0x01);		//enable interrupt on data ready
  6a:	41 e0       	ldi	r20, 0x01	; 1
  6c:	68 e3       	ldi	r22, 0x38	; 56
  6e:	88 e6       	ldi	r24, 0x68	; 104
  70:	9f d1       	rcall	.+830    	; 0x3b0 <i2c_single_write>

	uart_init();
  72:	ea d1       	rcall	.+980    	; 0x448 <uart_init>
/*	
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(0<<CS10);		//no clock, clear timer on compare
	TIMSK |= (1<<TOIE1);							//enable overflow interrupt
*/	
	MCUCR |= (1 << ISC00);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	81 60       	ori	r24, 0x01	; 1
  78:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);							//The rising edge of INT0 generates an interrupt request
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);							//enable external interrupt 0 in general interrupt mask register
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);							//enable interrupts I in global status register
  86:	8f b7       	in	r24, 0x3f	; 63
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8f bf       	out	0x3f, r24	; 63
  8c:	08 95       	ret

0000008e <__vector_5>:
	y_pos[0] = y_pos[1];
*/
	test();
}

ISR(TIMER1_OVF_vect){
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
	ovf_counter++;
  9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <test>:

void test(){
	uint16_t temp_16;
	uint8_t temp_8[2];
	
	temp_16 = i2c_burst_read(ACC_ADD, X_MSB);
  b0:	6b e3       	ldi	r22, 0x3B	; 59
  b2:	88 e6       	ldi	r24, 0x68	; 104
  b4:	aa d1       	rcall	.+852    	; 0x40a <i2c_burst_read>
	temp_8[1] = (temp_16>>8);
	temp_8[0] = (temp_16&0xFF);
//	uart_put_com(temp_8[1], temp_8[0]);

	temp_16 = i2c_burst_read(ACC_ADD, Y_MSB);
  b6:	6d e3       	ldi	r22, 0x3D	; 61
  b8:	88 e6       	ldi	r24, 0x68	; 104
  ba:	a7 d1       	rcall	.+846    	; 0x40a <i2c_burst_read>
  bc:	08 95       	ret

000000be <__vector_1>:
	y_noise = (y_noise>>10);

}
*/

ISR(INT0_vect){		//External interrupt0 service routine
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	y_vel[0] = y_vel[1];
	
	x_pos[0] = x_pos[1];
	y_pos[0] = y_pos[1];
*/
	test();
  e0:	e7 df       	rcall	.-50     	; 0xb0 <test>
}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	7f 91       	pop	r23
  f0:	6f 91       	pop	r22
  f2:	5f 91       	pop	r21
  f4:	4f 91       	pop	r20
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <gauge_init>:
#include "i2c.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_init();
 104:	e7 d0       	rcall	.+462    	; 0x2d4 <i2c_init>
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	4f ef       	ldi	r20, 0xFF	; 255
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	84 e6       	ldi	r24, 0x64	; 100
 10e:	59 d1       	rcall	.+690    	; 0x3c2 <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 110:	2c e1       	ldi	r18, 0x1C	; 28
 112:	4c e7       	ldi	r20, 0x7C	; 124
 114:	66 e0       	ldi	r22, 0x06	; 6
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	54 d1       	rcall	.+680    	; 0x3c2 <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 11a:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 11c:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 11e:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 120:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 122:	89 b7       	in	r24, 0x39	; 57
 124:	82 60       	ori	r24, 0x02	; 2
 126:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 12c:	85 b7       	in	r24, 0x35	; 53
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 132:	8b b7       	in	r24, 0x3b	; 59
 134:	80 68       	ori	r24, 0x80	; 128
 136:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 138:	8f b7       	in	r24, 0x3f	; 63
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8f bf       	out	0x3f, r24	; 63
 13e:	08 95       	ret

00000140 <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 140:	d6 d0       	rcall	.+428    	; 0x2ee <i2c_send_start>
	i2c_send_data(ARA<<1);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	12 d1       	rcall	.+548    	; 0x36a <i2c_send_data>
	i2c_get_ack();						
 146:	00 d1       	rcall	.+512    	; 0x348 <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 148:	4b d1       	rcall	.+662    	; 0x3e0 <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 14a:	f6 d0       	rcall	.+492    	; 0x338 <i2c_send_nack>
	i2c_send_stop();
 14c:	e4 d0       	rcall	.+456    	; 0x316 <i2c_send_stop>
 14e:	08 95       	ret

00000150 <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 172:	03 b6       	in	r0, 0x33	; 51
 174:	02 fe       	sbrs	r0, 2
 176:	13 c0       	rjmp	.+38     	; 0x19e <__vector_2+0x4e>
 178:	03 b6       	in	r0, 0x33	; 51
 17a:	00 fe       	sbrs	r0, 0
 17c:	10 c0       	rjmp	.+32     	; 0x19e <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 17e:	83 b7       	in	r24, 0x33	; 51
 180:	8a 7f       	andi	r24, 0xFA	; 250
 182:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 184:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	84 e6       	ldi	r24, 0x64	; 100
 18e:	19 d1       	rcall	.+562    	; 0x3c2 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 190:	2c e1       	ldi	r18, 0x1C	; 28
 192:	4c e7       	ldi	r20, 0x7C	; 124
 194:	66 e0       	ldi	r22, 0x06	; 6
 196:	84 e6       	ldi	r24, 0x64	; 100
 198:	14 d1       	rcall	.+552    	; 0x3c2 <i2c_burst_write>
		gauge_send_arp();	
 19a:	d2 df       	rcall	.-92     	; 0x140 <gauge_send_arp>
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 19e:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 1a0:	83 b7       	in	r24, 0x33	; 51
 1a2:	85 60       	ori	r24, 0x05	; 5
 1a4:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	66 e0       	ldi	r22, 0x06	; 6
 1ac:	84 e6       	ldi	r24, 0x64	; 100
 1ae:	09 d1       	rcall	.+530    	; 0x3c2 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 1b0:	2d ef       	ldi	r18, 0xFD	; 253
 1b2:	4d e7       	ldi	r20, 0x7D	; 125
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	84 e6       	ldi	r24, 0x64	; 100
 1b8:	04 d1       	rcall	.+520    	; 0x3c2 <i2c_burst_write>
		gauge_send_arp();
 1ba:	c2 df       	rcall	.-124    	; 0x140 <gauge_send_arp>
	}
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_6>:

ISR(TIMER0_OVF_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
	if(count == 17){
 1ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count>
 1f0:	81 31       	cpi	r24, 0x11	; 17
 1f2:	39 f4       	brne	.+14     	; 0x202 <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 1f4:	98 b3       	in	r25, 0x18	; 24
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	89 27       	eor	r24, r25
 1fa:	88 bb       	out	0x18, r24	; 24
		count = 0;
 1fc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count>
 200:	03 c0       	rjmp	.+6      	; 0x208 <__vector_6+0x2a>
	}else{
		count++;
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count>
	}
}
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <buttons_init>:
#include "i2c.h"

volatile uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 216:	87 b3       	in	r24, 0x17	; 23
 218:	80 7f       	andi	r24, 0xF0	; 240
 21a:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 21c:	80 b5       	in	r24, 0x20	; 32
 21e:	8f 60       	ori	r24, 0x0F	; 15
 220:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 222:	8b b7       	in	r24, 0x3b	; 59
 224:	80 62       	ori	r24, 0x20	; 32
 226:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 228:	8f b7       	in	r24, 0x3f	; 63
 22a:	80 68       	ori	r24, 0x80	; 128
 22c:	8f bf       	out	0x3f, r24	; 63
	
	uart_init();
 22e:	0c d1       	rcall	.+536    	; 0x448 <uart_init>
 230:	08 95       	ret

00000232 <__vector_11>:
}

ISR(PCINT0_vect){		
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 258:	d6 b3       	in	r29, 0x16	; 22
 25a:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 25c:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <old_buttons>
 260:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 262:	c0 ff       	sbrs	r28, 0
 264:	07 c0       	rjmp	.+14     	; 0x274 <__vector_11+0x42>
 266:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 26a:	80 ff       	sbrs	r24, 0
 26c:	03 c0       	rjmp	.+6      	; 0x274 <__vector_11+0x42>
		uart_put_com(0xBB, 0xBB);
 26e:	6b eb       	ldi	r22, 0xBB	; 187
 270:	8b eb       	ldi	r24, 0xBB	; 187
 272:	12 d1       	rcall	.+548    	; 0x498 <uart_put_com>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 274:	c1 ff       	sbrs	r28, 1
 276:	07 c0       	rjmp	.+14     	; 0x286 <__vector_11+0x54>
 278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 27c:	81 ff       	sbrs	r24, 1
 27e:	03 c0       	rjmp	.+6      	; 0x286 <__vector_11+0x54>
		uart_put_com(0x44, 0x44);
 280:	64 e4       	ldi	r22, 0x44	; 68
 282:	84 e4       	ldi	r24, 0x44	; 68
 284:	09 d1       	rcall	.+530    	; 0x498 <uart_put_com>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 286:	c2 ff       	sbrs	r28, 2
 288:	07 c0       	rjmp	.+14     	; 0x298 <__vector_11+0x66>
 28a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 28e:	82 ff       	sbrs	r24, 2
 290:	03 c0       	rjmp	.+6      	; 0x298 <__vector_11+0x66>
		uart_put_com(0x11, 0x11);
 292:	61 e1       	ldi	r22, 0x11	; 17
 294:	81 e1       	ldi	r24, 0x11	; 17
 296:	00 d1       	rcall	.+512    	; 0x498 <uart_put_com>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 298:	c3 ff       	sbrs	r28, 3
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <__vector_11+0x78>
 29c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 2a0:	83 ff       	sbrs	r24, 3
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <__vector_11+0x78>
		uart_put_com(0x77, 0x77);
 2a4:	67 e7       	ldi	r22, 0x77	; 119
 2a6:	87 e7       	ldi	r24, 0x77	; 119
 2a8:	f7 d0       	rcall	.+494    	; 0x498 <uart_put_com>
	}
	old_buttons = new_buttons;
 2aa:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <old_buttons>
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	8f b9       	out	0x0f, r24	; 15
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	80 6a       	ori	r24, 0xA0	; 160
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	87 b3       	in	r24, 0x17	; 23
 2e0:	80 6a       	ori	r24, 0xA0	; 160
 2e2:	87 bb       	out	0x17, r24	; 23
 2e4:	8a e2       	ldi	r24, 0x2A	; 42
 2e6:	8d b9       	out	0x0d, r24	; 13
 2e8:	80 ef       	ldi	r24, 0xF0	; 240
 2ea:	8e b9       	out	0x0e, r24	; 14
 2ec:	08 95       	ret

000002ee <i2c_send_start>:
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	80 6a       	ori	r24, 0xA0	; 160
 2f2:	88 bb       	out	0x18, r24	; 24
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	98 b3       	in	r25, 0x18	; 24
 2f8:	88 b3       	in	r24, 0x18	; 24
 2fa:	85 fb       	bst	r24, 5
 2fc:	88 27       	eor	r24, r24
 2fe:	80 f9       	bld	r24, 0
 300:	82 13       	cpse	r24, r18
 302:	f9 cf       	rjmp	.-14     	; 0x2f6 <i2c_send_start+0x8>
 304:	99 23       	and	r25, r25
 306:	bc f7       	brge	.-18     	; 0x2f6 <i2c_send_start+0x8>
 308:	c5 98       	cbi	0x18, 5	; 24
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <i2c_send_start+0x1e>
 310:	00 00       	nop
 312:	c7 98       	cbi	0x18, 7	; 24
 314:	08 95       	ret

00000316 <i2c_send_stop>:
 316:	c5 98       	cbi	0x18, 5	; 24
 318:	c7 9a       	sbi	0x18, 7	; 24
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	8a 95       	dec	r24
 31e:	f1 f7       	brne	.-4      	; 0x31c <i2c_send_stop+0x6>
 320:	00 00       	nop
 322:	c5 9a       	sbi	0x18, 5	; 24
 324:	08 95       	ret

00000326 <i2c_send_ack>:
 326:	c5 98       	cbi	0x18, 5	; 24
 328:	c7 9a       	sbi	0x18, 7	; 24
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <i2c_send_ack+0x6>
 330:	00 00       	nop
 332:	c7 98       	cbi	0x18, 7	; 24
 334:	c5 9a       	sbi	0x18, 5	; 24
 336:	08 95       	ret

00000338 <i2c_send_nack>:
 338:	c5 9a       	sbi	0x18, 5	; 24
 33a:	c7 9a       	sbi	0x18, 7	; 24
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	8a 95       	dec	r24
 340:	f1 f7       	brne	.-4      	; 0x33e <i2c_send_nack+0x6>
 342:	00 00       	nop
 344:	c7 98       	cbi	0x18, 7	; 24
 346:	08 95       	ret

00000348 <i2c_get_ack>:
 348:	bd 98       	cbi	0x17, 5	; 23
 34a:	68 9a       	sbi	0x0d, 0	; 13
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <i2c_get_ack+0x6>
 352:	00 00       	nop
 354:	68 9a       	sbi	0x0d, 0	; 13
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <i2c_get_ack+0x10>
 35c:	00 00       	nop
 35e:	8f b1       	in	r24, 0x0f	; 15
 360:	9f ef       	ldi	r25, 0xFF	; 255
 362:	9f b9       	out	0x0f, r25	; 15
 364:	bd 9a       	sbi	0x17, 5	; 23
 366:	81 70       	andi	r24, 0x01	; 1
 368:	08 95       	ret

0000036a <i2c_send_data>:
 36a:	8f b9       	out	0x0f, r24	; 15
 36c:	c5 9a       	sbi	0x18, 5	; 24
 36e:	8e b1       	in	r24, 0x0e	; 14
 370:	80 7f       	andi	r24, 0xF0	; 240
 372:	8e b9       	out	0x0e, r24	; 14
 374:	68 9a       	sbi	0x0d, 0	; 13
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <i2c_send_data+0xe>
 37c:	00 00       	nop
 37e:	68 9a       	sbi	0x0d, 0	; 13
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	8a 95       	dec	r24
 384:	f1 f7       	brne	.-4      	; 0x382 <i2c_send_data+0x18>
 386:	00 00       	nop
 388:	76 9b       	sbis	0x0e, 6	; 14
 38a:	f4 cf       	rjmp	.-24     	; 0x374 <i2c_send_data+0xa>
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	8f b9       	out	0x0f, r24	; 15
 390:	08 95       	ret

00000392 <i2c_send_reg_add>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	d8 2f       	mov	r29, r24
 398:	c6 2f       	mov	r28, r22
 39a:	a9 df       	rcall	.-174    	; 0x2ee <i2c_send_start>
 39c:	8d 2f       	mov	r24, r29
 39e:	88 0f       	add	r24, r24
 3a0:	e4 df       	rcall	.-56     	; 0x36a <i2c_send_data>
 3a2:	d2 df       	rcall	.-92     	; 0x348 <i2c_get_ack>
 3a4:	8c 2f       	mov	r24, r28
 3a6:	e1 df       	rcall	.-62     	; 0x36a <i2c_send_data>
 3a8:	cf df       	rcall	.-98     	; 0x348 <i2c_get_ack>
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <i2c_single_write>:
 3b0:	cf 93       	push	r28
 3b2:	c4 2f       	mov	r28, r20
 3b4:	ee df       	rcall	.-36     	; 0x392 <i2c_send_reg_add>
 3b6:	8c 2f       	mov	r24, r28
 3b8:	d8 df       	rcall	.-80     	; 0x36a <i2c_send_data>
 3ba:	c6 df       	rcall	.-116    	; 0x348 <i2c_get_ack>
 3bc:	ac df       	rcall	.-168    	; 0x316 <i2c_send_stop>
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <i2c_burst_write>:
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	d4 2f       	mov	r29, r20
 3c8:	c2 2f       	mov	r28, r18
 3ca:	e3 df       	rcall	.-58     	; 0x392 <i2c_send_reg_add>
 3cc:	8d 2f       	mov	r24, r29
 3ce:	cd df       	rcall	.-102    	; 0x36a <i2c_send_data>
 3d0:	bb df       	rcall	.-138    	; 0x348 <i2c_get_ack>
 3d2:	8c 2f       	mov	r24, r28
 3d4:	ca df       	rcall	.-108    	; 0x36a <i2c_send_data>
 3d6:	b8 df       	rcall	.-144    	; 0x348 <i2c_get_ack>
 3d8:	9e df       	rcall	.-196    	; 0x316 <i2c_send_stop>
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <i2c_get_data>:
 3e0:	bd 98       	cbi	0x17, 5	; 23
 3e2:	8e b1       	in	r24, 0x0e	; 14
 3e4:	80 7f       	andi	r24, 0xF0	; 240
 3e6:	8e b9       	out	0x0e, r24	; 14
 3e8:	68 9a       	sbi	0x0d, 0	; 13
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	8a 95       	dec	r24
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <i2c_get_data+0xc>
 3f0:	00 00       	nop
 3f2:	68 9a       	sbi	0x0d, 0	; 13
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	8a 95       	dec	r24
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <i2c_get_data+0x16>
 3fa:	00 00       	nop
 3fc:	76 9b       	sbis	0x0e, 6	; 14
 3fe:	f4 cf       	rjmp	.-24     	; 0x3e8 <i2c_get_data+0x8>
 400:	8f b1       	in	r24, 0x0f	; 15
 402:	9f ef       	ldi	r25, 0xFF	; 255
 404:	9f b9       	out	0x0f, r25	; 15
 406:	bd 9a       	sbi	0x17, 5	; 23
 408:	08 95       	ret

0000040a <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 410:	c0 df       	rcall	.-128    	; 0x392 <i2c_send_reg_add>
	i2c_send_start();
 412:	6d df       	rcall	.-294    	; 0x2ee <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 414:	8c 2f       	mov	r24, r28
 416:	88 0f       	add	r24, r24
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	a7 df       	rcall	.-178    	; 0x36a <i2c_send_data>
	i2c_get_ack();
 41c:	95 df       	rcall	.-214    	; 0x348 <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 41e:	e0 df       	rcall	.-64     	; 0x3e0 <i2c_get_data>
 420:	c8 2f       	mov	r28, r24
 422:	d0 e0       	ldi	r29, 0x00	; 0
 424:	dc 2f       	mov	r29, r28
 426:	cc 27       	eor	r28, r28
	i2c_send_ack();
 428:	7e df       	rcall	.-260    	; 0x326 <i2c_send_ack>
	ret |= i2c_get_data();
 42a:	da df       	rcall	.-76     	; 0x3e0 <i2c_get_data>
 42c:	c8 2b       	or	r28, r24
	i2c_send_nack();
 42e:	84 df       	rcall	.-248    	; 0x338 <i2c_send_nack>
	i2c_send_stop();
 430:	72 df       	rcall	.-284    	; 0x316 <i2c_send_stop>
	return(ret);
}
 432:	ce 01       	movw	r24, r28
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 43a:	80 e8       	ldi	r24, 0x80	; 128
 43c:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 43e:	16 bc       	out	0x26, r1	; 38
	
	buttons_init();
 440:	ea de       	rcall	.-556    	; 0x216 <buttons_init>
	gauge_init();
 442:	60 de       	rcall	.-832    	; 0x104 <gauge_init>
	acc_init();
 444:	01 de       	rcall	.-1022   	; 0x48 <acc_init>
 446:	ff cf       	rjmp	.-2      	; 0x446 <main+0xc>

00000448 <uart_init>:
volatile static uint8_t tx_buffer[BUFFER_SIZE];
volatile static uint8_t tx_head = 0;
volatile static uint8_t tx_tail = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 448:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 44a:	83 e3       	ldi	r24, 0x33	; 51
 44c:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 44e:	88 e0       	ldi	r24, 0x08	; 8
 450:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
 452:	86 e2       	ldi	r24, 0x26	; 38
 454:	83 b9       	out	0x03, r24	; 3
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 456:	8f b7       	in	r24, 0x3f	; 63
 458:	80 68       	ori	r24, 0x80	; 128
 45a:	8f bf       	out	0x3f, r24	; 63
 45c:	08 95       	ret

0000045e <uart_putc>:
	uart_putc(command);
	uart_putc(data);
}

void uart_putc(uint8_t c){
	uint8_t tmp_head = (tx_head + 1) % BUFFER_SIZE;
 45e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <tx_head>
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	2f 5f       	subi	r18, 0xFF	; 255
 466:	3f 4f       	sbci	r19, 0xFF	; 255
 468:	2f 70       	andi	r18, 0x0F	; 15
 46a:	30 78       	andi	r19, 0x80	; 128
 46c:	33 23       	and	r19, r19
 46e:	34 f4       	brge	.+12     	; 0x47c <uart_putc+0x1e>
 470:	21 50       	subi	r18, 0x01	; 1
 472:	31 09       	sbc	r19, r1
 474:	20 6f       	ori	r18, 0xF0	; 240
 476:	3f 6f       	ori	r19, 0xFF	; 255
 478:	2f 5f       	subi	r18, 0xFF	; 255
 47a:	3f 4f       	sbci	r19, 0xFF	; 255
	while(tmp_head == tx_tail);
 47c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <tx_tail>
 480:	29 17       	cp	r18, r25
 482:	e1 f3       	breq	.-8      	; 0x47c <uart_putc+0x1e>
	tx_buffer[tx_head] = c;
 484:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <tx_head>
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	eb 59       	subi	r30, 0x9B	; 155
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	80 83       	st	Z, r24
	tx_head = tmp_head;
 490:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <tx_head>
	UCSRB |= (1<<UDRIE);
 494:	55 9a       	sbi	0x0a, 5	; 10
 496:	08 95       	ret

00000498 <uart_put_com>:
	UCSRB = (1<<TXEN);											//enable transmit
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
}

void uart_put_com(uint8_t command, uint8_t data){
 498:	cf 93       	push	r28
 49a:	c6 2f       	mov	r28, r22
	uart_putc(command);
 49c:	e0 df       	rcall	.-64     	; 0x45e <uart_putc>
	uart_putc(data);
 49e:	8c 2f       	mov	r24, r28
 4a0:	de df       	rcall	.-68     	; 0x45e <uart_putc>
}
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <__vector_8>:
	tx_buffer[tx_head] = c;
	tx_head = tmp_head;
	UCSRB |= (1<<UDRIE);
}

ISR(USART_UDRE_vect){
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	uint8_t tmp_tail = 0;
	if(tx_tail != tx_head){
 4b8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <tx_tail>
 4bc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <tx_head>
 4c0:	98 17       	cp	r25, r24
 4c2:	b1 f0       	breq	.+44     	; 0x4f0 <__vector_8+0x4a>
		tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 4c4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tx_tail>
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	8f 70       	andi	r24, 0x0F	; 15
 4ce:	90 78       	andi	r25, 0x80	; 128
 4d0:	99 23       	and	r25, r25
 4d2:	24 f4       	brge	.+8      	; 0x4dc <__vector_8+0x36>
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	80 6f       	ori	r24, 0xF0	; 240
 4d8:	9f 6f       	ori	r25, 0xFF	; 255
 4da:	01 96       	adiw	r24, 0x01	; 1
		UDR = tx_buffer[tx_tail];
 4dc:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <tx_tail>
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	eb 59       	subi	r30, 0x9B	; 155
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	90 81       	ld	r25, Z
 4e8:	9c b9       	out	0x0c, r25	; 12
		tx_tail = tmp_tail;
 4ea:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <tx_tail>
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__vector_8+0x4c>
	}else{
		UCSRB &= ~(1<<UDRIE);
 4f0:	55 98       	cbi	0x0a, 5	; 10
	}
}
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
