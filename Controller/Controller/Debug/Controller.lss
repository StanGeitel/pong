
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000007ba  0000084e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800066  00800066  00000854  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144e  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098c  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c93  00000000  00000000  0000280e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  000034a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057b  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adf  00000000  00000000  00003e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000048e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	74 c0       	rjmp	.+232    	; 0xec <__vector_1>
   4:	8c c1       	rjmp	.+792    	; 0x31e <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	26 c3       	rjmp	.+1612   	; 0x656 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	cf c1       	rjmp	.+926    	; 0x3ac <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	77 c3       	rjmp	.+1774   	; 0x700 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	f5 c1       	rjmp	.+1002   	; 0x402 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea eb       	ldi	r30, 0xBA	; 186
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 39       	cpi	r26, 0x9B	; 155
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	cf d2       	rcall	.+1438   	; 0x5f8 <main>
  5a:	ad c3       	rjmp	.+1882   	; 0x7b6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <acc_calibrate>:
	
	SREG |= (1<<SREG_I);							//enable interrupts I in global status register
}

void acc_calibrate(){
	x_acc[0] = x_acc[1] = y_acc[0] = y_acc[1] = x_vel[0] = x_vel[1] = y_vel[0] = y_vel[1] =	x_pos[0] = x_pos[1] = y_pos[0] = y_pos[1] = 0;	
  5e:	eb e6       	ldi	r30, 0x6B	; 107
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	13 82       	std	Z+3, r1	; 0x03
  64:	12 82       	std	Z+2, r1	; 0x02
  66:	11 82       	std	Z+1, r1	; 0x01
  68:	10 82       	st	Z, r1
  6a:	ef e6       	ldi	r30, 0x6F	; 111
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	13 82       	std	Z+3, r1	; 0x03
  70:	12 82       	std	Z+2, r1	; 0x02
  72:	11 82       	std	Z+1, r1	; 0x01
  74:	10 82       	st	Z, r1
  76:	e3 e7       	ldi	r30, 0x73	; 115
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	13 82       	std	Z+3, r1	; 0x03
  7c:	12 82       	std	Z+2, r1	; 0x02
  7e:	11 82       	std	Z+1, r1	; 0x01
  80:	10 82       	st	Z, r1
  82:	e7 e7       	ldi	r30, 0x77	; 119
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	13 82       	std	Z+3, r1	; 0x03
  88:	12 82       	std	Z+2, r1	; 0x02
  8a:	11 82       	std	Z+1, r1	; 0x01
  8c:	10 82       	st	Z, r1
  8e:	eb e7       	ldi	r30, 0x7B	; 123
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	13 82       	std	Z+3, r1	; 0x03
  94:	12 82       	std	Z+2, r1	; 0x02
  96:	11 82       	std	Z+1, r1	; 0x01
  98:	10 82       	st	Z, r1
  9a:	ef e7       	ldi	r30, 0x7F	; 127
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	13 82       	std	Z+3, r1	; 0x03
  a0:	12 82       	std	Z+2, r1	; 0x02
  a2:	11 82       	std	Z+1, r1	; 0x01
  a4:	10 82       	st	Z, r1
  a6:	08 95       	ret

000000a8 <acc_init>:
volatile static int16_t x_pos[2], y_pos[2];
volatile static int16_t x_noise = 0, y_noise = 0;
volatile static uint8_t drift_cnt = 0;

void acc_init(){
	i2c_single_write(ACC_ADD, PWR_MAN, 0x00);		//turn off sleep mode
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	6b e6       	ldi	r22, 0x6B	; 107
  ac:	88 e6       	ldi	r24, 0x68	; 104
  ae:	5f d2       	rcall	.+1214   	; 0x56e <i2c_single_write>
	i2c_single_write(ACC_ADD, ACC_CON, 0x00);		//set range on +/- 2g
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	6c e1       	ldi	r22, 0x1C	; 28
  b4:	88 e6       	ldi	r24, 0x68	; 104
  b6:	5b d2       	rcall	.+1206   	; 0x56e <i2c_single_write>
	i2c_single_write(ACC_ADD, SMPRT_DIV, 0x08);		//1kHz sample rate and interrupt rate
  b8:	48 e0       	ldi	r20, 0x08	; 8
  ba:	69 e1       	ldi	r22, 0x19	; 25
  bc:	88 e6       	ldi	r24, 0x68	; 104
  be:	57 d2       	rcall	.+1198   	; 0x56e <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_CON, 0x10);		//clear interrupt on any read
  c0:	40 e1       	ldi	r20, 0x10	; 16
  c2:	67 e3       	ldi	r22, 0x37	; 55
  c4:	88 e6       	ldi	r24, 0x68	; 104
  c6:	53 d2       	rcall	.+1190   	; 0x56e <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_EN, 0x01);		//enable interrupt on data ready
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	68 e3       	ldi	r22, 0x38	; 56
  cc:	88 e6       	ldi	r24, 0x68	; 104
  ce:	4f d2       	rcall	.+1182   	; 0x56e <i2c_single_write>
	
	acc_calibrate();
  d0:	c6 df       	rcall	.-116    	; 0x5e <acc_calibrate>

	MCUCR |= (1 << ISC00);
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);							//The rising edge of INT0 generates an interrupt request
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);							//enable external interrupt 0 in general interrupt mask register
  de:	8b b7       	in	r24, 0x3b	; 59
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);							//enable interrupts I in global status register
  e4:	8f b7       	in	r24, 0x3f	; 63
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8f bf       	out	0x3f, r24	; 63
  ea:	08 95       	ret

000000ec <__vector_1>:
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
*/
}

ISR(INT0_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	x_acc[1] = i2c_burst_read(ACC_ADD, X_MSB) + x_noise;
 112:	6b e3       	ldi	r22, 0x3B	; 59
 114:	88 e6       	ldi	r24, 0x68	; 104
 116:	58 d2       	rcall	.+1200   	; 0x5c8 <i2c_burst_read>
 118:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <x_noise>
 11c:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <x_noise+0x1>
 120:	82 0f       	add	r24, r18
 122:	93 1f       	adc	r25, r19
 124:	cf e7       	ldi	r28, 0x7F	; 127
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	9b 83       	std	Y+3, r25	; 0x03
 12a:	8a 83       	std	Y+2, r24	; 0x02
	y_acc[1] = i2c_burst_read(ACC_ADD, Y_MSB) + y_noise;
 12c:	6d e3       	ldi	r22, 0x3D	; 61
 12e:	88 e6       	ldi	r24, 0x68	; 104
 130:	4b d2       	rcall	.+1174   	; 0x5c8 <i2c_burst_read>
 132:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <y_noise>
 136:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <y_noise+0x1>
 13a:	82 0f       	add	r24, r18
 13c:	93 1f       	adc	r25, r19
 13e:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <y_acc+0x3>
 142:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <y_acc+0x2>
	
	if((x_acc[1] <= 50 && x_acc[1] >= -50) && (y_acc[1] <= 50 && y_acc[1] >= -50)){
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	9b 81       	ldd	r25, Y+3	; 0x03
 14a:	c3 97       	sbiw	r24, 0x33	; 51
 14c:	d4 f4       	brge	.+52     	; 0x182 <__vector_1+0x96>
 14e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <x_acc+0x2>
 152:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <x_acc+0x3>
 156:	8e 3c       	cpi	r24, 0xCE	; 206
 158:	9f 4f       	sbci	r25, 0xFF	; 255
 15a:	9c f0       	brlt	.+38     	; 0x182 <__vector_1+0x96>
 15c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <y_acc+0x2>
 160:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <y_acc+0x3>
 164:	c3 97       	sbiw	r24, 0x33	; 51
 166:	6c f4       	brge	.+26     	; 0x182 <__vector_1+0x96>
 168:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <y_acc+0x2>
 16c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <y_acc+0x3>
 170:	8e 3c       	cpi	r24, 0xCE	; 206
 172:	9f 4f       	sbci	r25, 0xFF	; 255
 174:	34 f0       	brlt	.+12     	; 0x182 <__vector_1+0x96>
		drift_cnt++;
 176:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 180:	66 c0       	rjmp	.+204    	; 0x24e <__vector_1+0x162>
	}
	else{
		drift_cnt = 0;
 182:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		x_vel[1] = x_vel[0] + (x_acc[0] + ((x_acc[1] - x_acc[0])>>1));
 186:	a7 e7       	ldi	r26, 0x77	; 119
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	2d 91       	ld	r18, X+
 18c:	3c 91       	ld	r19, X
 18e:	11 97       	sbiw	r26, 0x01	; 1
 190:	ef e7       	ldi	r30, 0x7F	; 127
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	40 81       	ld	r20, Z
 196:	51 81       	ldd	r21, Z+1	; 0x01
 198:	82 81       	ldd	r24, Z+2	; 0x02
 19a:	93 81       	ldd	r25, Z+3	; 0x03
 19c:	60 81       	ld	r22, Z
 19e:	71 81       	ldd	r23, Z+1	; 0x01
 1a0:	86 1b       	sub	r24, r22
 1a2:	97 0b       	sbc	r25, r23
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	84 0f       	add	r24, r20
 1aa:	95 1f       	adc	r25, r21
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	13 96       	adiw	r26, 0x03	; 3
 1b2:	9c 93       	st	X, r25
 1b4:	8e 93       	st	-X, r24
 1b6:	12 97       	sbiw	r26, 0x02	; 2
		y_vel[1] = y_vel[0] + (y_acc[0] + ((y_acc[1] - y_acc[0])>>1));
 1b8:	e3 e7       	ldi	r30, 0x73	; 115
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	20 81       	ld	r18, Z
 1be:	31 81       	ldd	r19, Z+1	; 0x01
 1c0:	cb e7       	ldi	r28, 0x7B	; 123
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	48 81       	ld	r20, Y
 1c6:	59 81       	ldd	r21, Y+1	; 0x01
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	9b 81       	ldd	r25, Y+3	; 0x03
 1cc:	68 81       	ld	r22, Y
 1ce:	79 81       	ldd	r23, Y+1	; 0x01
 1d0:	86 1b       	sub	r24, r22
 1d2:	97 0b       	sbc	r25, r23
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	84 0f       	add	r24, r20
 1da:	95 1f       	adc	r25, r21
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	93 83       	std	Z+3, r25	; 0x03
 1e2:	82 83       	std	Z+2, r24	; 0x02
		
		x_pos[1] = x_pos[0] + (x_vel[0] + ((x_vel[1] - x_vel[0])>>1));
 1e4:	cf e6       	ldi	r28, 0x6F	; 111
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	28 81       	ld	r18, Y
 1ea:	39 81       	ldd	r19, Y+1	; 0x01
 1ec:	4d 91       	ld	r20, X+
 1ee:	5c 91       	ld	r21, X
 1f0:	11 97       	sbiw	r26, 0x01	; 1
 1f2:	12 96       	adiw	r26, 0x02	; 2
 1f4:	8d 91       	ld	r24, X+
 1f6:	9c 91       	ld	r25, X
 1f8:	13 97       	sbiw	r26, 0x03	; 3
 1fa:	6d 91       	ld	r22, X+
 1fc:	7c 91       	ld	r23, X
 1fe:	86 1b       	sub	r24, r22
 200:	97 0b       	sbc	r25, r23
 202:	95 95       	asr	r25
 204:	87 95       	ror	r24
 206:	84 0f       	add	r24, r20
 208:	95 1f       	adc	r25, r21
 20a:	82 0f       	add	r24, r18
 20c:	93 1f       	adc	r25, r19
 20e:	9b 83       	std	Y+3, r25	; 0x03
 210:	8a 83       	std	Y+2, r24	; 0x02
		y_pos[1] = y_pos[0] + (y_vel[0] + ((y_vel[1] - y_vel[0])>>1));
 212:	ab e6       	ldi	r26, 0x6B	; 107
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	2d 91       	ld	r18, X+
 218:	3c 91       	ld	r19, X
 21a:	11 97       	sbiw	r26, 0x01	; 1
 21c:	40 81       	ld	r20, Z
 21e:	51 81       	ldd	r21, Z+1	; 0x01
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	93 81       	ldd	r25, Z+3	; 0x03
 224:	60 81       	ld	r22, Z
 226:	71 81       	ldd	r23, Z+1	; 0x01
 228:	86 1b       	sub	r24, r22
 22a:	97 0b       	sbc	r25, r23
 22c:	95 95       	asr	r25
 22e:	87 95       	ror	r24
 230:	84 0f       	add	r24, r20
 232:	95 1f       	adc	r25, r21
 234:	82 0f       	add	r24, r18
 236:	93 1f       	adc	r25, r19
 238:	13 96       	adiw	r26, 0x03	; 3
 23a:	9c 93       	st	X, r25
 23c:	8e 93       	st	-X, r24
 23e:	12 97       	sbiw	r26, 0x02	; 2
		
		uart_set_pos(x_pos[1], y_pos[1]);
 240:	12 96       	adiw	r26, 0x02	; 2
 242:	6d 91       	ld	r22, X+
 244:	7c 91       	ld	r23, X
 246:	13 97       	sbiw	r26, 0x03	; 3
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	9b 81       	ldd	r25, Y+3	; 0x03
 24c:	f3 d1       	rcall	.+998    	; 0x634 <uart_set_pos>
	}
	if(drift_cnt == 8){
 24e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 252:	88 30       	cpi	r24, 0x08	; 8
 254:	41 f4       	brne	.+16     	; 0x266 <__vector_1+0x17a>
		x_vel[1] = 0;
 256:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <x_vel+0x3>
 25a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <x_vel+0x2>
		y_vel[1] = 0;
 25e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <y_vel+0x3>
 262:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <y_vel+0x2>
	}
	x_acc[0] = x_acc[1];
 266:	ef e7       	ldi	r30, 0x7F	; 127
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	93 81       	ldd	r25, Z+3	; 0x03
 26e:	91 83       	std	Z+1, r25	; 0x01
 270:	80 83       	st	Z, r24
	y_acc[0] = y_acc[1];
 272:	eb e7       	ldi	r30, 0x7B	; 123
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	82 81       	ldd	r24, Z+2	; 0x02
 278:	93 81       	ldd	r25, Z+3	; 0x03
 27a:	91 83       	std	Z+1, r25	; 0x01
 27c:	80 83       	st	Z, r24

	x_vel[0] = x_vel[1];
 27e:	e7 e7       	ldi	r30, 0x77	; 119
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	82 81       	ldd	r24, Z+2	; 0x02
 284:	93 81       	ldd	r25, Z+3	; 0x03
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
	y_vel[0] = y_vel[1];
 28a:	e3 e7       	ldi	r30, 0x73	; 115
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	82 81       	ldd	r24, Z+2	; 0x02
 290:	93 81       	ldd	r25, Z+3	; 0x03
 292:	91 83       	std	Z+1, r25	; 0x01
 294:	80 83       	st	Z, r24

	x_pos[0] = x_pos[1];
 296:	ef e6       	ldi	r30, 0x6F	; 111
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	82 81       	ldd	r24, Z+2	; 0x02
 29c:	93 81       	ldd	r25, Z+3	; 0x03
 29e:	91 83       	std	Z+1, r25	; 0x01
 2a0:	80 83       	st	Z, r24
	y_pos[0] = y_pos[1];
 2a2:	eb e6       	ldi	r30, 0x6B	; 107
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	82 81       	ldd	r24, Z+2	; 0x02
 2a8:	93 81       	ldd	r25, Z+3	; 0x03
 2aa:	91 83       	std	Z+1, r25	; 0x01
 2ac:	80 83       	st	Z, r24
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <gauge_init>:
#include "i2c.h"

volatile static uint8_t count = 0;

void gauge_init(void){
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	4f ef       	ldi	r20, 0xFF	; 255
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	84 e6       	ldi	r24, 0x64	; 100
 2dc:	51 d1       	rcall	.+674    	; 0x580 <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 2de:	2c e1       	ldi	r18, 0x1C	; 28
 2e0:	4c e7       	ldi	r20, 0x7C	; 124
 2e2:	66 e0       	ldi	r22, 0x06	; 6
 2e4:	84 e6       	ldi	r24, 0x64	; 100
 2e6:	4c d1       	rcall	.+664    	; 0x580 <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 2e8:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 2ea:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 2ec:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 2ee:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 2f0:	89 b7       	in	r24, 0x39	; 57
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 2fa:	85 b7       	in	r24, 0x35	; 53
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 300:	8b b7       	in	r24, 0x3b	; 59
 302:	80 68       	ori	r24, 0x80	; 128
 304:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 306:	8f b7       	in	r24, 0x3f	; 63
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	8f bf       	out	0x3f, r24	; 63
 30c:	08 95       	ret

0000030e <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 30e:	ce d0       	rcall	.+412    	; 0x4ac <i2c_send_start>
	i2c_send_data(ARA<<1);
 310:	88 e1       	ldi	r24, 0x18	; 24
 312:	0a d1       	rcall	.+532    	; 0x528 <i2c_send_data>
	i2c_get_ack();						
 314:	f8 d0       	rcall	.+496    	; 0x506 <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 316:	43 d1       	rcall	.+646    	; 0x59e <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 318:	ee d0       	rcall	.+476    	; 0x4f6 <i2c_send_nack>
	i2c_send_stop();
 31a:	dc d0       	rcall	.+440    	; 0x4d4 <i2c_send_stop>
 31c:	08 95       	ret

0000031e <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 340:	03 b6       	in	r0, 0x33	; 51
 342:	02 fe       	sbrs	r0, 2
 344:	13 c0       	rjmp	.+38     	; 0x36c <__vector_2+0x4e>
 346:	03 b6       	in	r0, 0x33	; 51
 348:	00 fe       	sbrs	r0, 0
 34a:	10 c0       	rjmp	.+32     	; 0x36c <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 34c:	83 b7       	in	r24, 0x33	; 51
 34e:	8a 7f       	andi	r24, 0xFA	; 250
 350:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 352:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	64 e0       	ldi	r22, 0x04	; 4
 35a:	84 e6       	ldi	r24, 0x64	; 100
 35c:	11 d1       	rcall	.+546    	; 0x580 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 35e:	2c e1       	ldi	r18, 0x1C	; 28
 360:	4c e7       	ldi	r20, 0x7C	; 124
 362:	66 e0       	ldi	r22, 0x06	; 6
 364:	84 e6       	ldi	r24, 0x64	; 100
 366:	0c d1       	rcall	.+536    	; 0x580 <i2c_burst_write>
		gauge_send_arp();	
 368:	d2 df       	rcall	.-92     	; 0x30e <gauge_send_arp>
 36a:	0f c0       	rjmp	.+30     	; 0x38a <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 36c:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 36e:	83 b7       	in	r24, 0x33	; 51
 370:	85 60       	ori	r24, 0x05	; 5
 372:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	66 e0       	ldi	r22, 0x06	; 6
 37a:	84 e6       	ldi	r24, 0x64	; 100
 37c:	01 d1       	rcall	.+514    	; 0x580 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 37e:	2d ef       	ldi	r18, 0xFD	; 253
 380:	4d e7       	ldi	r20, 0x7D	; 125
 382:	64 e0       	ldi	r22, 0x04	; 4
 384:	84 e6       	ldi	r24, 0x64	; 100
 386:	fc d0       	rcall	.+504    	; 0x580 <i2c_burst_write>
		gauge_send_arp();
 388:	c2 df       	rcall	.-124    	; 0x30e <gauge_send_arp>
	}
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_6>:

ISR(TIMER0_OVF_vect){
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
	if(count == 17){
 3ba:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <count>
 3be:	81 31       	cpi	r24, 0x11	; 17
 3c0:	39 f4       	brne	.+14     	; 0x3d0 <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 3c2:	98 b3       	in	r25, 0x18	; 24
 3c4:	80 e1       	ldi	r24, 0x10	; 16
 3c6:	89 27       	eor	r24, r25
 3c8:	88 bb       	out	0x18, r24	; 24
		count = 0;
 3ca:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <count>
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <__vector_6+0x2e>
	}else{
		count++;
 3d0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <count>
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <count>
	}
}
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <buttons_init>:
#include "uart.h"

volatile static uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 3e8:	87 b3       	in	r24, 0x17	; 23
 3ea:	80 7f       	andi	r24, 0xF0	; 240
 3ec:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 3ee:	80 b5       	in	r24, 0x20	; 32
 3f0:	8f 60       	ori	r24, 0x0F	; 15
 3f2:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 3f4:	8b b7       	in	r24, 0x3b	; 59
 3f6:	80 62       	ori	r24, 0x20	; 32
 3f8:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 3fa:	8f b7       	in	r24, 0x3f	; 63
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	8f bf       	out	0x3f, r24	; 63
 400:	08 95       	ret

00000402 <__vector_11>:
}

ISR(PCINT0_vect){		
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	2f 93       	push	r18
 40e:	3f 93       	push	r19
 410:	4f 93       	push	r20
 412:	5f 93       	push	r21
 414:	6f 93       	push	r22
 416:	7f 93       	push	r23
 418:	8f 93       	push	r24
 41a:	9f 93       	push	r25
 41c:	af 93       	push	r26
 41e:	bf 93       	push	r27
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 428:	d6 b3       	in	r29, 0x16	; 22
 42a:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 42c:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <old_buttons>
 430:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 432:	c0 ff       	sbrs	r28, 0
 434:	06 c0       	rjmp	.+12     	; 0x442 <__vector_11+0x40>
 436:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
 43a:	80 ff       	sbrs	r24, 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__vector_11+0x40>
		uart_set_button(0);
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	00 d1       	rcall	.+512    	; 0x642 <uart_set_button>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 442:	c1 ff       	sbrs	r28, 1
 444:	06 c0       	rjmp	.+12     	; 0x452 <__vector_11+0x50>
 446:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
 44a:	81 ff       	sbrs	r24, 1
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__vector_11+0x50>
		uart_set_button(1);
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	f8 d0       	rcall	.+496    	; 0x642 <uart_set_button>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 452:	c2 ff       	sbrs	r28, 2
 454:	06 c0       	rjmp	.+12     	; 0x462 <__vector_11+0x60>
 456:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
 45a:	82 ff       	sbrs	r24, 2
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__vector_11+0x60>
		uart_set_button(2);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	f0 d0       	rcall	.+480    	; 0x642 <uart_set_button>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 462:	c3 fd       	sbrc	r28, 3
 464:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
		
	}
	old_buttons = new_buttons;
 468:	d0 93 84 00 	sts	0x0084, r29	; 0x800084 <old_buttons>
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	8f b9       	out	0x0f, r24	; 15
 496:	88 b3       	in	r24, 0x18	; 24
 498:	80 6a       	ori	r24, 0xA0	; 160
 49a:	88 bb       	out	0x18, r24	; 24
 49c:	87 b3       	in	r24, 0x17	; 23
 49e:	80 6a       	ori	r24, 0xA0	; 160
 4a0:	87 bb       	out	0x17, r24	; 23
 4a2:	8a e2       	ldi	r24, 0x2A	; 42
 4a4:	8d b9       	out	0x0d, r24	; 13
 4a6:	80 ef       	ldi	r24, 0xF0	; 240
 4a8:	8e b9       	out	0x0e, r24	; 14
 4aa:	08 95       	ret

000004ac <i2c_send_start>:
 4ac:	88 b3       	in	r24, 0x18	; 24
 4ae:	80 6a       	ori	r24, 0xA0	; 160
 4b0:	88 bb       	out	0x18, r24	; 24
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	98 b3       	in	r25, 0x18	; 24
 4b6:	88 b3       	in	r24, 0x18	; 24
 4b8:	85 fb       	bst	r24, 5
 4ba:	88 27       	eor	r24, r24
 4bc:	80 f9       	bld	r24, 0
 4be:	82 13       	cpse	r24, r18
 4c0:	f9 cf       	rjmp	.-14     	; 0x4b4 <i2c_send_start+0x8>
 4c2:	99 23       	and	r25, r25
 4c4:	bc f7       	brge	.-18     	; 0x4b4 <i2c_send_start+0x8>
 4c6:	c5 98       	cbi	0x18, 5	; 24
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	8a 95       	dec	r24
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <i2c_send_start+0x1e>
 4ce:	00 00       	nop
 4d0:	c7 98       	cbi	0x18, 7	; 24
 4d2:	08 95       	ret

000004d4 <i2c_send_stop>:
 4d4:	c5 98       	cbi	0x18, 5	; 24
 4d6:	c7 9a       	sbi	0x18, 7	; 24
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	8a 95       	dec	r24
 4dc:	f1 f7       	brne	.-4      	; 0x4da <i2c_send_stop+0x6>
 4de:	00 00       	nop
 4e0:	c5 9a       	sbi	0x18, 5	; 24
 4e2:	08 95       	ret

000004e4 <i2c_send_ack>:
 4e4:	c5 98       	cbi	0x18, 5	; 24
 4e6:	c7 9a       	sbi	0x18, 7	; 24
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	8a 95       	dec	r24
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <i2c_send_ack+0x6>
 4ee:	00 00       	nop
 4f0:	c7 98       	cbi	0x18, 7	; 24
 4f2:	c5 9a       	sbi	0x18, 5	; 24
 4f4:	08 95       	ret

000004f6 <i2c_send_nack>:
 4f6:	c5 9a       	sbi	0x18, 5	; 24
 4f8:	c7 9a       	sbi	0x18, 7	; 24
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	8a 95       	dec	r24
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <i2c_send_nack+0x6>
 500:	00 00       	nop
 502:	c7 98       	cbi	0x18, 7	; 24
 504:	08 95       	ret

00000506 <i2c_get_ack>:
 506:	bd 98       	cbi	0x17, 5	; 23
 508:	68 9a       	sbi	0x0d, 0	; 13
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	8a 95       	dec	r24
 50e:	f1 f7       	brne	.-4      	; 0x50c <i2c_get_ack+0x6>
 510:	00 00       	nop
 512:	68 9a       	sbi	0x0d, 0	; 13
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	8a 95       	dec	r24
 518:	f1 f7       	brne	.-4      	; 0x516 <i2c_get_ack+0x10>
 51a:	00 00       	nop
 51c:	8f b1       	in	r24, 0x0f	; 15
 51e:	9f ef       	ldi	r25, 0xFF	; 255
 520:	9f b9       	out	0x0f, r25	; 15
 522:	bd 9a       	sbi	0x17, 5	; 23
 524:	81 70       	andi	r24, 0x01	; 1
 526:	08 95       	ret

00000528 <i2c_send_data>:
 528:	8f b9       	out	0x0f, r24	; 15
 52a:	c5 9a       	sbi	0x18, 5	; 24
 52c:	8e b1       	in	r24, 0x0e	; 14
 52e:	80 7f       	andi	r24, 0xF0	; 240
 530:	8e b9       	out	0x0e, r24	; 14
 532:	68 9a       	sbi	0x0d, 0	; 13
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	8a 95       	dec	r24
 538:	f1 f7       	brne	.-4      	; 0x536 <i2c_send_data+0xe>
 53a:	00 00       	nop
 53c:	68 9a       	sbi	0x0d, 0	; 13
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	8a 95       	dec	r24
 542:	f1 f7       	brne	.-4      	; 0x540 <i2c_send_data+0x18>
 544:	00 00       	nop
 546:	76 9b       	sbis	0x0e, 6	; 14
 548:	f4 cf       	rjmp	.-24     	; 0x532 <i2c_send_data+0xa>
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	8f b9       	out	0x0f, r24	; 15
 54e:	08 95       	ret

00000550 <i2c_send_reg_add>:
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	d8 2f       	mov	r29, r24
 556:	c6 2f       	mov	r28, r22
 558:	a9 df       	rcall	.-174    	; 0x4ac <i2c_send_start>
 55a:	8d 2f       	mov	r24, r29
 55c:	88 0f       	add	r24, r24
 55e:	e4 df       	rcall	.-56     	; 0x528 <i2c_send_data>
 560:	d2 df       	rcall	.-92     	; 0x506 <i2c_get_ack>
 562:	8c 2f       	mov	r24, r28
 564:	e1 df       	rcall	.-62     	; 0x528 <i2c_send_data>
 566:	cf df       	rcall	.-98     	; 0x506 <i2c_get_ack>
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <i2c_single_write>:
 56e:	cf 93       	push	r28
 570:	c4 2f       	mov	r28, r20
 572:	ee df       	rcall	.-36     	; 0x550 <i2c_send_reg_add>
 574:	8c 2f       	mov	r24, r28
 576:	d8 df       	rcall	.-80     	; 0x528 <i2c_send_data>
 578:	c6 df       	rcall	.-116    	; 0x506 <i2c_get_ack>
 57a:	ac df       	rcall	.-168    	; 0x4d4 <i2c_send_stop>
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <i2c_burst_write>:
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	d4 2f       	mov	r29, r20
 586:	c2 2f       	mov	r28, r18
 588:	e3 df       	rcall	.-58     	; 0x550 <i2c_send_reg_add>
 58a:	8d 2f       	mov	r24, r29
 58c:	cd df       	rcall	.-102    	; 0x528 <i2c_send_data>
 58e:	bb df       	rcall	.-138    	; 0x506 <i2c_get_ack>
 590:	8c 2f       	mov	r24, r28
 592:	ca df       	rcall	.-108    	; 0x528 <i2c_send_data>
 594:	b8 df       	rcall	.-144    	; 0x506 <i2c_get_ack>
 596:	9e df       	rcall	.-196    	; 0x4d4 <i2c_send_stop>
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <i2c_get_data>:
 59e:	bd 98       	cbi	0x17, 5	; 23
 5a0:	8e b1       	in	r24, 0x0e	; 14
 5a2:	80 7f       	andi	r24, 0xF0	; 240
 5a4:	8e b9       	out	0x0e, r24	; 14
 5a6:	68 9a       	sbi	0x0d, 0	; 13
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	8a 95       	dec	r24
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <i2c_get_data+0xc>
 5ae:	00 00       	nop
 5b0:	68 9a       	sbi	0x0d, 0	; 13
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	8a 95       	dec	r24
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <i2c_get_data+0x16>
 5b8:	00 00       	nop
 5ba:	76 9b       	sbis	0x0e, 6	; 14
 5bc:	f4 cf       	rjmp	.-24     	; 0x5a6 <i2c_get_data+0x8>
 5be:	8f b1       	in	r24, 0x0f	; 15
 5c0:	9f ef       	ldi	r25, 0xFF	; 255
 5c2:	9f b9       	out	0x0f, r25	; 15
 5c4:	bd 9a       	sbi	0x17, 5	; 23
 5c6:	08 95       	ret

000005c8 <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 5ce:	c0 df       	rcall	.-128    	; 0x550 <i2c_send_reg_add>
	i2c_send_start();
 5d0:	6d df       	rcall	.-294    	; 0x4ac <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 5d2:	8c 2f       	mov	r24, r28
 5d4:	88 0f       	add	r24, r24
 5d6:	81 60       	ori	r24, 0x01	; 1
 5d8:	a7 df       	rcall	.-178    	; 0x528 <i2c_send_data>
	i2c_get_ack();
 5da:	95 df       	rcall	.-214    	; 0x506 <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 5dc:	e0 df       	rcall	.-64     	; 0x59e <i2c_get_data>
 5de:	c8 2f       	mov	r28, r24
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	dc 2f       	mov	r29, r28
 5e4:	cc 27       	eor	r28, r28
	i2c_send_ack();
 5e6:	7e df       	rcall	.-260    	; 0x4e4 <i2c_send_ack>
	ret |= i2c_get_data();
 5e8:	da df       	rcall	.-76     	; 0x59e <i2c_get_data>
 5ea:	c8 2b       	or	r28, r24
	i2c_send_nack();
 5ec:	84 df       	rcall	.-248    	; 0x4f6 <i2c_send_nack>
	i2c_send_stop();
 5ee:	72 df       	rcall	.-284    	; 0x4d4 <i2c_send_stop>
	return(ret);
}
 5f0:	ce 01       	movw	r24, r28
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 5f8:	80 e8       	ldi	r24, 0x80	; 128
 5fa:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 5fc:	16 bc       	out	0x26, r1	; 38
	
	i2c_init();
 5fe:	49 df       	rcall	.-366    	; 0x492 <i2c_init>
	uart_init();
 600:	04 d0       	rcall	.+8      	; 0x60a <uart_init>
	gauge_init();
 602:	68 de       	rcall	.-816    	; 0x2d4 <gauge_init>
	buttons_init();
 604:	f1 de       	rcall	.-542    	; 0x3e8 <buttons_init>
	acc_init();
 606:	50 dd       	rcall	.-1376   	; 0xa8 <acc_init>
 608:	ff cf       	rjmp	.-2      	; 0x608 <main+0x10>

0000060a <uart_init>:
volatile static uint8_t tx_tail = 0;
volatile static uint8_t tx_tele[TELE_SIZE] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
volatile static uint8_t tx_buffer[BUFFER_SIZE];

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 60a:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 60c:	89 e1       	ldi	r24, 0x19	; 25
 60e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 610:	88 e0       	ldi	r24, 0x08	; 8
 612:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);					//set 8-bit character, set 1 stop bit
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	83 b9       	out	0x03, r24	; 3
	
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
 618:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);		//8MHz with 8 prescaler, clear timer on compare results in 1MHz counter
 61a:	8a e0       	ldi	r24, 0x0A	; 10
 61c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);										//enable output compare A match interrupt
 61e:	89 b7       	in	r24, 0x39	; 57
 620:	80 64       	ori	r24, 0x40	; 64
 622:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0x27;												//compare on 10000 clock cycles resulting in 10 milliseconds
 624:	87 e2       	ldi	r24, 0x27	; 39
 626:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0x10;												
 628:	80 e1       	ldi	r24, 0x10	; 16
 62a:	8a bd       	out	0x2a, r24	; 42

	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 62c:	8f b7       	in	r24, 0x3f	; 63
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	8f bf       	out	0x3f, r24	; 63
 632:	08 95       	ret

00000634 <uart_set_pos>:
}

void uart_set_pos(int16_t xpos, int16_t ypos){
	tx_tele[X_L] = (xpos&0xFF);		//x_pos_LSB
 634:	e0 e6       	ldi	r30, 0x60	; 96
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 83       	st	Z, r24
	tx_tele[X_H] = (xpos>>8);			//x_pos_MSB
 63a:	91 83       	std	Z+1, r25	; 0x01
	tx_tele[Y_L] = (ypos&0xFF);		//y_pos_LSB
 63c:	62 83       	std	Z+2, r22	; 0x02
	tx_tele[Y_H] = (ypos>>8);			//y_pos_MSB
 63e:	73 83       	std	Z+3, r23	; 0x03
 640:	08 95       	ret

00000642 <uart_set_button>:
}

void uart_set_button(uint8_t button){
	tx_tele[BUTTONS] = (1<<button);		//set one button as pressed
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <uart_set_button+0xa>
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	8a 95       	dec	r24
 64e:	e2 f7       	brpl	.-8      	; 0x648 <uart_set_button+0x6>
 650:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__data_start+0x4>
 654:	08 95       	ret

00000656 <__vector_4>:
}

ISR(TIMER1_COMPA_vect){
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	uint8_t tmp_head = (tx_head + TELE_SIZE) % BUFFER_SIZE;
 678:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <tx_head>
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	05 96       	adiw	r24, 0x05	; 5
 680:	64 e1       	ldi	r22, 0x14	; 20
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	71 d0       	rcall	.+226    	; 0x768 <__divmodhi4>
 686:	ac 01       	movw	r20, r24
 688:	28 2f       	mov	r18, r24
	while(tmp_head == tx_tail);
 68a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <tx_tail>
 68e:	29 17       	cp	r18, r25
 690:	e1 f3       	breq	.-8      	; 0x68a <__vector_4+0x34>
 692:	9a 01       	movw	r18, r20
 694:	33 27       	eor	r19, r19
	tx_buffer[tmp_head-5] = tx_tele[X_L];		//write telegram to buffer
 696:	e0 e6       	ldi	r30, 0x60	; 96
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	d9 01       	movw	r26, r18
 69e:	a0 58       	subi	r26, 0x80	; 128
 6a0:	bf 4f       	sbci	r27, 0xFF	; 255
 6a2:	8c 93       	st	X, r24
	tx_buffer[tmp_head-4] = tx_tele[X_H];
 6a4:	81 81       	ldd	r24, Z+1	; 0x01
 6a6:	d9 01       	movw	r26, r18
 6a8:	af 57       	subi	r26, 0x7F	; 127
 6aa:	bf 4f       	sbci	r27, 0xFF	; 255
 6ac:	8c 93       	st	X, r24
	tx_buffer[tmp_head-3] = tx_tele[Y_L];
 6ae:	82 81       	ldd	r24, Z+2	; 0x02
 6b0:	d9 01       	movw	r26, r18
 6b2:	ae 57       	subi	r26, 0x7E	; 126
 6b4:	bf 4f       	sbci	r27, 0xFF	; 255
 6b6:	8c 93       	st	X, r24
	tx_buffer[tmp_head-2] = tx_tele[Y_H];
 6b8:	83 81       	ldd	r24, Z+3	; 0x03
 6ba:	d9 01       	movw	r26, r18
 6bc:	ad 57       	subi	r26, 0x7D	; 125
 6be:	bf 4f       	sbci	r27, 0xFF	; 255
 6c0:	8c 93       	st	X, r24
	tx_buffer[tmp_head-1] = tx_tele[BUTTONS];
 6c2:	84 81       	ldd	r24, Z+4	; 0x04
 6c4:	d9 01       	movw	r26, r18
 6c6:	ac 57       	subi	r26, 0x7C	; 124
 6c8:	bf 4f       	sbci	r27, 0xFF	; 255
 6ca:	8c 93       	st	X, r24
	tx_head = tmp_head;
 6cc:	40 93 9a 00 	sts	0x009A, r20	; 0x80009a <tx_head>
	UCSRB |= (1<<UDRIE);			//enable interrupt on data register empty flag
 6d0:	55 9a       	sbi	0x0a, 5	; 10
	
	tx_tele[0] = 0x00;				//reset telegram
 6d2:	10 82       	st	Z, r1
	tx_tele[1] = 0xFF;
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	81 83       	std	Z+1, r24	; 0x01
	tx_tele[2] = 0xFF;
 6d8:	82 83       	std	Z+2, r24	; 0x02
	tx_tele[3] = 0xFF;
 6da:	83 83       	std	Z+3, r24	; 0x03
	tx_tele[4] = 0xFF;
 6dc:	84 83       	std	Z+4, r24	; 0x04
}
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	bf 91       	pop	r27
 6e4:	af 91       	pop	r26
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	7f 91       	pop	r23
 6ec:	6f 91       	pop	r22
 6ee:	5f 91       	pop	r21
 6f0:	4f 91       	pop	r20
 6f2:	3f 91       	pop	r19
 6f4:	2f 91       	pop	r18
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <__vector_8>:

ISR(USART_UDRE_vect){
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
	uint8_t tmp_tail = 0;
	if(tx_tail != tx_head){
 71c:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <tx_tail>
 720:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <tx_head>
 724:	98 17       	cp	r25, r24
 726:	89 f0       	breq	.+34     	; 0x74a <__vector_8+0x4a>
		tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 728:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <tx_tail>
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	64 e1       	ldi	r22, 0x14	; 20
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	19 d0       	rcall	.+50     	; 0x768 <__divmodhi4>
		UDR = tx_buffer[tx_tail];
 736:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <tx_tail>
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	eb 57       	subi	r30, 0x7B	; 123
 73e:	ff 4f       	sbci	r31, 0xFF	; 255
 740:	90 81       	ld	r25, Z
 742:	9c b9       	out	0x0c, r25	; 12
		tx_tail = tmp_tail;
 744:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <tx_tail>
 748:	01 c0       	rjmp	.+2      	; 0x74c <__vector_8+0x4c>
	}else{
		UCSRB &= ~(1<<UDRIE);
 74a:	55 98       	cbi	0x0a, 5	; 10
	}
 74c:	ff 91       	pop	r31
 74e:	ef 91       	pop	r30
 750:	bf 91       	pop	r27
 752:	af 91       	pop	r26
 754:	9f 91       	pop	r25
 756:	8f 91       	pop	r24
 758:	7f 91       	pop	r23
 75a:	6f 91       	pop	r22
 75c:	5f 91       	pop	r21
 75e:	0f 90       	pop	r0
 760:	0f be       	out	0x3f, r0	; 63
 762:	0f 90       	pop	r0
 764:	1f 90       	pop	r1
 766:	18 95       	reti

00000768 <__divmodhi4>:
 768:	97 fb       	bst	r25, 7
 76a:	07 2e       	mov	r0, r23
 76c:	16 f4       	brtc	.+4      	; 0x772 <__divmodhi4+0xa>
 76e:	00 94       	com	r0
 770:	06 d0       	rcall	.+12     	; 0x77e <__divmodhi4_neg1>
 772:	77 fd       	sbrc	r23, 7
 774:	08 d0       	rcall	.+16     	; 0x786 <__divmodhi4_neg2>
 776:	0b d0       	rcall	.+22     	; 0x78e <__udivmodhi4>
 778:	07 fc       	sbrc	r0, 7
 77a:	05 d0       	rcall	.+10     	; 0x786 <__divmodhi4_neg2>
 77c:	3e f4       	brtc	.+14     	; 0x78c <__divmodhi4_exit>

0000077e <__divmodhi4_neg1>:
 77e:	90 95       	com	r25
 780:	81 95       	neg	r24
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__divmodhi4_neg2>:
 786:	70 95       	com	r23
 788:	61 95       	neg	r22
 78a:	7f 4f       	sbci	r23, 0xFF	; 255

0000078c <__divmodhi4_exit>:
 78c:	08 95       	ret

0000078e <__udivmodhi4>:
 78e:	aa 1b       	sub	r26, r26
 790:	bb 1b       	sub	r27, r27
 792:	51 e1       	ldi	r21, 0x11	; 17
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <__udivmodhi4_ep>

00000796 <__udivmodhi4_loop>:
 796:	aa 1f       	adc	r26, r26
 798:	bb 1f       	adc	r27, r27
 79a:	a6 17       	cp	r26, r22
 79c:	b7 07       	cpc	r27, r23
 79e:	10 f0       	brcs	.+4      	; 0x7a4 <__udivmodhi4_ep>
 7a0:	a6 1b       	sub	r26, r22
 7a2:	b7 0b       	sbc	r27, r23

000007a4 <__udivmodhi4_ep>:
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	5a 95       	dec	r21
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__udivmodhi4_loop>
 7ac:	80 95       	com	r24
 7ae:	90 95       	com	r25
 7b0:	bc 01       	movw	r22, r24
 7b2:	cd 01       	movw	r24, r26
 7b4:	08 95       	ret

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
