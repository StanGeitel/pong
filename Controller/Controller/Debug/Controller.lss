
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066b  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a4  00000000  00000000  00000deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000085  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	1d c0       	rjmp	.+58     	; 0x56 <__vector_13>
  1c:	2c c0       	rjmp	.+88     	; 0x76 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	39 c0       	rjmp	.+114    	; 0xb8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include "timer.h"


int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
  48:	80 e8       	ldi	r24, 0x80	; 128
  4a:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
  4c:	16 bc       	out	0x26, r1	; 38
	
	//acc_init();
	//_delay_ms(3000);
	init_uart();
  4e:	28 d0       	rcall	.+80     	; 0xa0 <init_uart>
	uart_transmit(0x02);
  50:	82 e0       	ldi	r24, 0x02	; 2
  52:	2e d0       	rcall	.+92     	; 0xb0 <uart_transmit>
  54:	ff cf       	rjmp	.-2      	; 0x54 <main+0xc>

00000056 <__vector_13>:
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	83 b7       	in	r24, 0x33	; 51
  64:	88 7f       	andi	r24, 0xF8	; 248
  66:	83 bf       	out	0x33, r24	; 51
  68:	12 be       	out	0x32, r1	; 50
  6a:	8f 91       	pop	r24
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  74:	18 95       	reti

00000076 <__vector_14>:
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	8c b7       	in	r24, 0x3c	; 60
  86:	86 5f       	subi	r24, 0xF6	; 246
  88:	8c bf       	out	0x3c, r24	; 60
  8a:	98 b3       	in	r25, 0x18	; 24
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	89 27       	eor	r24, r25
  90:	88 bb       	out	0x18, r24	; 24
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <init_uart>:
#include <avr/interrupt.h>

#include "usart.h"

void init_uart(void) {
  UBRRH = (uint8_t)(MYUBBR >> 8);								//set baud rate
  a0:	12 b8       	out	0x02, r1	; 2
  UBRRL = (uint8_t)(MYUBBR);
  a2:	83 e3       	ldi	r24, 0x33	; 51
  a4:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1 << TXEN);											//enable transmit
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<UPM1) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0);		//enable even parity, set 8-bit character, set 1 stop bit
  aa:	86 e2       	ldi	r24, 0x26	; 38
  ac:	83 b9       	out	0x03, r24	; 3
  ae:	08 95       	ret

000000b0 <uart_transmit>:
}

void uart_transmit(uint8_t command) { //, uint8_t data
  while (!(UCSRA & (1<<UDRE)));
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <uart_transmit>
  UDR = command;
  b4:	8c b9       	out	0x0c, r24	; 12
  b6:	08 95       	ret

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
