
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000396  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000132b  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  00001917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c20  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00002ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  00003294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adb  00000000  00000000  000037d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000042ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	48 c0       	rjmp	.+144    	; 0x96 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	8b c0       	rjmp	.+278    	; 0x124 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	9b c1       	rjmp	.+822    	; 0x348 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	b1 c0       	rjmp	.+354    	; 0x17a <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 36       	cpi	r26, 0x65	; 101
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6f d1       	rcall	.+734    	; 0x322 <main>
  44:	a6 c1       	rjmp	.+844    	; 0x392 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
}


ISR(INT0_vect){		//External interrupt0 service routine
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
		
}
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

0000005c <__vector_4>:

ISR(TIMER1_COMPA_vect){
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
	
}
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

00000070 <gauge_init>:
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
	MCUCR |= (1<<ISC11);
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
*/	
	PORT(_PORT) &= ~(1<<L0); // wat doet led in het begin?
  70:	c4 98       	cbi	0x18, 4	; 24
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
  72:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);
  74:	85 e0       	ldi	r24, 0x05	; 5
  76:	83 bf       	out	0x33, r24	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
  78:	89 b7       	in	r24, 0x39	; 57
  7a:	82 60       	ori	r24, 0x02	; 2
  7c:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
  7e:	8f b7       	in	r24, 0x3f	; 63
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8f bf       	out	0x3f, r24	; 63
  84:	08 95       	ret

00000086 <i2c_send_arp_gauge>:
}

void i2c_send_arp_gauge(){ // naam aanpassen?
	uint8_t temp;
	i2c_send_start();
  86:	da d0       	rcall	.+436    	; 0x23c <i2c_send_start>
	i2c_send_data(ARA<<1);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	08 d1       	rcall	.+528    	; 0x29c <i2c_send_data>
	i2c_get_ack();						
  8c:	f8 d0       	rcall	.+496    	; 0x27e <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
  8e:	36 d1       	rcall	.+620    	; 0x2fc <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
  90:	ef d0       	rcall	.+478    	; 0x270 <i2c_send_nack>
	i2c_send_stop();
  92:	e7 d0       	rcall	.+462    	; 0x262 <i2c_send_stop>
  94:	08 95       	ret

00000096 <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){ // Als led is aan of knipperend , maar dat is geen 1 en 0 dus even kijken hoe detecteren
  b8:	03 b6       	in	r0, 0x33	; 51
  ba:	02 fe       	sbrs	r0, 2
  bc:	13 c0       	rjmp	.+38     	; 0xe4 <__stack+0x5>
  be:	03 b6       	in	r0, 0x33	; 51
  c0:	00 fe       	sbrs	r0, 0
  c2:	10 c0       	rjmp	.+32     	; 0xe4 <__stack+0x5>
		TCCR0B &= ~((1<<CS02)|(1<<CS00)); // 000 disconnect clock
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	8a 7f       	andi	r24, 0xFA	; 250
  c8:	83 bf       	out	0x33, r24	; 51
		PORT(_PORT) &= ~(1<<L0);
  ca:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	84 e6       	ldi	r24, 0x64	; 100
  d4:	04 d1       	rcall	.+520    	; 0x2de <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
  d6:	2c e1       	ldi	r18, 0x1C	; 28
  d8:	4c e7       	ldi	r20, 0x7C	; 124
  da:	66 e0       	ldi	r22, 0x06	; 6
  dc:	84 e6       	ldi	r24, 0x64	; 100
  de:	ff d0       	rcall	.+510    	; 0x2de <i2c_burst_write>
		i2c_send_arp_gauge();	
  e0:	d2 df       	rcall	.-92     	; 0x86 <i2c_send_arp_gauge>
  e2:	0f c0       	rjmp	.+30     	; 0x102 <__stack+0x23>
	}else{
		TCNT0 = 0x00;
  e4:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00); // 101 is prescaler van 1024
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	f4 d0       	rcall	.+488    	; 0x2de <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
  f6:	2d ef       	ldi	r18, 0xFD	; 253
  f8:	4d e7       	ldi	r20, 0x7D	; 125
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	84 e6       	ldi	r24, 0x64	; 100
  fe:	ef d0       	rcall	.+478    	; 0x2de <i2c_burst_write>
		i2c_send_arp_gauge();
 100:	c2 df       	rcall	.-124    	; 0x86 <i2c_send_arp_gauge>
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_6>:

ISR(TIMER0_OVF_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	if(count == 17){
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 136:	81 31       	cpi	r24, 0x11	; 17
 138:	39 f4       	brne	.+14     	; 0x148 <__vector_6+0x24>
		PORT(_PORT) ^= (1<<L0);
 13a:	98 b3       	in	r25, 0x18	; 24
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	89 27       	eor	r24, r25
 140:	88 bb       	out	0x18, r24	; 24
		count = 0;
 142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 146:	03 c0       	rjmp	.+6      	; 0x14e <__vector_6+0x2a>
	}else{
		count++;
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <gpio_init>:
#include "acc.h"

volatile uint8_t old_buttons = 0x0;

void gpio_init(){
	DDR(_PORT) &= ~((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));				//set buttons as input
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	87 bb       	out	0x17, r24	; 23
	PORT(_PORT) |= (1<<L0);											//enable pull up on led
 162:	c4 9a       	sbi	0x18, 4	; 24
	DDR(_PORT) |= (1<<L0);											//set led as output
 164:	bc 9a       	sbi	0x17, 4	; 23
	PCMSK0 |= ((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));					//set buttons as source for pin change interrupt 0
 166:	80 b5       	in	r24, 0x20	; 32
 168:	8f 60       	ori	r24, 0x0F	; 15
 16a:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);											//enable pin change interrupt 0
 16c:	8b b7       	in	r24, 0x3b	; 59
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);											//enable interrupts I in global status register
 172:	8f b7       	in	r24, 0x3f	; 63
 174:	80 68       	ori	r24, 0x80	; 128
 176:	8f bf       	out	0x3f, r24	; 63
 178:	08 95       	ret

0000017a <__vector_11>:
}

ISR(PCINT0_vect){		
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	uint8_t new_buttons = (PIN(_PORT) & 0xF);
 1a0:	d6 b3       	in	r29, 0x16	; 22
 1a2:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 1a4:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <old_buttons>
 1a8:	cd 27       	eor	r28, r29
	if((temp & (1<<B0)) && (old_buttons & (1<<B0))){
 1aa:	c0 ff       	sbrs	r28, 0
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <__vector_11+0x4a>
 1ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 1b2:	80 ff       	sbrs	r24, 0
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <__vector_11+0x4a>
		PORT(_PORT) ^= (1<<L0);
 1b6:	98 b3       	in	r25, 0x18	; 24
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	89 27       	eor	r24, r25
 1bc:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0xBB, 0xBB);
 1be:	6b eb       	ldi	r22, 0xBB	; 187
 1c0:	8b eb       	ldi	r24, 0xBB	; 187
 1c2:	b5 d0       	rcall	.+362    	; 0x32e <uart_put_com>
	}
	if((temp & (1<<B1)) && (old_buttons & (1<<B1))){
 1c4:	c1 ff       	sbrs	r28, 1
 1c6:	0b c0       	rjmp	.+22     	; 0x1de <__vector_11+0x64>
 1c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 1cc:	81 ff       	sbrs	r24, 1
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__vector_11+0x64>
		PORT(_PORT) ^= (1<<L0);
 1d0:	98 b3       	in	r25, 0x18	; 24
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	89 27       	eor	r24, r25
 1d6:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x44, 0x44);
 1d8:	64 e4       	ldi	r22, 0x44	; 68
 1da:	84 e4       	ldi	r24, 0x44	; 68
 1dc:	a8 d0       	rcall	.+336    	; 0x32e <uart_put_com>
	}
	if((temp & (1<<B2)) && (old_buttons & (1<<B2))){
 1de:	c2 ff       	sbrs	r28, 2
 1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <__vector_11+0x7e>
 1e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 1e6:	82 ff       	sbrs	r24, 2
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <__vector_11+0x7e>
		PORT(_PORT) ^= (1<<L0);
 1ea:	98 b3       	in	r25, 0x18	; 24
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	89 27       	eor	r24, r25
 1f0:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x00, 0x00);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	9b d0       	rcall	.+310    	; 0x32e <uart_put_com>
	}
	if((temp & (1<<B3)) && (old_buttons & (1<<B3))){
 1f8:	c3 ff       	sbrs	r28, 3
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <__vector_11+0x98>
 1fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 200:	83 ff       	sbrs	r24, 3
 202:	07 c0       	rjmp	.+14     	; 0x212 <__vector_11+0x98>
		PORT(_PORT) ^= (1<<L0);
 204:	98 b3       	in	r25, 0x18	; 24
 206:	80 e1       	ldi	r24, 0x10	; 16
 208:	89 27       	eor	r24, r25
 20a:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x99, 0x99);
 20c:	69 e9       	ldi	r22, 0x99	; 153
 20e:	89 e9       	ldi	r24, 0x99	; 153
 210:	8e d0       	rcall	.+284    	; 0x32e <uart_put_com>
		//acc_calibrate();
	}
	old_buttons = new_buttons;
 212:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <old_buttons>
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <i2c_send_start>:
void i2c_single_write(uint8_t dev_address, uint8_t reg_address, uint8_t data){
	i2c_send_reg_add(dev_address, reg_address);
	i2c_send_data(data);
	i2c_get_ack();
	i2c_send_stop();
}
 23c:	88 b3       	in	r24, 0x18	; 24
 23e:	80 6a       	ori	r24, 0xA0	; 160
 240:	88 bb       	out	0x18, r24	; 24
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	98 b3       	in	r25, 0x18	; 24
 246:	88 b3       	in	r24, 0x18	; 24
 248:	85 fb       	bst	r24, 5
 24a:	88 27       	eor	r24, r24
 24c:	80 f9       	bld	r24, 0
 24e:	82 13       	cpse	r24, r18
 250:	f9 cf       	rjmp	.-14     	; 0x244 <i2c_send_start+0x8>
 252:	99 23       	and	r25, r25
 254:	bc f7       	brge	.-18     	; 0x244 <i2c_send_start+0x8>
 256:	c5 98       	cbi	0x18, 5	; 24
 258:	00 c0       	rjmp	.+0      	; 0x25a <i2c_send_start+0x1e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <i2c_send_start+0x20>
 25c:	00 00       	nop
 25e:	c7 98       	cbi	0x18, 7	; 24
 260:	08 95       	ret

00000262 <i2c_send_stop>:
 262:	c5 98       	cbi	0x18, 5	; 24
 264:	c7 9a       	sbi	0x18, 7	; 24
 266:	00 c0       	rjmp	.+0      	; 0x268 <i2c_send_stop+0x6>
 268:	00 c0       	rjmp	.+0      	; 0x26a <i2c_send_stop+0x8>
 26a:	00 00       	nop
 26c:	c5 9a       	sbi	0x18, 5	; 24
 26e:	08 95       	ret

00000270 <i2c_send_nack>:
 270:	c5 9a       	sbi	0x18, 5	; 24
 272:	c7 9a       	sbi	0x18, 7	; 24
 274:	00 c0       	rjmp	.+0      	; 0x276 <i2c_send_nack+0x6>
 276:	00 c0       	rjmp	.+0      	; 0x278 <i2c_send_nack+0x8>
 278:	00 00       	nop
 27a:	c7 98       	cbi	0x18, 7	; 24
 27c:	08 95       	ret

0000027e <i2c_get_ack>:
 27e:	bd 98       	cbi	0x17, 5	; 23
 280:	68 9a       	sbi	0x0d, 0	; 13
 282:	00 c0       	rjmp	.+0      	; 0x284 <i2c_get_ack+0x6>
 284:	00 c0       	rjmp	.+0      	; 0x286 <i2c_get_ack+0x8>
 286:	00 00       	nop
 288:	68 9a       	sbi	0x0d, 0	; 13
 28a:	00 c0       	rjmp	.+0      	; 0x28c <i2c_get_ack+0xe>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <i2c_get_ack+0x10>
 28e:	00 00       	nop
 290:	8f b1       	in	r24, 0x0f	; 15
 292:	9f ef       	ldi	r25, 0xFF	; 255
 294:	9f b9       	out	0x0f, r25	; 15
 296:	bd 9a       	sbi	0x17, 5	; 23
 298:	81 70       	andi	r24, 0x01	; 1
 29a:	08 95       	ret

0000029c <i2c_send_data>:
 29c:	8f b9       	out	0x0f, r24	; 15
 29e:	c5 9a       	sbi	0x18, 5	; 24
 2a0:	8e b1       	in	r24, 0x0e	; 14
 2a2:	80 7f       	andi	r24, 0xF0	; 240
 2a4:	8e b9       	out	0x0e, r24	; 14
 2a6:	68 9a       	sbi	0x0d, 0	; 13
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <i2c_send_data+0xe>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <i2c_send_data+0x10>
 2ac:	00 00       	nop
 2ae:	68 9a       	sbi	0x0d, 0	; 13
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <i2c_send_data+0x16>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <i2c_send_data+0x18>
 2b4:	00 00       	nop
 2b6:	76 9b       	sbis	0x0e, 6	; 14
 2b8:	f6 cf       	rjmp	.-20     	; 0x2a6 <i2c_send_data+0xa>
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	8f b9       	out	0x0f, r24	; 15
 2be:	08 95       	ret

000002c0 <i2c_send_reg_add>:
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	d8 2f       	mov	r29, r24
 2c6:	c6 2f       	mov	r28, r22
 2c8:	b9 df       	rcall	.-142    	; 0x23c <i2c_send_start>
 2ca:	8d 2f       	mov	r24, r29
 2cc:	88 0f       	add	r24, r24
 2ce:	e6 df       	rcall	.-52     	; 0x29c <i2c_send_data>
 2d0:	d6 df       	rcall	.-84     	; 0x27e <i2c_get_ack>
 2d2:	8c 2f       	mov	r24, r28
 2d4:	e3 df       	rcall	.-58     	; 0x29c <i2c_send_data>
 2d6:	d3 df       	rcall	.-90     	; 0x27e <i2c_get_ack>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <i2c_burst_write>:

void i2c_burst_write(uint8_t dev_address, uint8_t reg_address, uint8_t data1, uint8_t data2){
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	d4 2f       	mov	r29, r20
 2e4:	c2 2f       	mov	r28, r18
	i2c_send_reg_add(dev_address, reg_address);
 2e6:	ec df       	rcall	.-40     	; 0x2c0 <i2c_send_reg_add>
	i2c_send_data(data1);
 2e8:	8d 2f       	mov	r24, r29
 2ea:	d8 df       	rcall	.-80     	; 0x29c <i2c_send_data>
	i2c_get_ack();
 2ec:	c8 df       	rcall	.-112    	; 0x27e <i2c_get_ack>
	i2c_send_data(data2);
 2ee:	8c 2f       	mov	r24, r28
 2f0:	d5 df       	rcall	.-86     	; 0x29c <i2c_send_data>
	i2c_get_ack();
 2f2:	c5 df       	rcall	.-118    	; 0x27e <i2c_get_ack>
	i2c_send_stop();
 2f4:	b6 df       	rcall	.-148    	; 0x262 <i2c_send_stop>
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <i2c_get_data>:
	USIDR = 0xFF;
}

uint8_t i2c_get_data(){
	uint8_t ret;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 2fc:	bd 98       	cbi	0x17, 5	; 23
	USISR &= ~(0xF << USICNT0);					//reset counter
 2fe:	8e b1       	in	r24, 0x0e	; 14
 300:	80 7f       	andi	r24, 0xF0	; 240
 302:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 304:	68 9a       	sbi	0x0d, 0	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	00 c0       	rjmp	.+0      	; 0x308 <i2c_get_data+0xc>
 308:	00 c0       	rjmp	.+0      	; 0x30a <i2c_get_data+0xe>
 30a:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 30c:	68 9a       	sbi	0x0d, 0	; 13
 30e:	00 c0       	rjmp	.+0      	; 0x310 <i2c_get_data+0x14>
 310:	00 c0       	rjmp	.+0      	; 0x312 <i2c_get_data+0x16>
 312:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 314:	76 9b       	sbis	0x0e, 6	; 14
 316:	f6 cf       	rjmp	.-20     	; 0x304 <i2c_get_data+0x8>
	ret = USIDR;
 318:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 31a:	9f ef       	ldi	r25, 0xFF	; 255
 31c:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 31e:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 320:	08 95       	ret

00000322 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 326:	16 bc       	out	0x26, r1	; 38
	
	gpio_init();
 328:	19 df       	rcall	.-462    	; 0x15c <gpio_init>
	gauge_init();
 32a:	a2 de       	rcall	.-700    	; 0x70 <gauge_init>
 32c:	ff cf       	rjmp	.-2      	; 0x32c <main+0xa>

0000032e <uart_put_com>:
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
}

void uart_put_com(uint8_t command, uint8_t data){
	while(size > 0);
 32e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <size>
 332:	91 11       	cpse	r25, r1
 334:	fc cf       	rjmp	.-8      	; 0x32e <uart_put_com>
	tx_buffer[1] = command;
 336:	e3 e6       	ldi	r30, 0x63	; 99
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 33c:	60 83       	st	Z, r22
	size = 2;
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <size>
	UCSRB |= (1<<UDRIE);
 344:	55 9a       	sbi	0x0a, 5	; 10
 346:	08 95       	ret

00000348 <__vector_8>:
}

ISR(USART_UDRE_vect){
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	if(size > 0){
 358:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <size>
 35c:	88 23       	and	r24, r24
 35e:	61 f0       	breq	.+24     	; 0x378 <__vector_8+0x30>
		UDR = tx_buffer[size-1];
 360:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <size>
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ee 59       	subi	r30, 0x9E	; 158
 368:	ff 4f       	sbci	r31, 0xFF	; 255
 36a:	80 81       	ld	r24, Z
 36c:	8c b9       	out	0x0c, r24	; 12
		size--;
 36e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <size>
 372:	81 50       	subi	r24, 0x01	; 1
 374:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <size>
	}
	if(size == 0){
 378:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <size>
 37c:	81 11       	cpse	r24, r1
 37e:	01 c0       	rjmp	.+2      	; 0x382 <__vector_8+0x3a>
		UCSRB &= ~(1<<UDRIE);
 380:	55 98       	cbi	0x0a, 5	; 10
	}
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	8f 91       	pop	r24
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
