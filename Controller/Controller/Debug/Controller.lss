
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ef  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c3  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c0  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	b6 c0       	rjmp	.+364    	; 0x17e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	31 c0       	rjmp	.+98     	; 0x7a <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	7f d0       	rcall	.+254    	; 0x142 <main>
  44:	c1 c0       	rjmp	.+386    	; 0x1c8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_2>:
	else{
		PORT(_PORT) |= (1<<L0);
	}
}

ISR(INT1_vect){							//External interrupt1 service routine
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
	
}
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

0000005c <gpio_init>:
#include "acc.h"

volatile uint8_t old_buttons = 0x0;

void gpio_init(){
	DDR(_PORT) &= ~((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));				//set buttons as input
  5c:	87 b3       	in	r24, 0x17	; 23
  5e:	80 7f       	andi	r24, 0xF0	; 240
  60:	87 bb       	out	0x17, r24	; 23
	PORT(_PORT) |= (1<<L0);											//enable pull up on led
  62:	c4 9a       	sbi	0x18, 4	; 24
	DDR(_PORT) |= (1<<L0);											//set led as output
  64:	bc 9a       	sbi	0x17, 4	; 23
	PCMSK0 |= ((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));					//set buttons as source for pin change interrupt 0
  66:	80 b5       	in	r24, 0x20	; 32
  68:	8f 60       	ori	r24, 0x0F	; 15
  6a:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);											//enable pin change interrupt 0
  6c:	8b b7       	in	r24, 0x3b	; 59
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);											//enable interrupts I in global status register
  72:	8f b7       	in	r24, 0x3f	; 63
  74:	80 68       	ori	r24, 0x80	; 128
  76:	8f bf       	out	0x3f, r24	; 63
  78:	08 95       	ret

0000007a <__vector_11>:
}

ISR(PCINT0_vect){
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	2f 93       	push	r18
  86:	3f 93       	push	r19
  88:	4f 93       	push	r20
  8a:	5f 93       	push	r21
  8c:	6f 93       	push	r22
  8e:	7f 93       	push	r23
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	af 93       	push	r26
  96:	bf 93       	push	r27
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));					//stop timer
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	88 7f       	andi	r24, 0xF8	; 248
  a4:	83 bf       	out	0x33, r24	; 51
		
	uint8_t new_buttons = (PIN(_PORT) & 0xF);
  a6:	d6 b3       	in	r29, 0x16	; 22
  a8:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
  aa:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <_edata>
  ae:	cd 27       	eor	r28, r29
	if((temp & (1<<B0)) && (old_buttons & (1<<B0))){
  b0:	c0 ff       	sbrs	r28, 0
  b2:	0b c0       	rjmp	.+22     	; 0xca <__vector_11+0x50>
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b8:	80 ff       	sbrs	r24, 0
  ba:	07 c0       	rjmp	.+14     	; 0xca <__vector_11+0x50>
		PORT(_PORT) ^= (1<<L0);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	89 27       	eor	r24, r25
  c2:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0xBB, 0xBB);
  c4:	6b eb       	ldi	r22, 0xBB	; 187
  c6:	8b eb       	ldi	r24, 0xBB	; 187
  c8:	4d d0       	rcall	.+154    	; 0x164 <uart_put_com>
	}
	if((temp & (1<<B1)) && (old_buttons & (1<<B1))){
  ca:	c1 ff       	sbrs	r28, 1
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <__stack+0x5>
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d2:	81 ff       	sbrs	r24, 1
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <__stack+0x5>
		PORT(_PORT) ^= (1<<L0);
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	89 27       	eor	r24, r25
  dc:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x44, 0x44);
  de:	64 e4       	ldi	r22, 0x44	; 68
  e0:	84 e4       	ldi	r24, 0x44	; 68
  e2:	40 d0       	rcall	.+128    	; 0x164 <uart_put_com>
	}
	if((temp & (1<<B2)) && (old_buttons & (1<<B2))){
  e4:	c2 ff       	sbrs	r28, 2
  e6:	0b c0       	rjmp	.+22     	; 0xfe <__stack+0x1f>
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ec:	82 ff       	sbrs	r24, 2
  ee:	07 c0       	rjmp	.+14     	; 0xfe <__stack+0x1f>
		PORT(_PORT) ^= (1<<L0);
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	89 27       	eor	r24, r25
  f6:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x00, 0x00);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	33 d0       	rcall	.+102    	; 0x164 <uart_put_com>
	}
	if((temp & (1<<B3)) && (old_buttons & (1<<B3))){
  fe:	c3 ff       	sbrs	r28, 3
 100:	0b c0       	rjmp	.+22     	; 0x118 <__stack+0x39>
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 106:	83 ff       	sbrs	r24, 3
 108:	07 c0       	rjmp	.+14     	; 0x118 <__stack+0x39>
		PORT(_PORT) ^= (1<<L0);
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	89 27       	eor	r24, r25
 110:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x99, 0x99);
 112:	69 e9       	ldi	r22, 0x99	; 153
 114:	89 e9       	ldi	r24, 0x99	; 153
 116:	26 d0       	rcall	.+76     	; 0x164 <uart_put_com>
		//acc_calibrate();
	}
	old_buttons = new_buttons;
 118:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <_edata>
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 146:	16 bc       	out	0x26, r1	; 38
	
	gpio_init();
 148:	89 df       	rcall	.-238    	; 0x5c <gpio_init>
	uart_init();
 14a:	01 d0       	rcall	.+2      	; 0x14e <uart_init>
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0xa>

0000014e <uart_init>:

volatile static uint8_t tx_buffer[2];
volatile static uint8_t size = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 14e:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
 158:	86 e2       	ldi	r24, 0x26	; 38
 15a:	83 b9       	out	0x03, r24	; 3
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 15c:	8f b7       	in	r24, 0x3f	; 63
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	8f bf       	out	0x3f, r24	; 63
 162:	08 95       	ret

00000164 <uart_put_com>:
}

void uart_put_com(uint8_t command, uint8_t data){
	while(size > 0);
 164:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <size>
 168:	91 11       	cpse	r25, r1
 16a:	fc cf       	rjmp	.-8      	; 0x164 <uart_put_com>
	tx_buffer[1] = command;
 16c:	e2 e6       	ldi	r30, 0x62	; 98
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 172:	60 83       	st	Z, r22
	size = 2;
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <size>
	UCSRB |= (1<<UDRIE);
 17a:	55 9a       	sbi	0x0a, 5	; 10
 17c:	08 95       	ret

0000017e <__vector_8>:
}

ISR(USART_UDRE_vect){
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	if(size > 0){
 18e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
 192:	88 23       	and	r24, r24
 194:	61 f0       	breq	.+24     	; 0x1ae <__vector_8+0x30>
		UDR = tx_buffer[size-1];
 196:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <size>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ef 59       	subi	r30, 0x9F	; 159
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	80 81       	ld	r24, Z
 1a2:	8c b9       	out	0x0c, r24	; 12
		size--;
 1a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
 1a8:	81 50       	subi	r24, 0x01	; 1
 1aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <size>
	}
	if(size == 0){
 1ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
 1b2:	81 11       	cpse	r24, r1
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <__vector_8+0x3a>
		UCSRB &= ~(1<<UDRIE);
 1b6:	55 98       	cbi	0x0a, 5	; 10
	}
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
