
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000076  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063f  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000533  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032a  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032e  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	14 d0       	rcall	.+40     	; 0x6c <main>
  44:	16 c0       	rjmp	.+44     	; 0x72 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <i2c_init>:
}

void i2c_send_start(){
	PORTB &= ~(1<<PINB5);			//force SDA low
	while(PORTB & (1<<PINB5));		//wait for SDA low
	PORTB &= ~(1<<PINB7);			//force SCL low
  48:	80 ea       	ldi	r24, 0xA0	; 160
  4a:	88 bb       	out	0x18, r24	; 24
  4c:	87 bb       	out	0x17, r24	; 23
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	8f b9       	out	0x0f, r24	; 15
  52:	8a e2       	ldi	r24, 0x2A	; 42
  54:	8d b9       	out	0x0d, r24	; 13
  56:	80 ef       	ldi	r24, 0xF0	; 240
  58:	8e b9       	out	0x0e, r24	; 14
  5a:	08 95       	ret

0000005c <i2c_send_stop>:

}

void i2c_send_stop(){
	PORTB &= ~(1<<PINB5);			//force SDA low
  5c:	c5 98       	cbi	0x18, 5	; 24
	while(PORTB & (1<<PINB5));		//wait for SDA low
  5e:	c5 99       	sbic	0x18, 5	; 24
  60:	fe cf       	rjmp	.-4      	; 0x5e <i2c_send_stop+0x2>
	PORTB |= (1<<PINB7);			//release SCL
  62:	c7 9a       	sbi	0x18, 7	; 24
	while(!(PORTB & (1<<PINB7)));	//wait for SCL high
  64:	c7 9b       	sbis	0x18, 7	; 24
  66:	fe cf       	rjmp	.-4      	; 0x64 <i2c_send_stop+0x8>
	PORTB |= (1<<PINB5);			//release SDA
  68:	c5 9a       	sbi	0x18, 5	; 24
  6a:	08 95       	ret

0000006c <main>:
#include "i2c.h"
#include "acc.h"

int main(void)
{
	i2c_init();
  6c:	ed df       	rcall	.-38     	; 0x48 <i2c_init>
	i2c_send_stop();
  6e:	f6 df       	rcall	.-20     	; 0x5c <i2c_send_stop>
  70:	ff cf       	rjmp	.-2      	; 0x70 <main+0x4>

00000072 <_exit>:
  72:	f8 94       	cli

00000074 <__stop_program>:
  74:	ff cf       	rjmp	.-2      	; 0x74 <__stop_program>
