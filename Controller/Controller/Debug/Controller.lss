
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001425  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a04  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd3  00000000  00000000  00002485  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054d  00000000  00000000  0000350c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b23  00000000  00000000  00003a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000457c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	5a c0       	rjmp	.+180    	; 0xba <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	9d c0       	rjmp	.+314    	; 0x148 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	d3 c1       	rjmp	.+934    	; 0x3b8 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	c3 c0       	rjmp	.+390    	; 0x19e <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 36       	cpi	r26, 0x65	; 101
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	8e d1       	rcall	.+796    	; 0x360 <main>
  44:	de c1       	rjmp	.+956    	; 0x402 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
}


ISR(INT0_vect){		//External interrupt0 service routine
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
		
}
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

0000005c <__vector_4>:

ISR(TIMER1_COMPA_vect){
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
	
}
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

00000070 <gauge_init>:
#include "gpio.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_init();
  70:	f7 d0       	rcall	.+494    	; 0x260 <i2c_init>
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
  72:	2f ef       	ldi	r18, 0xFF	; 255
  74:	4f ef       	ldi	r20, 0xFF	; 255
  76:	62 e0       	ldi	r22, 0x02	; 2
  78:	84 e6       	ldi	r24, 0x64	; 100
  7a:	50 d1       	rcall	.+672    	; 0x31c <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
  7c:	2c e1       	ldi	r18, 0x1C	; 28
  7e:	4c e7       	ldi	r20, 0x7C	; 124
  80:	66 e0       	ldi	r22, 0x06	; 6
  82:	84 e6       	ldi	r24, 0x64	; 100
  84:	4b d1       	rcall	.+662    	; 0x31c <i2c_burst_write>
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
  86:	85 b7       	in	r24, 0x35	; 53
  88:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	88 60       	ori	r24, 0x08	; 8
  8e:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 68       	ori	r24, 0x80	; 128
  94:	8b bf       	out	0x3b, r24	; 59
	
	PORT(_PORT) &= ~(1<<L0); // wat doet led in het begin?
  96:	c4 98       	cbi	0x18, 4	; 24
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
  98:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
  9a:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
  9c:	89 b7       	in	r24, 0x39	; 57
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
  a2:	8f b7       	in	r24, 0x3f	; 63
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8f bf       	out	0x3f, r24	; 63
  a8:	08 95       	ret

000000aa <i2c_send_arp_gauge>:
}

void i2c_send_arp_gauge(){ // naam aanpassen?
	uint8_t temp;
	i2c_send_start();
  aa:	e7 d0       	rcall	.+462    	; 0x27a <i2c_send_start>
	i2c_send_data(ARA<<1);
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	15 d1       	rcall	.+554    	; 0x2da <i2c_send_data>
	i2c_get_ack();						
  b0:	05 d1       	rcall	.+522    	; 0x2bc <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
  b2:	43 d1       	rcall	.+646    	; 0x33a <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
  b4:	fc d0       	rcall	.+504    	; 0x2ae <i2c_send_nack>
	i2c_send_stop();
  b6:	f4 d0       	rcall	.+488    	; 0x2a0 <i2c_send_stop>
  b8:	08 95       	ret

000000ba <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){ // Als led is aan of knipperend , maar dat is geen 1 en 0 dus even kijken hoe detecteren
  dc:	03 b6       	in	r0, 0x33	; 51
  de:	02 fe       	sbrs	r0, 2
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__stack+0x29>
  e2:	03 b6       	in	r0, 0x33	; 51
  e4:	00 fe       	sbrs	r0, 0
  e6:	10 c0       	rjmp	.+32     	; 0x108 <__stack+0x29>
		TCCR0B &= ~((1<<CS02)|(1<<CS00)); // 000 disconnect clock
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	8a 7f       	andi	r24, 0xFA	; 250
  ec:	83 bf       	out	0x33, r24	; 51
		PORT(_PORT) &= ~(1<<L0);
  ee:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	11 d1       	rcall	.+546    	; 0x31c <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
  fa:	2c e1       	ldi	r18, 0x1C	; 28
  fc:	4c e7       	ldi	r20, 0x7C	; 124
  fe:	66 e0       	ldi	r22, 0x06	; 6
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	0c d1       	rcall	.+536    	; 0x31c <i2c_burst_write>
		i2c_send_arp_gauge();	
 104:	d2 df       	rcall	.-92     	; 0xaa <i2c_send_arp_gauge>
 106:	0f c0       	rjmp	.+30     	; 0x126 <__stack+0x47>
	}else{
		TCNT0 = 0x00;
 108:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00); // 101 is prescaler van 1024
 10a:	83 b7       	in	r24, 0x33	; 51
 10c:	85 60       	ori	r24, 0x05	; 5
 10e:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	66 e0       	ldi	r22, 0x06	; 6
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	01 d1       	rcall	.+514    	; 0x31c <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 11a:	2d ef       	ldi	r18, 0xFD	; 253
 11c:	4d e7       	ldi	r20, 0x7D	; 125
 11e:	64 e0       	ldi	r22, 0x04	; 4
 120:	84 e6       	ldi	r24, 0x64	; 100
 122:	fc d0       	rcall	.+504    	; 0x31c <i2c_burst_write>
		i2c_send_arp_gauge();
 124:	c2 df       	rcall	.-124    	; 0xaa <i2c_send_arp_gauge>
	}
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_6>:

ISR(TIMER0_OVF_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
	if(count == 17){
 156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 15a:	81 31       	cpi	r24, 0x11	; 17
 15c:	39 f4       	brne	.+14     	; 0x16c <__vector_6+0x24>
		PORT(_PORT) ^= (1<<L0);
 15e:	98 b3       	in	r25, 0x18	; 24
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	89 27       	eor	r24, r25
 164:	88 bb       	out	0x18, r24	; 24
		count = 0;
 166:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 16a:	03 c0       	rjmp	.+6      	; 0x172 <__vector_6+0x2a>
	}else{
		count++;
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <gpio_init>:
#include "acc.h"

volatile uint8_t old_buttons = 0x0;

void gpio_init(){
	DDR(_PORT) &= ~((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));				//set buttons as input
 180:	87 b3       	in	r24, 0x17	; 23
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	87 bb       	out	0x17, r24	; 23
	PORT(_PORT) |= (1<<L0);											//enable pull up on led
 186:	c4 9a       	sbi	0x18, 4	; 24
	DDR(_PORT) |= (1<<L0);											//set led as output
 188:	bc 9a       	sbi	0x17, 4	; 23
	PCMSK0 |= ((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));					//set buttons as source for pin change interrupt 0
 18a:	80 b5       	in	r24, 0x20	; 32
 18c:	8f 60       	ori	r24, 0x0F	; 15
 18e:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);											//enable pin change interrupt 0
 190:	8b b7       	in	r24, 0x3b	; 59
 192:	80 62       	ori	r24, 0x20	; 32
 194:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);											//enable interrupts I in global status register
 196:	8f b7       	in	r24, 0x3f	; 63
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	8f bf       	out	0x3f, r24	; 63
 19c:	08 95       	ret

0000019e <__vector_11>:
}

ISR(PCINT0_vect){		
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	uint8_t new_buttons = (PIN(_PORT) & 0xF);
 1c4:	d6 b3       	in	r29, 0x16	; 22
 1c6:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 1c8:	c0 91 61 00 	lds	r28, 0x0061	; 0x800061 <old_buttons>
 1cc:	cd 27       	eor	r28, r29
	if((temp & (1<<B0)) && (old_buttons & (1<<B0))){
 1ce:	c0 ff       	sbrs	r28, 0
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <__vector_11+0x4a>
 1d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 1d6:	80 ff       	sbrs	r24, 0
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <__vector_11+0x4a>
		PORT(_PORT) ^= (1<<L0);
 1da:	98 b3       	in	r25, 0x18	; 24
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	89 27       	eor	r24, r25
 1e0:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0xBB, 0xBB);
 1e2:	6b eb       	ldi	r22, 0xBB	; 187
 1e4:	8b eb       	ldi	r24, 0xBB	; 187
 1e6:	db d0       	rcall	.+438    	; 0x39e <uart_put_com>
	}
	if((temp & (1<<B1)) && (old_buttons & (1<<B1))){
 1e8:	c1 ff       	sbrs	r28, 1
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <__vector_11+0x64>
 1ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 1f0:	81 ff       	sbrs	r24, 1
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <__vector_11+0x64>
		PORT(_PORT) ^= (1<<L0);
 1f4:	98 b3       	in	r25, 0x18	; 24
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	89 27       	eor	r24, r25
 1fa:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x44, 0x44);
 1fc:	64 e4       	ldi	r22, 0x44	; 68
 1fe:	84 e4       	ldi	r24, 0x44	; 68
 200:	ce d0       	rcall	.+412    	; 0x39e <uart_put_com>
	}
	if((temp & (1<<B2)) && (old_buttons & (1<<B2))){
 202:	c2 ff       	sbrs	r28, 2
 204:	0b c0       	rjmp	.+22     	; 0x21c <__vector_11+0x7e>
 206:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 20a:	82 ff       	sbrs	r24, 2
 20c:	07 c0       	rjmp	.+14     	; 0x21c <__vector_11+0x7e>
		PORT(_PORT) ^= (1<<L0);
 20e:	98 b3       	in	r25, 0x18	; 24
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	89 27       	eor	r24, r25
 214:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x00, 0x00);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	c1 d0       	rcall	.+386    	; 0x39e <uart_put_com>
	}
	if((temp & (1<<B3)) && (old_buttons & (1<<B3))){
 21c:	c3 ff       	sbrs	r28, 3
 21e:	0b c0       	rjmp	.+22     	; 0x236 <__vector_11+0x98>
 220:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <old_buttons>
 224:	83 ff       	sbrs	r24, 3
 226:	07 c0       	rjmp	.+14     	; 0x236 <__vector_11+0x98>
		PORT(_PORT) ^= (1<<L0);
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	89 27       	eor	r24, r25
 22e:	88 bb       	out	0x18, r24	; 24
		uart_put_com(0x99, 0x99);
 230:	69 e9       	ldi	r22, 0x99	; 153
 232:	89 e9       	ldi	r24, 0x99	; 153
 234:	b4 d0       	rcall	.+360    	; 0x39e <uart_put_com>
		//acc_calibrate();
	}
	old_buttons = new_buttons;
 236:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <old_buttons>
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <i2c_init>:
void i2c_single_write(uint8_t dev_address, uint8_t reg_address, uint8_t data){
	i2c_send_reg_add(dev_address, reg_address);
	i2c_send_data(data);
	i2c_get_ack();
	i2c_send_stop();
}
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	8f b9       	out	0x0f, r24	; 15
 264:	88 b3       	in	r24, 0x18	; 24
 266:	80 6a       	ori	r24, 0xA0	; 160
 268:	88 bb       	out	0x18, r24	; 24
 26a:	87 b3       	in	r24, 0x17	; 23
 26c:	80 6a       	ori	r24, 0xA0	; 160
 26e:	87 bb       	out	0x17, r24	; 23
 270:	8a e2       	ldi	r24, 0x2A	; 42
 272:	8d b9       	out	0x0d, r24	; 13
 274:	80 ef       	ldi	r24, 0xF0	; 240
 276:	8e b9       	out	0x0e, r24	; 14
 278:	08 95       	ret

0000027a <i2c_send_start>:
 27a:	88 b3       	in	r24, 0x18	; 24
 27c:	80 6a       	ori	r24, 0xA0	; 160
 27e:	88 bb       	out	0x18, r24	; 24
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	98 b3       	in	r25, 0x18	; 24
 284:	88 b3       	in	r24, 0x18	; 24
 286:	85 fb       	bst	r24, 5
 288:	88 27       	eor	r24, r24
 28a:	80 f9       	bld	r24, 0
 28c:	82 13       	cpse	r24, r18
 28e:	f9 cf       	rjmp	.-14     	; 0x282 <i2c_send_start+0x8>
 290:	99 23       	and	r25, r25
 292:	bc f7       	brge	.-18     	; 0x282 <i2c_send_start+0x8>
 294:	c5 98       	cbi	0x18, 5	; 24
 296:	00 c0       	rjmp	.+0      	; 0x298 <i2c_send_start+0x1e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <i2c_send_start+0x20>
 29a:	00 00       	nop
 29c:	c7 98       	cbi	0x18, 7	; 24
 29e:	08 95       	ret

000002a0 <i2c_send_stop>:
 2a0:	c5 98       	cbi	0x18, 5	; 24
 2a2:	c7 9a       	sbi	0x18, 7	; 24
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <i2c_send_stop+0x6>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <i2c_send_stop+0x8>
 2a8:	00 00       	nop
 2aa:	c5 9a       	sbi	0x18, 5	; 24
 2ac:	08 95       	ret

000002ae <i2c_send_nack>:
 2ae:	c5 9a       	sbi	0x18, 5	; 24
 2b0:	c7 9a       	sbi	0x18, 7	; 24
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <i2c_send_nack+0x6>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <i2c_send_nack+0x8>
 2b6:	00 00       	nop
 2b8:	c7 98       	cbi	0x18, 7	; 24
 2ba:	08 95       	ret

000002bc <i2c_get_ack>:
 2bc:	bd 98       	cbi	0x17, 5	; 23
 2be:	68 9a       	sbi	0x0d, 0	; 13
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <i2c_get_ack+0x6>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <i2c_get_ack+0x8>
 2c4:	00 00       	nop
 2c6:	68 9a       	sbi	0x0d, 0	; 13
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <i2c_get_ack+0xe>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <i2c_get_ack+0x10>
 2cc:	00 00       	nop
 2ce:	8f b1       	in	r24, 0x0f	; 15
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	9f b9       	out	0x0f, r25	; 15
 2d4:	bd 9a       	sbi	0x17, 5	; 23
 2d6:	81 70       	andi	r24, 0x01	; 1
 2d8:	08 95       	ret

000002da <i2c_send_data>:
 2da:	8f b9       	out	0x0f, r24	; 15
 2dc:	c5 9a       	sbi	0x18, 5	; 24
 2de:	8e b1       	in	r24, 0x0e	; 14
 2e0:	80 7f       	andi	r24, 0xF0	; 240
 2e2:	8e b9       	out	0x0e, r24	; 14
 2e4:	68 9a       	sbi	0x0d, 0	; 13
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <i2c_send_data+0xe>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <i2c_send_data+0x10>
 2ea:	00 00       	nop
 2ec:	68 9a       	sbi	0x0d, 0	; 13
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <i2c_send_data+0x16>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <i2c_send_data+0x18>
 2f2:	00 00       	nop
 2f4:	76 9b       	sbis	0x0e, 6	; 14
 2f6:	f6 cf       	rjmp	.-20     	; 0x2e4 <i2c_send_data+0xa>
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	8f b9       	out	0x0f, r24	; 15
 2fc:	08 95       	ret

000002fe <i2c_send_reg_add>:
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	d8 2f       	mov	r29, r24
 304:	c6 2f       	mov	r28, r22
 306:	b9 df       	rcall	.-142    	; 0x27a <i2c_send_start>
 308:	8d 2f       	mov	r24, r29
 30a:	88 0f       	add	r24, r24
 30c:	e6 df       	rcall	.-52     	; 0x2da <i2c_send_data>
 30e:	d6 df       	rcall	.-84     	; 0x2bc <i2c_get_ack>
 310:	8c 2f       	mov	r24, r28
 312:	e3 df       	rcall	.-58     	; 0x2da <i2c_send_data>
 314:	d3 df       	rcall	.-90     	; 0x2bc <i2c_get_ack>
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <i2c_burst_write>:

void i2c_burst_write(uint8_t dev_address, uint8_t reg_address, uint8_t data1, uint8_t data2){
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	d4 2f       	mov	r29, r20
 322:	c2 2f       	mov	r28, r18
	i2c_send_reg_add(dev_address, reg_address);
 324:	ec df       	rcall	.-40     	; 0x2fe <i2c_send_reg_add>
	i2c_send_data(data1);
 326:	8d 2f       	mov	r24, r29
 328:	d8 df       	rcall	.-80     	; 0x2da <i2c_send_data>
	i2c_get_ack();
 32a:	c8 df       	rcall	.-112    	; 0x2bc <i2c_get_ack>
	i2c_send_data(data2);
 32c:	8c 2f       	mov	r24, r28
 32e:	d5 df       	rcall	.-86     	; 0x2da <i2c_send_data>
	i2c_get_ack();
 330:	c5 df       	rcall	.-118    	; 0x2bc <i2c_get_ack>
	i2c_send_stop();
 332:	b6 df       	rcall	.-148    	; 0x2a0 <i2c_send_stop>
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <i2c_get_data>:
	USIDR = 0xFF;
}

uint8_t i2c_get_data(){
	uint8_t ret;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 33a:	bd 98       	cbi	0x17, 5	; 23
	USISR &= ~(0xF << USICNT0);					//reset counter
 33c:	8e b1       	in	r24, 0x0e	; 14
 33e:	80 7f       	andi	r24, 0xF0	; 240
 340:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 342:	68 9a       	sbi	0x0d, 0	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	00 c0       	rjmp	.+0      	; 0x346 <i2c_get_data+0xc>
 346:	00 c0       	rjmp	.+0      	; 0x348 <i2c_get_data+0xe>
 348:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 34a:	68 9a       	sbi	0x0d, 0	; 13
 34c:	00 c0       	rjmp	.+0      	; 0x34e <i2c_get_data+0x14>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <i2c_get_data+0x16>
 350:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 352:	76 9b       	sbis	0x0e, 6	; 14
 354:	f6 cf       	rjmp	.-20     	; 0x342 <i2c_get_data+0x8>
	ret = USIDR;
 356:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 35c:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 35e:	08 95       	ret

00000360 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 364:	16 bc       	out	0x26, r1	; 38
	
	gpio_init();
 366:	0c df       	rcall	.-488    	; 0x180 <gpio_init>
	gauge_init();
 368:	83 de       	rcall	.-762    	; 0x70 <gauge_init>
	uart_init();
 36a:	0e d0       	rcall	.+28     	; 0x388 <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	81 e1       	ldi	r24, 0x11	; 17
 370:	9a e7       	ldi	r25, 0x7A	; 122
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x12>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x1c>
 37c:	00 00       	nop
	_delay_ms(5000);
	
	TCNT0 = 0x00;
 37e:	12 be       	out	0x32, r1	; 50
	TCCR0B |= (1<<CS02)|(1<<CS00);
 380:	83 b7       	in	r24, 0x33	; 51
 382:	85 60       	ori	r24, 0x05	; 5
 384:	83 bf       	out	0x33, r24	; 51
 386:	ff cf       	rjmp	.-2      	; 0x386 <main+0x26>

00000388 <uart_init>:

volatile static uint8_t tx_buffer[2];
volatile static uint8_t size = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 388:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 38a:	83 e3       	ldi	r24, 0x33	; 51
 38c:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 38e:	88 e0       	ldi	r24, 0x08	; 8
 390:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
 392:	86 e2       	ldi	r24, 0x26	; 38
 394:	83 b9       	out	0x03, r24	; 3
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 396:	8f b7       	in	r24, 0x3f	; 63
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	8f bf       	out	0x3f, r24	; 63
 39c:	08 95       	ret

0000039e <uart_put_com>:
}

void uart_put_com(uint8_t command, uint8_t data){
	while(size > 0);
 39e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <size>
 3a2:	91 11       	cpse	r25, r1
 3a4:	fc cf       	rjmp	.-8      	; 0x39e <uart_put_com>
	tx_buffer[1] = command;
 3a6:	e3 e6       	ldi	r30, 0x63	; 99
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 3ac:	60 83       	st	Z, r22
	size = 2;
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <size>
	UCSRB |= (1<<UDRIE);
 3b4:	55 9a       	sbi	0x0a, 5	; 10
 3b6:	08 95       	ret

000003b8 <__vector_8>:
}

ISR(USART_UDRE_vect){
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	8f 93       	push	r24
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
	if(size > 0){
 3c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <size>
 3cc:	88 23       	and	r24, r24
 3ce:	61 f0       	breq	.+24     	; 0x3e8 <__vector_8+0x30>
		UDR = tx_buffer[size-1];
 3d0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <size>
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	ee 59       	subi	r30, 0x9E	; 158
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	80 81       	ld	r24, Z
 3dc:	8c b9       	out	0x0c, r24	; 12
		size--;
 3de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <size>
 3e2:	81 50       	subi	r24, 0x01	; 1
 3e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <size>
	}
	if(size == 0){
 3e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <size>
 3ec:	81 11       	cpse	r24, r1
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <__vector_8+0x3a>
		UCSRB &= ~(1<<UDRIE);
 3f0:	55 98       	cbi	0x0a, 5	; 10
	}
}
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	8f 91       	pop	r24
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
