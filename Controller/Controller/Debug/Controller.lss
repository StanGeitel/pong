
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d49  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f3  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e1  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b1  00000000  00000000  00002677  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	bd c0       	rjmp	.+378    	; 0x196 <__vector_13>
  1c:	cc c0       	rjmp	.+408    	; 0x1b6 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ee       	ldi	r30, 0xE4	; 228
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	88 d0       	rcall	.+272    	; 0x16a <main>
  5a:	c2 c0       	rjmp	.+388    	; 0x1e0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <acc_send_reg_add>:
void acc_single_write(uint8_t reg_address, uint8_t data){
	acc_send_reg_add(reg_address);
	i2c_send_data(data);
	i2c_get_ack();
	i2c_send_stop();
}
  5e:	cf 93       	push	r28
  60:	c8 2f       	mov	r28, r24
  62:	2f d0       	rcall	.+94     	; 0xc2 <i2c_send_start>
  64:	80 ed       	ldi	r24, 0xD0	; 208
  66:	5c d0       	rcall	.+184    	; 0x120 <i2c_send_data>
  68:	4c d0       	rcall	.+152    	; 0x102 <i2c_get_ack>
  6a:	8c 2f       	mov	r24, r28
  6c:	59 d0       	rcall	.+178    	; 0x120 <i2c_send_data>
  6e:	49 d0       	rcall	.+146    	; 0x102 <i2c_get_ack>
  70:	cf 91       	pop	r28
  72:	08 95       	ret

00000074 <acc_single_read>:
  74:	cf 93       	push	r28
  76:	f3 df       	rcall	.-26     	; 0x5e <acc_send_reg_add>
  78:	24 d0       	rcall	.+72     	; 0xc2 <i2c_send_start>
  7a:	81 ed       	ldi	r24, 0xD1	; 209
  7c:	51 d0       	rcall	.+162    	; 0x120 <i2c_send_data>
  7e:	41 d0       	rcall	.+130    	; 0x102 <i2c_get_ack>
  80:	61 d0       	rcall	.+194    	; 0x144 <i2c_get_data>
  82:	c8 2f       	mov	r28, r24
  84:	37 d0       	rcall	.+110    	; 0xf4 <i2c_send_nack>
  86:	2f d0       	rcall	.+94     	; 0xe6 <i2c_send_stop>
  88:	8c 2f       	mov	r24, r28
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

0000008e <init_int_pin>:

void init_int_pin(){
	MCUCR |= (1 << ISC00);
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	81 60       	ori	r24, 0x01	; 1
  92:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);				//The rising edge of INT0 generates an interrupt request
  94:	85 b7       	in	r24, 0x35	; 53
  96:	82 60       	ori	r24, 0x02	; 2
  98:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);				//enable external interrupt 0 in general interrupt mask register
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << SREG_I);				//enable interrupts I in global status register
  a0:	8f b7       	in	r24, 0x3f	; 63
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8f bf       	out	0x3f, r24	; 63
  a6:	08 95       	ret

000000a8 <acc_init>:

uint16_t x_pos = 0;
uint16_t y_pos = 0;

void acc_init(){
	i2c_init();
  a8:	02 d0       	rcall	.+4      	; 0xae <i2c_init>
	init_int_pin();
  aa:	f1 df       	rcall	.-30     	; 0x8e <init_int_pin>
  ac:	08 95       	ret

000000ae <i2c_init>:
void i2c_send_ack(){
	PORT(_PORT) &= ~(1<<_SDA);				//force SDA low
	PORT(_PORT) |= (1<<_SCL);				//release SCL
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
	PORT(_PORT) |= (1<<_SDA);				//release SDA
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8f b9       	out	0x0f, r24	; 15
  b2:	80 ea       	ldi	r24, 0xA0	; 160
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	87 bb       	out	0x17, r24	; 23
  b8:	8a e2       	ldi	r24, 0x2A	; 42
  ba:	8d b9       	out	0x0d, r24	; 13
  bc:	80 ef       	ldi	r24, 0xF0	; 240
  be:	8e b9       	out	0x0e, r24	; 14
  c0:	08 95       	ret

000000c2 <i2c_send_start>:
  c2:	80 ea       	ldi	r24, 0xA0	; 160
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	98 b3       	in	r25, 0x18	; 24
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	85 fb       	bst	r24, 5
  ce:	88 27       	eor	r24, r24
  d0:	80 f9       	bld	r24, 0
  d2:	82 13       	cpse	r24, r18
  d4:	f9 cf       	rjmp	.-14     	; 0xc8 <i2c_send_start+0x6>
  d6:	99 23       	and	r25, r25
  d8:	bc f7       	brge	.-18     	; 0xc8 <i2c_send_start+0x6>
  da:	c5 98       	cbi	0x18, 5	; 24
  dc:	00 c0       	rjmp	.+0      	; 0xde <i2c_send_start+0x1c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <__stack+0x1>
  e0:	00 00       	nop
  e2:	c7 98       	cbi	0x18, 7	; 24
  e4:	08 95       	ret

000000e6 <i2c_send_stop>:
  e6:	c5 98       	cbi	0x18, 5	; 24
  e8:	c7 9a       	sbi	0x18, 7	; 24
  ea:	00 c0       	rjmp	.+0      	; 0xec <i2c_send_stop+0x6>
  ec:	00 c0       	rjmp	.+0      	; 0xee <i2c_send_stop+0x8>
  ee:	00 00       	nop
  f0:	c5 9a       	sbi	0x18, 5	; 24
  f2:	08 95       	ret

000000f4 <i2c_send_nack>:
}

void i2c_send_nack(){
	PORT(_PORT) |= (1<<_SDA);				//release SDA
  f4:	c5 9a       	sbi	0x18, 5	; 24
	PORT(_PORT) |= (1<<_SCL);				//release SCL
  f6:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	00 c0       	rjmp	.+0      	; 0xfa <i2c_send_nack+0x6>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <i2c_send_nack+0x8>
  fc:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
  fe:	c7 98       	cbi	0x18, 7	; 24
 100:	08 95       	ret

00000102 <i2c_get_ack>:
}

uint8_t i2c_get_ack(){
	uint8_t ret = 0;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 102:	bd 98       	cbi	0x17, 5	; 23
	USICR |= (1<<USITC);						//toggle SCL to HIGH
 104:	68 9a       	sbi	0x0d, 0	; 13
 106:	00 c0       	rjmp	.+0      	; 0x108 <i2c_get_ack+0x6>
 108:	00 c0       	rjmp	.+0      	; 0x10a <i2c_get_ack+0x8>
 10a:	00 00       	nop
	_delay_us(BIT_TIME);
	USICR |= (1<<USITC);						//toggle SCL to LOW
 10c:	68 9a       	sbi	0x0d, 0	; 13
 10e:	00 c0       	rjmp	.+0      	; 0x110 <i2c_get_ack+0xe>
 110:	00 c0       	rjmp	.+0      	; 0x112 <i2c_get_ack+0x10>
 112:	00 00       	nop
	_delay_us(BIT_TIME);
	ret = (USIDR & 1);
 114:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 11a:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 11c:	81 70       	andi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <i2c_send_data>:

void i2c_send_data(uint8_t data){
	USIDR = data;
 120:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) |= (1<<_SDA);
 122:	c5 9a       	sbi	0x18, 5	; 24
	USISR &= ~(0xF<<USICNT0);					//reset counter
 124:	8e b1       	in	r24, 0x0e	; 14
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 12a:	68 9a       	sbi	0x0d, 0	; 13
 12c:	00 c0       	rjmp	.+0      	; 0x12e <i2c_send_data+0xe>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <i2c_send_data+0x10>
 130:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 132:	68 9a       	sbi	0x0d, 0	; 13
 134:	00 c0       	rjmp	.+0      	; 0x136 <i2c_send_data+0x16>
 136:	00 c0       	rjmp	.+0      	; 0x138 <i2c_send_data+0x18>
 138:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 13a:	76 9b       	sbis	0x0e, 6	; 14
 13c:	f6 cf       	rjmp	.-20     	; 0x12a <i2c_send_data+0xa>
	
	USIDR = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8f b9       	out	0x0f, r24	; 15
 142:	08 95       	ret

00000144 <i2c_get_data>:
}

uint8_t i2c_get_data(){
	uint8_t ret;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 144:	bd 98       	cbi	0x17, 5	; 23
	USISR &= ~(0xF << USICNT0);					//reset counter
 146:	8e b1       	in	r24, 0x0e	; 14
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 14c:	68 9a       	sbi	0x0d, 0	; 13
 14e:	00 c0       	rjmp	.+0      	; 0x150 <i2c_get_data+0xc>
 150:	00 c0       	rjmp	.+0      	; 0x152 <i2c_get_data+0xe>
 152:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 154:	68 9a       	sbi	0x0d, 0	; 13
 156:	00 c0       	rjmp	.+0      	; 0x158 <i2c_get_data+0x14>
 158:	00 c0       	rjmp	.+0      	; 0x15a <i2c_get_data+0x16>
 15a:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 15c:	76 9b       	sbis	0x0e, 6	; 14
 15e:	f6 cf       	rjmp	.-20     	; 0x14c <i2c_get_data+0x8>
	ret = USIDR;
 160:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 166:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 168:	08 95       	ret

0000016a <main>:
#include "timer.h"


int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 16e:	16 bc       	out	0x26, r1	; 38
	
	acc_init();
 170:	9b df       	rcall	.-202    	; 0xa8 <acc_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	8d e3       	ldi	r24, 0x3D	; 61
 176:	99 e4       	ldi	r25, 0x49	; 73
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xe>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x18>
 182:	00 00       	nop
	_delay_ms(3000);
	

    while (1) 
    {
		acc_single_read(0x3C);
 184:	8c e3       	ldi	r24, 0x3C	; 60
 186:	76 df       	rcall	.-276    	; 0x74 <acc_single_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f e8       	ldi	r24, 0x8F	; 143
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x22>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x28>
 192:	00 00       	nop
 194:	f7 cf       	rjmp	.-18     	; 0x184 <main+0x1a>

00000196 <__vector_13>:
	OCR0B = 9;
	TIMSK |= (1<<OCIE0A)|(1<<OCIE0B);
	SREG |= (1<<SREG_I);								//enable global interrupt
 }
 
 ISR(TIMER0_COMPA_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	88 7f       	andi	r24, 0xF8	; 248
 1a6:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 1a8:	12 be       	out	0x32, r1	; 50
 }
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_14>:
 
 ISR(TIMER0_COMPB_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	OCR0B += 10;
 1c4:	8c b7       	in	r24, 0x3c	; 60
 1c6:	86 5f       	subi	r24, 0xF6	; 246
 1c8:	8c bf       	out	0x3c, r24	; 60
	PORTB ^= (1<<2);
 1ca:	98 b3       	in	r25, 0x18	; 24
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	89 27       	eor	r24, r25
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
