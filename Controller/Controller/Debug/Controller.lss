
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001066  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cb  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a59  00000000  00000000  00001ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00002908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051c  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082e  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00003992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	43 c0       	rjmp	.+134    	; 0x8a <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	6b c1       	rjmp	.+726    	; 0x2e8 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	8a c0       	rjmp	.+276    	; 0x12c <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	74 c0       	rjmp	.+232    	; 0x104 <__vector_13>
  1c:	7d c0       	rjmp	.+250    	; 0x118 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	32 d1       	rcall	.+612    	; 0x2a8 <main>
  44:	73 c1       	rjmp	.+742    	; 0x32c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <acc_send_reg_add>:
	TCCR0A = ((0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00));
	TCCR0B = ((0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00));		//Select 8MHz clock with no prescaler
	OCR0A = 160;
	OCR0B = 9;													//Set match register on 10 pulses
	TIMSK |= ((1<<OCIE0A)|(1<<OCIE0B));							//enable interrupts on compare register A and B
	SREG |= (1<<SREG_I);										//enable global interrupt
  48:	cf 93       	push	r28
  4a:	c8 2f       	mov	r28, r24
  4c:	d1 d0       	rcall	.+418    	; 0x1f0 <i2c_send_start>
  4e:	80 ed       	ldi	r24, 0xD0	; 208
  50:	06 d1       	rcall	.+524    	; 0x25e <i2c_send_data>
  52:	f6 d0       	rcall	.+492    	; 0x240 <i2c_get_ack>
  54:	8c 2f       	mov	r24, r28
  56:	03 d1       	rcall	.+518    	; 0x25e <i2c_send_data>
  58:	f3 d0       	rcall	.+486    	; 0x240 <i2c_get_ack>
  5a:	cf 91       	pop	r28
  5c:	08 95       	ret

0000005e <acc_burst_read>:
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	f2 df       	rcall	.-28     	; 0x48 <acc_send_reg_add>
  64:	c5 d0       	rcall	.+394    	; 0x1f0 <i2c_send_start>
  66:	81 ed       	ldi	r24, 0xD1	; 209
  68:	fa d0       	rcall	.+500    	; 0x25e <i2c_send_data>
  6a:	ea d0       	rcall	.+468    	; 0x240 <i2c_get_ack>
  6c:	0a d1       	rcall	.+532    	; 0x282 <i2c_get_data>
  6e:	c8 2f       	mov	r28, r24
  70:	d0 e0       	ldi	r29, 0x00	; 0
  72:	dc 2f       	mov	r29, r28
  74:	cc 27       	eor	r28, r28
  76:	d5 d0       	rcall	.+426    	; 0x222 <i2c_send_ack>
  78:	04 d1       	rcall	.+520    	; 0x282 <i2c_get_data>
  7a:	c8 2b       	or	r28, r24
  7c:	da d0       	rcall	.+436    	; 0x232 <i2c_send_nack>
  7e:	ca d0       	rcall	.+404    	; 0x214 <i2c_send_stop>
  80:	ce 01       	movw	r24, r28
  82:	df 91       	pop	r29
  84:	cf 91       	pop	r28
  86:	08 95       	ret

00000088 <acc_calibrate>:
  88:	08 95       	ret

0000008a <__vector_1>:
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	3f 93       	push	r19
  98:	4f 93       	push	r20
  9a:	5f 93       	push	r21
  9c:	6f 93       	push	r22
  9e:	7f 93       	push	r23
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	af 93       	push	r26
  a6:	bf 93       	push	r27
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	d7 df       	rcall	.-82     	; 0x5e <acc_burst_read>
  b0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <x_acc>
  b4:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <x_acc+0x1>
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	29 f0       	breq	.+10     	; 0xc8 <__vector_1+0x3e>
  be:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <x_acc+0x1>
  c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <x_acc>
  c6:	0d c0       	rjmp	.+26     	; 0xe2 <__stack+0x3>
  c8:	8d e3       	ldi	r24, 0x3D	; 61
  ca:	c9 df       	rcall	.-110    	; 0x5e <acc_burst_read>
  cc:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <y_acc>
  d0:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <y_acc+0x1>
  d4:	82 17       	cp	r24, r18
  d6:	93 07       	cpc	r25, r19
  d8:	21 f0       	breq	.+8      	; 0xe2 <__stack+0x3>
  da:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <y_acc+0x1>
  de:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <y_acc>
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	7f 91       	pop	r23
  f0:	6f 91       	pop	r22
  f2:	5f 91       	pop	r21
  f4:	4f 91       	pop	r20
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_13>:
}
 
ISR(TIMER0_COMPA_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
	
}
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_14>:
 
ISR(TIMER0_COMPB_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
	
}
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_11>:

void gpio_reset_led(){
	PORT(_PORT) |= (1<<L0);
}
 
ISR(PCINT0_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	uint8_t new_buttons = PORT(_PORT) & 0xF;
 152:	d8 b3       	in	r29, 0x18	; 24
 154:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = new_buttons ^ old_buttons;
 156:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <_edata>
 15a:	cd 27       	eor	r28, r29
	if(temp & (1<<B0)){		
 15c:	c0 ff       	sbrs	r28, 0
 15e:	0b c0       	rjmp	.+22     	; 0x176 <__vector_11+0x4a>
		if(!(old_buttons&(1<<B0))){
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 164:	80 fd       	sbrc	r24, 0
 166:	07 c0       	rjmp	.+14     	; 0x176 <__vector_11+0x4a>
			PORT(_PORT) ^= (1<<L0);
 168:	98 b3       	in	r25, 0x18	; 24
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	89 27       	eor	r24, r25
 16e:	88 bb       	out	0x18, r24	; 24
			uart_put_com((B0_COM<<2), (PORT(_PORT)>>B0));
 170:	68 b3       	in	r22, 0x18	; 24
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	ac d0       	rcall	.+344    	; 0x2ce <uart_put_com>
		}
	}
	if(temp & (1<<B1)){	
 176:	c1 ff       	sbrs	r28, 1
 178:	0c c0       	rjmp	.+24     	; 0x192 <__vector_11+0x66>
		if(!(old_buttons&(1<<B1))){
 17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 17e:	81 fd       	sbrc	r24, 1
 180:	08 c0       	rjmp	.+16     	; 0x192 <__vector_11+0x66>
			PORT(_PORT) ^= (1<<L0);
 182:	98 b3       	in	r25, 0x18	; 24
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	89 27       	eor	r24, r25
 188:	88 bb       	out	0x18, r24	; 24
			uart_put_com((B1_COM<<2), (PORT(_PORT)>>B1));
 18a:	68 b3       	in	r22, 0x18	; 24
 18c:	66 95       	lsr	r22
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	9e d0       	rcall	.+316    	; 0x2ce <uart_put_com>
		}
	}
	if(temp & (1<<B2)){
 192:	c2 ff       	sbrs	r28, 2
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <__vector_11+0x84>
		
		
		if(!(old_buttons&(1<<B2))){
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 19a:	82 fd       	sbrc	r24, 2
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <__vector_11+0x84>
			PORT(_PORT) ^= (1<<L0);
 19e:	98 b3       	in	r25, 0x18	; 24
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	89 27       	eor	r24, r25
 1a4:	88 bb       	out	0x18, r24	; 24
			uart_put_com((B2_COM<<2), (PORT(_PORT)>>B2));
 1a6:	68 b3       	in	r22, 0x18	; 24
 1a8:	66 95       	lsr	r22
 1aa:	66 95       	lsr	r22
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	8f d0       	rcall	.+286    	; 0x2ce <uart_put_com>
		}
	}
	
	if(temp & (1<<B3)){									//calibration button
 1b0:	c3 ff       	sbrs	r28, 3
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <__vector_11+0x9a>
		if(!(old_buttons&(1<<B2))){
 1b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1b8:	82 fd       	sbrc	r24, 2
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <__vector_11+0x9a>
			PORT(_PORT) ^= (1<<L0);
 1bc:	98 b3       	in	r25, 0x18	; 24
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	89 27       	eor	r24, r25
 1c2:	88 bb       	out	0x18, r24	; 24
			acc_calibrate();
 1c4:	61 df       	rcall	.-318    	; 0x88 <acc_calibrate>
		}
	}
	old_buttons = new_buttons;
 1c6:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <_edata>
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <i2c_send_start>:
	USICR = (0<<USISIE)|(0<<USISIE)|(1<<USIWM1)|(0<<USIWM0)|(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|(0<<USITC);
	USISR = (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|(0x0<<USICNT0);		//reset flags and counter value
}

void i2c_send_start(){
	PORT(_PORT) = (1<<_SDA)|(1<<_SCL);		//release both for start condition
 1f0:	80 ea       	ldi	r24, 0xA0	; 160
 1f2:	88 bb       	out	0x18, r24	; 24
	while((!(PORT(_PORT)&(1<<_SCL)))|(!(PORT(_PORT)&(1<<_SDA))));
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	98 b3       	in	r25, 0x18	; 24
 1f8:	88 b3       	in	r24, 0x18	; 24
 1fa:	85 fb       	bst	r24, 5
 1fc:	88 27       	eor	r24, r24
 1fe:	80 f9       	bld	r24, 0
 200:	82 13       	cpse	r24, r18
 202:	f9 cf       	rjmp	.-14     	; 0x1f6 <i2c_send_start+0x6>
 204:	99 23       	and	r25, r25
 206:	bc f7       	brge	.-18     	; 0x1f6 <i2c_send_start+0x6>
	PORT(_PORT) &= ~(1<<_SDA);				//force SDA low
 208:	c5 98       	cbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	00 c0       	rjmp	.+0      	; 0x20c <i2c_send_start+0x1c>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <i2c_send_start+0x1e>
 20e:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 210:	c7 98       	cbi	0x18, 7	; 24
 212:	08 95       	ret

00000214 <i2c_send_stop>:
}

void i2c_send_stop(){
	PORT(_PORT) &= ~(1<<_SDA);				//force SDA low
 214:	c5 98       	cbi	0x18, 5	; 24
	PORT(_PORT) |= (1<<_SCL);				//release SCL
 216:	c7 9a       	sbi	0x18, 7	; 24
 218:	00 c0       	rjmp	.+0      	; 0x21a <i2c_send_stop+0x6>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <i2c_send_stop+0x8>
 21c:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) |= (1<<_SDA);				//release SDA
 21e:	c5 9a       	sbi	0x18, 5	; 24
 220:	08 95       	ret

00000222 <i2c_send_ack>:
}

void i2c_send_ack(){
	PORT(_PORT) &= ~(1<<_SDA);				//force SDA low
 222:	c5 98       	cbi	0x18, 5	; 24
	PORT(_PORT) |= (1<<_SCL);				//release SCL
 224:	c7 9a       	sbi	0x18, 7	; 24
 226:	00 c0       	rjmp	.+0      	; 0x228 <i2c_send_ack+0x6>
 228:	00 c0       	rjmp	.+0      	; 0x22a <i2c_send_ack+0x8>
 22a:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 22c:	c7 98       	cbi	0x18, 7	; 24
	PORT(_PORT) |= (1<<_SDA);				//release SDA
 22e:	c5 9a       	sbi	0x18, 5	; 24
 230:	08 95       	ret

00000232 <i2c_send_nack>:
}

void i2c_send_nack(){
	PORT(_PORT) |= (1<<_SDA);				//release SDA
 232:	c5 9a       	sbi	0x18, 5	; 24
	PORT(_PORT) |= (1<<_SCL);				//release SCL
 234:	c7 9a       	sbi	0x18, 7	; 24
 236:	00 c0       	rjmp	.+0      	; 0x238 <i2c_send_nack+0x6>
 238:	00 c0       	rjmp	.+0      	; 0x23a <i2c_send_nack+0x8>
 23a:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 23c:	c7 98       	cbi	0x18, 7	; 24
 23e:	08 95       	ret

00000240 <i2c_get_ack>:
}

uint8_t i2c_get_ack(){
	uint8_t ret = 0;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 240:	bd 98       	cbi	0x17, 5	; 23
	USICR |= (1<<USITC);						//toggle SCL to HIGH
 242:	68 9a       	sbi	0x0d, 0	; 13
 244:	00 c0       	rjmp	.+0      	; 0x246 <i2c_get_ack+0x6>
 246:	00 c0       	rjmp	.+0      	; 0x248 <i2c_get_ack+0x8>
 248:	00 00       	nop
	_delay_us(BIT_TIME);
	USICR |= (1<<USITC);						//toggle SCL to LOW
 24a:	68 9a       	sbi	0x0d, 0	; 13
 24c:	00 c0       	rjmp	.+0      	; 0x24e <i2c_get_ack+0xe>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <i2c_get_ack+0x10>
 250:	00 00       	nop
	_delay_us(BIT_TIME);
	ret = (USIDR & 1);
 252:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 254:	9f ef       	ldi	r25, 0xFF	; 255
 256:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 258:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 25a:	81 70       	andi	r24, 0x01	; 1
 25c:	08 95       	ret

0000025e <i2c_send_data>:

void i2c_send_data(uint8_t data){
	USIDR = data;
 25e:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) |= (1<<_SDA);
 260:	c5 9a       	sbi	0x18, 5	; 24
	USISR &= ~(0xF<<USICNT0);					//reset counter
 262:	8e b1       	in	r24, 0x0e	; 14
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 268:	68 9a       	sbi	0x0d, 0	; 13
 26a:	00 c0       	rjmp	.+0      	; 0x26c <i2c_send_data+0xe>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <i2c_send_data+0x10>
 26e:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 270:	68 9a       	sbi	0x0d, 0	; 13
 272:	00 c0       	rjmp	.+0      	; 0x274 <i2c_send_data+0x16>
 274:	00 c0       	rjmp	.+0      	; 0x276 <i2c_send_data+0x18>
 276:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 278:	76 9b       	sbis	0x0e, 6	; 14
 27a:	f6 cf       	rjmp	.-20     	; 0x268 <i2c_send_data+0xa>
	
	USIDR = 0xFF;
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	8f b9       	out	0x0f, r24	; 15
 280:	08 95       	ret

00000282 <i2c_get_data>:
}

uint8_t i2c_get_data(){
	uint8_t ret;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 282:	bd 98       	cbi	0x17, 5	; 23
	USISR &= ~(0xF << USICNT0);					//reset counter
 284:	8e b1       	in	r24, 0x0e	; 14
 286:	80 7f       	andi	r24, 0xF0	; 240
 288:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 28a:	68 9a       	sbi	0x0d, 0	; 13
 28c:	00 c0       	rjmp	.+0      	; 0x28e <i2c_get_data+0xc>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <i2c_get_data+0xe>
 290:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 292:	68 9a       	sbi	0x0d, 0	; 13
 294:	00 c0       	rjmp	.+0      	; 0x296 <i2c_get_data+0x14>
 296:	00 c0       	rjmp	.+0      	; 0x298 <i2c_get_data+0x16>
 298:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 29a:	76 9b       	sbis	0x0e, 6	; 14
 29c:	f6 cf       	rjmp	.-20     	; 0x28a <i2c_get_data+0x8>
	ret = USIDR;
 29e:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 2a0:	9f ef       	ldi	r25, 0xFF	; 255
 2a2:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 2a4:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 2a6:	08 95       	ret

000002a8 <main>:
#include "gauge.h"
#include "gpio.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 2ac:	16 bc       	out	0x26, r1	; 38
	
/*	acc_init();
	_delay_ms(3000);
	acc_burst_read(X_MSB);
*/
	uart_init();
 2ae:	04 d0       	rcall	.+8      	; 0x2b8 <uart_init>
	uart_put_com(0x42, 0xFF);
 2b0:	6f ef       	ldi	r22, 0xFF	; 255
 2b2:	82 e4       	ldi	r24, 0x42	; 66
 2b4:	0c d0       	rcall	.+24     	; 0x2ce <uart_put_com>
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <main+0xe>

000002b8 <uart_init>:

volatile static uint8_t tx_buffer[2];
volatile static uint8_t size = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 2b8:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 2ba:	83 e3       	ldi	r24, 0x33	; 51
 2bc:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 2be:	88 e0       	ldi	r24, 0x08	; 8
 2c0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
 2c2:	86 e2       	ldi	r24, 0x26	; 38
 2c4:	83 b9       	out	0x03, r24	; 3
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 2c6:	8f b7       	in	r24, 0x3f	; 63
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	8f bf       	out	0x3f, r24	; 63
 2cc:	08 95       	ret

000002ce <uart_put_com>:
}

void uart_put_com(uint8_t command, uint8_t data){
	while(size > 0);
 2ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <size>
 2d2:	91 11       	cpse	r25, r1
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <uart_put_com>
	tx_buffer[1] = command;
 2d6:	e2 e6       	ldi	r30, 0x62	; 98
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 2dc:	60 83       	st	Z, r22
	size = 2;
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <size>
	UCSRB |= (1<<UDRIE);
 2e4:	55 9a       	sbi	0x0a, 5	; 10
 2e6:	08 95       	ret

000002e8 <__vector_8>:
}

ISR(USART_UDRE_vect){
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	8f 93       	push	r24
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
	if(size > 0){
 2f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
 2fc:	88 23       	and	r24, r24
 2fe:	69 f0       	breq	.+26     	; 0x31a <__vector_8+0x32>
		UDR = tx_buffer[size-1];
 300:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <size>
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ef 59       	subi	r30, 0x9F	; 159
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	80 81       	ld	r24, Z
 30c:	8c b9       	out	0x0c, r24	; 12
		size--;
 30e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
 312:	81 50       	subi	r24, 0x01	; 1
 314:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <size>
 318:	01 c0       	rjmp	.+2      	; 0x31c <__vector_8+0x34>
	}else{
		UCSRB &= ~(1<<UDRIE);
 31a:	55 98       	cbi	0x0a, 5	; 10
	}
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
