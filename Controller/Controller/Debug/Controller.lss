
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001fc  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4e  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000985  00000000  00000000  00001a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00002390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000508  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000588  00000000  00000000  00002b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	83 c0       	rjmp	.+262    	; 0x10a <__vector_1>
   4:	8c c0       	rjmp	.+280    	; 0x11e <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	9b c0       	rjmp	.+310    	; 0x152 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ef       	ldi	r30, 0xFC	; 252
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	77 d0       	rcall	.+238    	; 0x148 <main>
  5a:	ce c0       	rjmp	.+412    	; 0x1f8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <set_output_gpio>:
 void init_external_interrupt1_gpio(void){
	 MCUCR |= (1 << ISC10);				//The rising edge of INT1 generates an interrupt request
	 MCUCR |= (1 << ISC11);
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
  5e:	e8 2f       	mov	r30, r24
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	3a 97       	sbiw	r30, 0x0a	; 10
  64:	cf 01       	movw	r24, r30
  66:	88 0f       	add	r24, r24
  68:	99 1f       	adc	r25, r25
  6a:	88 0f       	add	r24, r24
  6c:	99 1f       	adc	r25, r25
  6e:	e8 1b       	sub	r30, r24
  70:	f9 0b       	sbc	r31, r25
  72:	22 ad       	ldd	r18, Z+58	; 0x3a
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <set_output_gpio+0x20>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	6a 95       	dec	r22
  80:	e2 f7       	brpl	.-8      	; 0x7a <set_output_gpio+0x1c>
  82:	98 2f       	mov	r25, r24
  84:	90 95       	com	r25
  86:	92 23       	and	r25, r18
  88:	92 af       	std	Z+58, r25	; 0x3a
  8a:	93 ad       	ldd	r25, Z+59	; 0x3b
  8c:	98 2b       	or	r25, r24
  8e:	93 af       	std	Z+59, r25	; 0x3b
  90:	92 ad       	ldd	r25, Z+58	; 0x3a
  92:	98 2b       	or	r25, r24
  94:	92 af       	std	Z+58, r25	; 0x3a
  96:	93 ad       	ldd	r25, Z+59	; 0x3b
  98:	89 2b       	or	r24, r25
  9a:	83 af       	std	Z+59, r24	; 0x3b
  9c:	08 95       	ret

0000009e <clear_output_gpio>:
  9e:	e8 2f       	mov	r30, r24
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	3a 97       	sbiw	r30, 0x0a	; 10
  a4:	cf 01       	movw	r24, r30
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	e8 1b       	sub	r30, r24
  b0:	f9 0b       	sbc	r31, r25
  b2:	22 ad       	ldd	r18, Z+58	; 0x3a
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <clear_output_gpio+0x20>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <clear_output_gpio+0x1c>
  c2:	98 2f       	mov	r25, r24
  c4:	90 95       	com	r25
  c6:	29 23       	and	r18, r25
  c8:	22 af       	std	Z+58, r18	; 0x3a
  ca:	23 ad       	ldd	r18, Z+59	; 0x3b
  cc:	29 23       	and	r18, r25
  ce:	23 af       	std	Z+59, r18	; 0x3b
  d0:	22 ad       	ldd	r18, Z+58	; 0x3a
  d2:	82 2b       	or	r24, r18
  d4:	82 af       	std	Z+58, r24	; 0x3a
  d6:	83 ad       	ldd	r24, Z+59	; 0x3b
  d8:	98 23       	and	r25, r24
  da:	93 af       	std	Z+59, r25	; 0x3b
  dc:	08 95       	ret

000000de <read_gpio>:
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0a 97       	sbiw	r24, 0x0a	; 10
  e2:	9c 01       	movw	r18, r24
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	fc 01       	movw	r30, r24
  ee:	e2 1b       	sub	r30, r18
  f0:	f3 0b       	sbc	r31, r19
  f2:	21 ad       	ldd	r18, Z+57	; 0x39
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <__stack+0x1f>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <__stack+0x1b>
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	82 23       	and	r24, r18
 106:	93 23       	and	r25, r19
 108:	08 95       	ret

0000010a <__vector_1>:
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_2>:
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
	  
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <i2c_init>:
#include <util/delay.h>

#include "i2c.h"

void i2c_init(){
	PORT(_PORT) = (1 << _SCL) | (1 << _SDA);		//set HIGH with pull up.
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	8b bb       	out	0x1b, r24	; 27
	DDR(_PORT) = (1 << _SCL) | (1 << _SDA);			//enable output driver for SDA and SCL.
 136:	8a bb       	out	0x1a, r24	; 26
	while(1){
		_delay_us(BIT_TIME);
		PORT(_PORT) ^= (1<<_SDA);			//toggle SDA
 138:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	00 c0       	rjmp	.+0      	; 0x13c <i2c_init+0xa>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <i2c_init+0xc>
 13e:	00 00       	nop
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	89 27       	eor	r24, r25
 144:	8b bb       	out	0x1b, r24	; 27
 146:	f9 cf       	rjmp	.-14     	; 0x13a <i2c_init+0x8>

00000148 <main>:
#include "acc.h"
#include "usart.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 14c:	16 bc       	out	0x26, r1	; 38
	
	i2c_init();
 14e:	f1 df       	rcall	.-30     	; 0x132 <i2c_init>
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0x8>

00000152 <__vector_13>:
 
 void reset_prescaler(void){
	GTCCR |= (1 << PSR10);	
 }

 ISR (TIMER0_COMPA_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	if(read_gpio(0xB, 7)){
 174:	67 e0       	ldi	r22, 0x07	; 7
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	b1 df       	rcall	.-158    	; 0xde <read_gpio>
 17c:	89 2b       	or	r24, r25
 17e:	29 f0       	breq	.+10     	; 0x18a <__vector_13+0x38>
		clear_output_gpio(0xB, 7);
 180:	67 e0       	ldi	r22, 0x07	; 7
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	8b e0       	ldi	r24, 0x0B	; 11
 186:	8b df       	rcall	.-234    	; 0x9e <clear_output_gpio>
 188:	04 c0       	rjmp	.+8      	; 0x192 <__vector_13+0x40>
	}
	else{
		set_output_gpio(0xB, 7);
 18a:	67 e0       	ldi	r22, 0x07	; 7
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	8b e0       	ldi	r24, 0x0B	; 11
 190:	66 df       	rcall	.-308    	; 0x5e <set_output_gpio>
	}
	
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_8>:
  tx_buffer[1] = data;
  UCSRB |= (1<<UDRIE);							// enable uart data interrupt (send data)
}

//send a command out of the buffer
ISR(USART_UDRE_vect) {
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	if(bytes > 0){
 1c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1c8:	88 23       	and	r24, r24
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <__vector_8+0x32>
		UDR = tx_buffer[bytes];					//write byte to data register
 1cc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ee 59       	subi	r30, 0x9E	; 158
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	8c b9       	out	0x0c, r24	; 12
		bytes--;								//lower bytes by one
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1de:	81 50       	subi	r24, 0x01	; 1
 1e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_8+0x34>
	}else{
		UCSRB &= ~(1<<UDRIE);					//disable interrupt
 1e6:	55 98       	cbi	0x0a, 5	; 10
	}
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
