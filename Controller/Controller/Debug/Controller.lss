
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000796  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000796  0000082a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800066  00800066  00000830  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d4  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ccf  00000000  00000000  000028a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00003578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000591  00000000  00000000  000039b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c33  00000000  00000000  00003f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004b7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__vector_1>
   4:	81 c1       	rjmp	.+770    	; 0x308 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	64 c3       	rjmp	.+1736   	; 0x6d2 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	c4 c1       	rjmp	.+904    	; 0x396 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	2c c3       	rjmp	.+1624   	; 0x66a <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	e8 c1       	rjmp	.+976    	; 0x3e8 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 38       	cpi	r26, 0x8C	; 140
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c2 d2       	rcall	.+1412   	; 0x5de <main>
  5a:	9b c3       	rjmp	.+1846   	; 0x792 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <acc_init>:
		y_noise += i2c_burst_read(ACC_ADD, Y_MSB);
		count++;
	}while(count != 0x0400);
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
}
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	6b e6       	ldi	r22, 0x6B	; 107
  62:	88 e6       	ldi	r24, 0x68	; 104
  64:	77 d2       	rcall	.+1262   	; 0x554 <i2c_single_write>
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	6c e1       	ldi	r22, 0x1C	; 28
  6a:	88 e6       	ldi	r24, 0x68	; 104
  6c:	73 d2       	rcall	.+1254   	; 0x554 <i2c_single_write>
  6e:	48 e0       	ldi	r20, 0x08	; 8
  70:	69 e1       	ldi	r22, 0x19	; 25
  72:	88 e6       	ldi	r24, 0x68	; 104
  74:	6f d2       	rcall	.+1246   	; 0x554 <i2c_single_write>
  76:	40 e1       	ldi	r20, 0x10	; 16
  78:	67 e3       	ldi	r22, 0x37	; 55
  7a:	88 e6       	ldi	r24, 0x68	; 104
  7c:	6b d2       	rcall	.+1238   	; 0x554 <i2c_single_write>
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	68 e3       	ldi	r22, 0x38	; 56
  82:	88 e6       	ldi	r24, 0x68	; 104
  84:	67 d2       	rcall	.+1230   	; 0x554 <i2c_single_write>
  86:	85 b7       	in	r24, 0x35	; 53
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bf       	out	0x35, r24	; 53
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	85 bf       	out	0x35, r24	; 53
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
  98:	8f b7       	in	r24, 0x3f	; 63
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8f bf       	out	0x3f, r24	; 63
  9e:	08 95       	ret

000000a0 <__vector_1>:

ISR(INT0_vect){		//External interrupt0 service routine
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	x_acc[1] = i2c_burst_read(ACC_ADD, X_MSB) + x_noise;
  da:	6b e3       	ldi	r22, 0x3B	; 59
  dc:	88 e6       	ldi	r24, 0x68	; 104
  de:	67 d2       	rcall	.+1230   	; 0x5ae <i2c_burst_read>
  e0:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <x_noise>
  e4:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <x_noise+0x1>
  e8:	82 0f       	add	r24, r18
  ea:	93 1f       	adc	r25, r19
  ec:	cf e7       	ldi	r28, 0x7F	; 127
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	9b 83       	std	Y+3, r25	; 0x03
  f2:	8a 83       	std	Y+2, r24	; 0x02
	y_acc[1] = i2c_burst_read(ACC_ADD, Y_MSB) + y_noise;
  f4:	6d e3       	ldi	r22, 0x3D	; 61
  f6:	88 e6       	ldi	r24, 0x68	; 104
  f8:	5a d2       	rcall	.+1204   	; 0x5ae <i2c_burst_read>
  fa:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <y_noise>
  fe:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <y_noise+0x1>
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <y_acc+0x3>
 10a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <y_acc+0x2>
	
	if((x_acc[1] <= 50 && x_acc[1] >= -50) && (y_acc[1] <= 50 && y_acc[1] >= -50)){
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	9b 81       	ldd	r25, Y+3	; 0x03
 112:	c3 97       	sbiw	r24, 0x33	; 51
 114:	d4 f4       	brge	.+52     	; 0x14a <__stack+0x6b>
 116:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <x_acc+0x2>
 11a:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <x_acc+0x3>
 11e:	8e 3c       	cpi	r24, 0xCE	; 206
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	9c f0       	brlt	.+38     	; 0x14a <__stack+0x6b>
 124:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <y_acc+0x2>
 128:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <y_acc+0x3>
 12c:	c3 97       	sbiw	r24, 0x33	; 51
 12e:	6c f4       	brge	.+26     	; 0x14a <__stack+0x6b>
 130:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <y_acc+0x2>
 134:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <y_acc+0x3>
 138:	8e 3c       	cpi	r24, 0xCE	; 206
 13a:	9f 4f       	sbci	r25, 0xFF	; 255
 13c:	34 f0       	brlt	.+12     	; 0x14a <__stack+0x6b>
		drift_cnt++;
 13e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 148:	02 c0       	rjmp	.+4      	; 0x14e <__stack+0x6f>
	}
	else{
		drift_cnt = 0;
 14a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
	}
	if(drift_cnt == 16){
 14e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 152:	80 31       	cpi	r24, 0x10	; 16
 154:	41 f4       	brne	.+16     	; 0x166 <__stack+0x87>
		x_vel[1] = 0;
 156:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <x_vel+0x3>
 15a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <x_vel+0x2>
		y_vel[1] = 0;
 15e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <y_vel+0x3>
 162:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <y_vel+0x2>
		
	}
	x_vel[1] = x_vel[0] + (x_acc[0] + ((x_acc[1] - x_acc[0])>>1));
 166:	07 e7       	ldi	r16, 0x77	; 119
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	f8 01       	movw	r30, r16
 16c:	20 81       	ld	r18, Z
 16e:	31 81       	ldd	r19, Z+1	; 0x01
 170:	0f 2e       	mov	r0, r31
 172:	ff e7       	ldi	r31, 0x7F	; 127
 174:	8f 2e       	mov	r8, r31
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	9f 2e       	mov	r9, r31
 17a:	f0 2d       	mov	r31, r0
 17c:	f4 01       	movw	r30, r8
 17e:	40 81       	ld	r20, Z
 180:	51 81       	ldd	r21, Z+1	; 0x01
 182:	82 81       	ldd	r24, Z+2	; 0x02
 184:	93 81       	ldd	r25, Z+3	; 0x03
 186:	60 81       	ld	r22, Z
 188:	71 81       	ldd	r23, Z+1	; 0x01
 18a:	86 1b       	sub	r24, r22
 18c:	97 0b       	sbc	r25, r23
 18e:	95 95       	asr	r25
 190:	87 95       	ror	r24
 192:	84 0f       	add	r24, r20
 194:	95 1f       	adc	r25, r21
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	f8 01       	movw	r30, r16
 19c:	93 83       	std	Z+3, r25	; 0x03
 19e:	82 83       	std	Z+2, r24	; 0x02
	y_vel[1] = y_vel[0] + (y_acc[0] + ((y_acc[1] - y_acc[0])>>1));
 1a0:	c3 e7       	ldi	r28, 0x73	; 115
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	28 81       	ld	r18, Y
 1a6:	39 81       	ldd	r19, Y+1	; 0x01
 1a8:	0f 2e       	mov	r0, r31
 1aa:	fb e7       	ldi	r31, 0x7B	; 123
 1ac:	af 2e       	mov	r10, r31
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	bf 2e       	mov	r11, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	f5 01       	movw	r30, r10
 1b6:	40 81       	ld	r20, Z
 1b8:	51 81       	ldd	r21, Z+1	; 0x01
 1ba:	82 81       	ldd	r24, Z+2	; 0x02
 1bc:	93 81       	ldd	r25, Z+3	; 0x03
 1be:	60 81       	ld	r22, Z
 1c0:	71 81       	ldd	r23, Z+1	; 0x01
 1c2:	86 1b       	sub	r24, r22
 1c4:	97 0b       	sbc	r25, r23
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	84 0f       	add	r24, r20
 1cc:	95 1f       	adc	r25, r21
 1ce:	82 0f       	add	r24, r18
 1d0:	93 1f       	adc	r25, r19
 1d2:	9b 83       	std	Y+3, r25	; 0x03
 1d4:	8a 83       	std	Y+2, r24	; 0x02
	
	x_pos[1] = x_pos[0] + (x_vel[0] + ((x_vel[1] - x_vel[0])>>1));
 1d6:	0f 2e       	mov	r0, r31
 1d8:	ff e6       	ldi	r31, 0x6F	; 111
 1da:	cf 2e       	mov	r12, r31
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	df 2e       	mov	r13, r31
 1e0:	f0 2d       	mov	r31, r0
 1e2:	f6 01       	movw	r30, r12
 1e4:	20 81       	ld	r18, Z
 1e6:	31 81       	ldd	r19, Z+1	; 0x01
 1e8:	f8 01       	movw	r30, r16
 1ea:	40 81       	ld	r20, Z
 1ec:	51 81       	ldd	r21, Z+1	; 0x01
 1ee:	82 81       	ldd	r24, Z+2	; 0x02
 1f0:	93 81       	ldd	r25, Z+3	; 0x03
 1f2:	60 81       	ld	r22, Z
 1f4:	71 81       	ldd	r23, Z+1	; 0x01
 1f6:	86 1b       	sub	r24, r22
 1f8:	97 0b       	sbc	r25, r23
 1fa:	95 95       	asr	r25
 1fc:	87 95       	ror	r24
 1fe:	84 0f       	add	r24, r20
 200:	95 1f       	adc	r25, r21
 202:	82 0f       	add	r24, r18
 204:	93 1f       	adc	r25, r19
 206:	f6 01       	movw	r30, r12
 208:	93 83       	std	Z+3, r25	; 0x03
 20a:	82 83       	std	Z+2, r24	; 0x02
	y_pos[1] = y_pos[0] + (y_vel[0] + ((y_vel[1] - y_vel[0])>>1));
 20c:	0f 2e       	mov	r0, r31
 20e:	fb e6       	ldi	r31, 0x6B	; 107
 210:	ef 2e       	mov	r14, r31
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ff 2e       	mov	r15, r31
 216:	f0 2d       	mov	r31, r0
 218:	f7 01       	movw	r30, r14
 21a:	20 81       	ld	r18, Z
 21c:	31 81       	ldd	r19, Z+1	; 0x01
 21e:	48 81       	ld	r20, Y
 220:	59 81       	ldd	r21, Y+1	; 0x01
 222:	8a 81       	ldd	r24, Y+2	; 0x02
 224:	9b 81       	ldd	r25, Y+3	; 0x03
 226:	68 81       	ld	r22, Y
 228:	79 81       	ldd	r23, Y+1	; 0x01
 22a:	86 1b       	sub	r24, r22
 22c:	97 0b       	sbc	r25, r23
 22e:	95 95       	asr	r25
 230:	87 95       	ror	r24
 232:	84 0f       	add	r24, r20
 234:	95 1f       	adc	r25, r21
 236:	28 0f       	add	r18, r24
 238:	39 1f       	adc	r19, r25
 23a:	33 83       	std	Z+3, r19	; 0x03
 23c:	22 83       	std	Z+2, r18	; 0x02
	
	uart_set_pos(x_pos[1], y_pos[1]);
 23e:	62 81       	ldd	r22, Z+2	; 0x02
 240:	73 81       	ldd	r23, Z+3	; 0x03
 242:	f6 01       	movw	r30, r12
 244:	82 81       	ldd	r24, Z+2	; 0x02
 246:	93 81       	ldd	r25, Z+3	; 0x03
 248:	e8 d1       	rcall	.+976    	; 0x61a <uart_set_pos>
	
	x_acc[0] = x_acc[1];
 24a:	f4 01       	movw	r30, r8
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	93 81       	ldd	r25, Z+3	; 0x03
 250:	91 83       	std	Z+1, r25	; 0x01
 252:	80 83       	st	Z, r24
	y_acc[0] = y_acc[1];
 254:	f5 01       	movw	r30, r10
 256:	82 81       	ldd	r24, Z+2	; 0x02
 258:	93 81       	ldd	r25, Z+3	; 0x03
 25a:	91 83       	std	Z+1, r25	; 0x01
 25c:	80 83       	st	Z, r24
	
	x_vel[0] = x_vel[1];
 25e:	f8 01       	movw	r30, r16
 260:	82 81       	ldd	r24, Z+2	; 0x02
 262:	93 81       	ldd	r25, Z+3	; 0x03
 264:	91 83       	std	Z+1, r25	; 0x01
 266:	80 83       	st	Z, r24
	y_vel[0] = y_vel[1];
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	9b 81       	ldd	r25, Y+3	; 0x03
 26c:	99 83       	std	Y+1, r25	; 0x01
 26e:	88 83       	st	Y, r24
	
	x_pos[0] = x_pos[1];
 270:	f6 01       	movw	r30, r12
 272:	82 81       	ldd	r24, Z+2	; 0x02
 274:	93 81       	ldd	r25, Z+3	; 0x03
 276:	91 83       	std	Z+1, r25	; 0x01
 278:	80 83       	st	Z, r24
	y_pos[0] = y_pos[1];
 27a:	f7 01       	movw	r30, r14
 27c:	82 81       	ldd	r24, Z+2	; 0x02
 27e:	93 81       	ldd	r25, Z+3	; 0x03
 280:	91 83       	std	Z+1, r25	; 0x01
 282:	80 83       	st	Z, r24
	


}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	bf 90       	pop	r11
 2ae:	af 90       	pop	r10
 2b0:	9f 90       	pop	r9
 2b2:	8f 90       	pop	r8
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <gauge_init>:
#include "i2c.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	4f ef       	ldi	r20, 0xFF	; 255
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	84 e6       	ldi	r24, 0x64	; 100
 2c6:	4f d1       	rcall	.+670    	; 0x566 <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 2c8:	2c e1       	ldi	r18, 0x1C	; 28
 2ca:	4c e7       	ldi	r20, 0x7C	; 124
 2cc:	66 e0       	ldi	r22, 0x06	; 6
 2ce:	84 e6       	ldi	r24, 0x64	; 100
 2d0:	4a d1       	rcall	.+660    	; 0x566 <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 2d2:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 2d4:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 2d6:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 2d8:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 2da:	89 b7       	in	r24, 0x39	; 57
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 2e0:	85 b7       	in	r24, 0x35	; 53
 2e2:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 2ea:	8b b7       	in	r24, 0x3b	; 59
 2ec:	80 68       	ori	r24, 0x80	; 128
 2ee:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 2f0:	8f b7       	in	r24, 0x3f	; 63
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	8f bf       	out	0x3f, r24	; 63
 2f6:	08 95       	ret

000002f8 <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 2f8:	cc d0       	rcall	.+408    	; 0x492 <i2c_send_start>
	i2c_send_data(ARA<<1);
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	08 d1       	rcall	.+528    	; 0x50e <i2c_send_data>
	i2c_get_ack();						
 2fe:	f6 d0       	rcall	.+492    	; 0x4ec <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 300:	41 d1       	rcall	.+642    	; 0x584 <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 302:	ec d0       	rcall	.+472    	; 0x4dc <i2c_send_nack>
	i2c_send_stop();
 304:	da d0       	rcall	.+436    	; 0x4ba <i2c_send_stop>
 306:	08 95       	ret

00000308 <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	4f 93       	push	r20
 318:	5f 93       	push	r21
 31a:	6f 93       	push	r22
 31c:	7f 93       	push	r23
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 32a:	03 b6       	in	r0, 0x33	; 51
 32c:	02 fe       	sbrs	r0, 2
 32e:	13 c0       	rjmp	.+38     	; 0x356 <__vector_2+0x4e>
 330:	03 b6       	in	r0, 0x33	; 51
 332:	00 fe       	sbrs	r0, 0
 334:	10 c0       	rjmp	.+32     	; 0x356 <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 336:	83 b7       	in	r24, 0x33	; 51
 338:	8a 7f       	andi	r24, 0xFA	; 250
 33a:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 33c:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	64 e0       	ldi	r22, 0x04	; 4
 344:	84 e6       	ldi	r24, 0x64	; 100
 346:	0f d1       	rcall	.+542    	; 0x566 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 348:	2c e1       	ldi	r18, 0x1C	; 28
 34a:	4c e7       	ldi	r20, 0x7C	; 124
 34c:	66 e0       	ldi	r22, 0x06	; 6
 34e:	84 e6       	ldi	r24, 0x64	; 100
 350:	0a d1       	rcall	.+532    	; 0x566 <i2c_burst_write>
		gauge_send_arp();	
 352:	d2 df       	rcall	.-92     	; 0x2f8 <gauge_send_arp>
 354:	0f c0       	rjmp	.+30     	; 0x374 <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 356:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 358:	83 b7       	in	r24, 0x33	; 51
 35a:	85 60       	ori	r24, 0x05	; 5
 35c:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	66 e0       	ldi	r22, 0x06	; 6
 364:	84 e6       	ldi	r24, 0x64	; 100
 366:	ff d0       	rcall	.+510    	; 0x566 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 368:	2d ef       	ldi	r18, 0xFD	; 253
 36a:	4d e7       	ldi	r20, 0x7D	; 125
 36c:	64 e0       	ldi	r22, 0x04	; 4
 36e:	84 e6       	ldi	r24, 0x64	; 100
 370:	fa d0       	rcall	.+500    	; 0x566 <i2c_burst_write>
		gauge_send_arp();
 372:	c2 df       	rcall	.-124    	; 0x2f8 <gauge_send_arp>
	}
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_6>:

ISR(TIMER0_OVF_vect){
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
	if(count == 17){
 3a4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <count>
 3a8:	81 31       	cpi	r24, 0x11	; 17
 3aa:	39 f4       	brne	.+14     	; 0x3ba <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 3ac:	98 b3       	in	r25, 0x18	; 24
 3ae:	80 e1       	ldi	r24, 0x10	; 16
 3b0:	89 27       	eor	r24, r25
 3b2:	88 bb       	out	0x18, r24	; 24
		count = 0;
 3b4:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <count>
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <__vector_6+0x2a>
	}else{
		count++;
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <count>
	}
}
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <buttons_init>:
#include "uart.h"

volatile uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 3ce:	87 b3       	in	r24, 0x17	; 23
 3d0:	80 7f       	andi	r24, 0xF0	; 240
 3d2:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 3d4:	80 b5       	in	r24, 0x20	; 32
 3d6:	8f 60       	ori	r24, 0x0F	; 15
 3d8:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 3da:	8b b7       	in	r24, 0x3b	; 59
 3dc:	80 62       	ori	r24, 0x20	; 32
 3de:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 3e0:	8f b7       	in	r24, 0x3f	; 63
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	8f bf       	out	0x3f, r24	; 63
 3e6:	08 95       	ret

000003e8 <__vector_11>:
}

ISR(PCINT0_vect){		
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	4f 93       	push	r20
 3f8:	5f 93       	push	r21
 3fa:	6f 93       	push	r22
 3fc:	7f 93       	push	r23
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	af 93       	push	r26
 404:	bf 93       	push	r27
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 40e:	d6 b3       	in	r29, 0x16	; 22
 410:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 412:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <old_buttons>
 416:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 418:	c0 ff       	sbrs	r28, 0
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
 420:	80 ff       	sbrs	r24, 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		uart_set_button(0);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	00 d1       	rcall	.+512    	; 0x628 <uart_set_button>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 428:	c1 ff       	sbrs	r28, 1
 42a:	06 c0       	rjmp	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
 430:	81 ff       	sbrs	r24, 1
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		uart_set_button(1);
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	f8 d0       	rcall	.+496    	; 0x628 <uart_set_button>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 438:	c2 ff       	sbrs	r28, 2
 43a:	06 c0       	rjmp	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 43c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
 440:	82 ff       	sbrs	r24, 2
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		uart_set_button(2);
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	f0 d0       	rcall	.+480    	; 0x628 <uart_set_button>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 448:	c3 fd       	sbrc	r28, 3
 44a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <old_buttons>
		
	}
	old_buttons = new_buttons;
 44e:	d0 93 84 00 	sts	0x0084, r29	; 0x800084 <old_buttons>
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	8f b9       	out	0x0f, r24	; 15
 47c:	88 b3       	in	r24, 0x18	; 24
 47e:	80 6a       	ori	r24, 0xA0	; 160
 480:	88 bb       	out	0x18, r24	; 24
 482:	87 b3       	in	r24, 0x17	; 23
 484:	80 6a       	ori	r24, 0xA0	; 160
 486:	87 bb       	out	0x17, r24	; 23
 488:	8a e2       	ldi	r24, 0x2A	; 42
 48a:	8d b9       	out	0x0d, r24	; 13
 48c:	80 ef       	ldi	r24, 0xF0	; 240
 48e:	8e b9       	out	0x0e, r24	; 14
 490:	08 95       	ret

00000492 <i2c_send_start>:
 492:	88 b3       	in	r24, 0x18	; 24
 494:	80 6a       	ori	r24, 0xA0	; 160
 496:	88 bb       	out	0x18, r24	; 24
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	98 b3       	in	r25, 0x18	; 24
 49c:	88 b3       	in	r24, 0x18	; 24
 49e:	85 fb       	bst	r24, 5
 4a0:	88 27       	eor	r24, r24
 4a2:	80 f9       	bld	r24, 0
 4a4:	82 13       	cpse	r24, r18
 4a6:	f9 cf       	rjmp	.-14     	; 0x49a <i2c_send_start+0x8>
 4a8:	99 23       	and	r25, r25
 4aa:	bc f7       	brge	.-18     	; 0x49a <i2c_send_start+0x8>
 4ac:	c5 98       	cbi	0x18, 5	; 24
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	8a 95       	dec	r24
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <i2c_send_start+0x1e>
 4b4:	00 00       	nop
 4b6:	c7 98       	cbi	0x18, 7	; 24
 4b8:	08 95       	ret

000004ba <i2c_send_stop>:
 4ba:	c5 98       	cbi	0x18, 5	; 24
 4bc:	c7 9a       	sbi	0x18, 7	; 24
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	8a 95       	dec	r24
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <i2c_send_stop+0x6>
 4c4:	00 00       	nop
 4c6:	c5 9a       	sbi	0x18, 5	; 24
 4c8:	08 95       	ret

000004ca <i2c_send_ack>:
 4ca:	c5 98       	cbi	0x18, 5	; 24
 4cc:	c7 9a       	sbi	0x18, 7	; 24
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	8a 95       	dec	r24
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <i2c_send_ack+0x6>
 4d4:	00 00       	nop
 4d6:	c7 98       	cbi	0x18, 7	; 24
 4d8:	c5 9a       	sbi	0x18, 5	; 24
 4da:	08 95       	ret

000004dc <i2c_send_nack>:
 4dc:	c5 9a       	sbi	0x18, 5	; 24
 4de:	c7 9a       	sbi	0x18, 7	; 24
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	8a 95       	dec	r24
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <i2c_send_nack+0x6>
 4e6:	00 00       	nop
 4e8:	c7 98       	cbi	0x18, 7	; 24
 4ea:	08 95       	ret

000004ec <i2c_get_ack>:
 4ec:	bd 98       	cbi	0x17, 5	; 23
 4ee:	68 9a       	sbi	0x0d, 0	; 13
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	8a 95       	dec	r24
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <i2c_get_ack+0x6>
 4f6:	00 00       	nop
 4f8:	68 9a       	sbi	0x0d, 0	; 13
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	8a 95       	dec	r24
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <i2c_get_ack+0x10>
 500:	00 00       	nop
 502:	8f b1       	in	r24, 0x0f	; 15
 504:	9f ef       	ldi	r25, 0xFF	; 255
 506:	9f b9       	out	0x0f, r25	; 15
 508:	bd 9a       	sbi	0x17, 5	; 23
 50a:	81 70       	andi	r24, 0x01	; 1
 50c:	08 95       	ret

0000050e <i2c_send_data>:
 50e:	8f b9       	out	0x0f, r24	; 15
 510:	c5 9a       	sbi	0x18, 5	; 24
 512:	8e b1       	in	r24, 0x0e	; 14
 514:	80 7f       	andi	r24, 0xF0	; 240
 516:	8e b9       	out	0x0e, r24	; 14
 518:	68 9a       	sbi	0x0d, 0	; 13
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	8a 95       	dec	r24
 51e:	f1 f7       	brne	.-4      	; 0x51c <i2c_send_data+0xe>
 520:	00 00       	nop
 522:	68 9a       	sbi	0x0d, 0	; 13
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	8a 95       	dec	r24
 528:	f1 f7       	brne	.-4      	; 0x526 <i2c_send_data+0x18>
 52a:	00 00       	nop
 52c:	76 9b       	sbis	0x0e, 6	; 14
 52e:	f4 cf       	rjmp	.-24     	; 0x518 <i2c_send_data+0xa>
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	8f b9       	out	0x0f, r24	; 15
 534:	08 95       	ret

00000536 <i2c_send_reg_add>:
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	d8 2f       	mov	r29, r24
 53c:	c6 2f       	mov	r28, r22
 53e:	a9 df       	rcall	.-174    	; 0x492 <i2c_send_start>
 540:	8d 2f       	mov	r24, r29
 542:	88 0f       	add	r24, r24
 544:	e4 df       	rcall	.-56     	; 0x50e <i2c_send_data>
 546:	d2 df       	rcall	.-92     	; 0x4ec <i2c_get_ack>
 548:	8c 2f       	mov	r24, r28
 54a:	e1 df       	rcall	.-62     	; 0x50e <i2c_send_data>
 54c:	cf df       	rcall	.-98     	; 0x4ec <i2c_get_ack>
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <i2c_single_write>:
 554:	cf 93       	push	r28
 556:	c4 2f       	mov	r28, r20
 558:	ee df       	rcall	.-36     	; 0x536 <i2c_send_reg_add>
 55a:	8c 2f       	mov	r24, r28
 55c:	d8 df       	rcall	.-80     	; 0x50e <i2c_send_data>
 55e:	c6 df       	rcall	.-116    	; 0x4ec <i2c_get_ack>
 560:	ac df       	rcall	.-168    	; 0x4ba <i2c_send_stop>
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <i2c_burst_write>:
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	d4 2f       	mov	r29, r20
 56c:	c2 2f       	mov	r28, r18
 56e:	e3 df       	rcall	.-58     	; 0x536 <i2c_send_reg_add>
 570:	8d 2f       	mov	r24, r29
 572:	cd df       	rcall	.-102    	; 0x50e <i2c_send_data>
 574:	bb df       	rcall	.-138    	; 0x4ec <i2c_get_ack>
 576:	8c 2f       	mov	r24, r28
 578:	ca df       	rcall	.-108    	; 0x50e <i2c_send_data>
 57a:	b8 df       	rcall	.-144    	; 0x4ec <i2c_get_ack>
 57c:	9e df       	rcall	.-196    	; 0x4ba <i2c_send_stop>
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <i2c_get_data>:
 584:	bd 98       	cbi	0x17, 5	; 23
 586:	8e b1       	in	r24, 0x0e	; 14
 588:	80 7f       	andi	r24, 0xF0	; 240
 58a:	8e b9       	out	0x0e, r24	; 14
 58c:	68 9a       	sbi	0x0d, 0	; 13
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	8a 95       	dec	r24
 592:	f1 f7       	brne	.-4      	; 0x590 <i2c_get_data+0xc>
 594:	00 00       	nop
 596:	68 9a       	sbi	0x0d, 0	; 13
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	8a 95       	dec	r24
 59c:	f1 f7       	brne	.-4      	; 0x59a <i2c_get_data+0x16>
 59e:	00 00       	nop
 5a0:	76 9b       	sbis	0x0e, 6	; 14
 5a2:	f4 cf       	rjmp	.-24     	; 0x58c <i2c_get_data+0x8>
 5a4:	8f b1       	in	r24, 0x0f	; 15
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	9f b9       	out	0x0f, r25	; 15
 5aa:	bd 9a       	sbi	0x17, 5	; 23
 5ac:	08 95       	ret

000005ae <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 5b4:	c0 df       	rcall	.-128    	; 0x536 <i2c_send_reg_add>
	i2c_send_start();
 5b6:	6d df       	rcall	.-294    	; 0x492 <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 5b8:	8c 2f       	mov	r24, r28
 5ba:	88 0f       	add	r24, r24
 5bc:	81 60       	ori	r24, 0x01	; 1
 5be:	a7 df       	rcall	.-178    	; 0x50e <i2c_send_data>
	i2c_get_ack();
 5c0:	95 df       	rcall	.-214    	; 0x4ec <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 5c2:	e0 df       	rcall	.-64     	; 0x584 <i2c_get_data>
 5c4:	c8 2f       	mov	r28, r24
 5c6:	d0 e0       	ldi	r29, 0x00	; 0
 5c8:	dc 2f       	mov	r29, r28
 5ca:	cc 27       	eor	r28, r28
	i2c_send_ack();
 5cc:	7e df       	rcall	.-260    	; 0x4ca <i2c_send_ack>
	ret |= i2c_get_data();
 5ce:	da df       	rcall	.-76     	; 0x584 <i2c_get_data>
 5d0:	c8 2b       	or	r28, r24
	i2c_send_nack();
 5d2:	84 df       	rcall	.-248    	; 0x4dc <i2c_send_nack>
	i2c_send_stop();
 5d4:	72 df       	rcall	.-284    	; 0x4ba <i2c_send_stop>
	return(ret);
}
 5d6:	ce 01       	movw	r24, r28
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 5e2:	16 bc       	out	0x26, r1	; 38
	
	i2c_init();
 5e4:	49 df       	rcall	.-366    	; 0x478 <i2c_init>
	uart_init();
 5e6:	04 d0       	rcall	.+8      	; 0x5f0 <uart_init>
	buttons_init();
 5e8:	f2 de       	rcall	.-540    	; 0x3ce <buttons_init>
	gauge_init();
 5ea:	69 de       	rcall	.-814    	; 0x2be <gauge_init>
	acc_init();
 5ec:	38 dd       	rcall	.-1424   	; 0x5e <acc_init>
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <main+0x10>

000005f0 <uart_init>:
volatile static uint8_t tx_tele[BUFFER_SIZE] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
volatile static uint8_t tx_buffer[BUFFER_SIZE];
volatile static uint8_t ovf_counter = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 5f0:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 5f2:	89 e1       	ldi	r24, 0x19	; 25
 5f4:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 5f6:	88 e0       	ldi	r24, 0x08	; 8
 5f8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);					//set 8-bit character, set 1 stop bit
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	83 b9       	out	0x03, r24	; 3
	
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
 5fe:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);		//8MHz with 8 prescaler, clear timer on compare results in 1MHz counter
 600:	8a e0       	ldi	r24, 0x0A	; 10
 602:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);										//enable output compare A match interrupt
 604:	89 b7       	in	r24, 0x39	; 57
 606:	80 64       	ori	r24, 0x40	; 64
 608:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0x27;												//compare on 10000 clock cycles resulting in 10 milliseconds
 60a:	87 e2       	ldi	r24, 0x27	; 39
 60c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0x10;												
 60e:	80 e1       	ldi	r24, 0x10	; 16
 610:	8a bd       	out	0x2a, r24	; 42
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 612:	8f b7       	in	r24, 0x3f	; 63
 614:	80 68       	ori	r24, 0x80	; 128
 616:	8f bf       	out	0x3f, r24	; 63
 618:	08 95       	ret

0000061a <uart_set_pos>:
}

void uart_set_pos(int16_t xpos, int16_t ypos){
	tx_tele[0] = (xpos&0xFF);		//x_pos_LSB
 61a:	e0 e6       	ldi	r30, 0x60	; 96
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 83       	st	Z, r24
	tx_tele[1] = (xpos>>8);			//x_pos_MSB
 620:	91 83       	std	Z+1, r25	; 0x01
	tx_tele[2] = (ypos&0xFF);		//y_pos_LSB
 622:	62 83       	std	Z+2, r22	; 0x02
	tx_tele[3] = (ypos>>8);			//y_pos_MSB
 624:	73 83       	std	Z+3, r23	; 0x03
 626:	08 95       	ret

00000628 <uart_set_button>:
}

void uart_set_button(uint8_t button){
	tx_tele[4] = (1<<button);		//set one button as pressed
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <uart_set_button+0xa>
 62e:	22 0f       	add	r18, r18
 630:	33 1f       	adc	r19, r19
 632:	8a 95       	dec	r24
 634:	e2 f7       	brpl	.-8      	; 0x62e <uart_set_button+0x6>
 636:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__data_start+0x4>
 63a:	08 95       	ret

0000063c <uart_putc>:
}

void uart_putc(uint8_t c){
 63c:	38 2f       	mov	r19, r24
	uint8_t tmp_head = (tx_head + 1) % BUFFER_SIZE;
 63e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <tx_head>
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	65 e0       	ldi	r22, 0x05	; 5
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	7c d0       	rcall	.+248    	; 0x744 <__divmodhi4>
 64c:	28 2f       	mov	r18, r24
	while(tmp_head == tx_tail);
 64e:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <tx_tail>
 652:	29 17       	cp	r18, r25
 654:	e1 f3       	breq	.-8      	; 0x64e <uart_putc+0x12>
	tx_buffer[tx_head] = c;
 656:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <tx_head>
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	eb 57       	subi	r30, 0x7B	; 123
 65e:	ff 4f       	sbci	r31, 0xFF	; 255
 660:	30 83       	st	Z, r19
	tx_head = tmp_head;
 662:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <tx_head>
	UCSRB |= (1<<UDRIE);
 666:	55 9a       	sbi	0x0a, 5	; 10
 668:	08 95       	ret

0000066a <__vector_8>:
}

ISR(USART_UDRE_vect){
 66a:	1f 92       	push	r1
 66c:	0f 92       	push	r0
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	0f 92       	push	r0
 672:	11 24       	eor	r1, r1
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	uint8_t tmp_tail = 0;
	if(tx_tail != tx_head){
 686:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <tx_tail>
 68a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <tx_head>
 68e:	98 17       	cp	r25, r24
 690:	89 f0       	breq	.+34     	; 0x6b4 <__vector_8+0x4a>
		tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 692:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <tx_tail>
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	65 e0       	ldi	r22, 0x05	; 5
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	52 d0       	rcall	.+164    	; 0x744 <__divmodhi4>
		UDR = tx_buffer[tx_tail];
 6a0:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <tx_tail>
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	eb 57       	subi	r30, 0x7B	; 123
 6a8:	ff 4f       	sbci	r31, 0xFF	; 255
 6aa:	90 81       	ld	r25, Z
 6ac:	9c b9       	out	0x0c, r25	; 12
		tx_tail = tmp_tail;
 6ae:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <tx_tail>
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <__vector_8+0x4c>
	}else{
		UCSRB &= ~(1<<UDRIE);
 6b4:	55 98       	cbi	0x0a, 5	; 10
	}
}
 6b6:	ff 91       	pop	r31
 6b8:	ef 91       	pop	r30
 6ba:	bf 91       	pop	r27
 6bc:	af 91       	pop	r26
 6be:	9f 91       	pop	r25
 6c0:	8f 91       	pop	r24
 6c2:	7f 91       	pop	r23
 6c4:	6f 91       	pop	r22
 6c6:	5f 91       	pop	r21
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <__vector_4>:

ISR(TIMER1_COMPA_vect){
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	ef 93       	push	r30
 6f6:	ff 93       	push	r31
 6f8:	c0 e0       	ldi	r28, 0x00	; 0
 6fa:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < BUFFER_SIZE; i++){
		uart_putc(tx_tele[i]);		//put telegram in UART-buffer
 6fc:	fe 01       	movw	r30, r28
 6fe:	e0 5a       	subi	r30, 0xA0	; 160
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	80 81       	ld	r24, Z
 704:	9b df       	rcall	.-202    	; 0x63c <uart_putc>
 706:	21 96       	adiw	r28, 0x01	; 1
		UCSRB &= ~(1<<UDRIE);
	}
}

ISR(TIMER1_COMPA_vect){
	for(uint8_t i = 0; i < BUFFER_SIZE; i++){
 708:	c5 30       	cpi	r28, 0x05	; 5
 70a:	d1 05       	cpc	r29, r1
 70c:	b9 f7       	brne	.-18     	; 0x6fc <__vector_4+0x2a>
		uart_putc(tx_tele[i]);		//put telegram in UART-buffer
	}
	tx_tele[0] = 0x00;				//reset telegram
 70e:	e0 e6       	ldi	r30, 0x60	; 96
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	10 82       	st	Z, r1
	tx_tele[1] = 0xFF;
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	81 83       	std	Z+1, r24	; 0x01
	tx_tele[2] = 0xFF;
 718:	82 83       	std	Z+2, r24	; 0x02
	tx_tele[3] = 0xFF;
 71a:	83 83       	std	Z+3, r24	; 0x03
	tx_tele[4] = 0xFF;
 71c:	84 83       	std	Z+4, r24	; 0x04
}
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	bf 91       	pop	r27
 728:	af 91       	pop	r26
 72a:	9f 91       	pop	r25
 72c:	8f 91       	pop	r24
 72e:	7f 91       	pop	r23
 730:	6f 91       	pop	r22
 732:	5f 91       	pop	r21
 734:	4f 91       	pop	r20
 736:	3f 91       	pop	r19
 738:	2f 91       	pop	r18
 73a:	0f 90       	pop	r0
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti

00000744 <__divmodhi4>:
 744:	97 fb       	bst	r25, 7
 746:	07 2e       	mov	r0, r23
 748:	16 f4       	brtc	.+4      	; 0x74e <__divmodhi4+0xa>
 74a:	00 94       	com	r0
 74c:	06 d0       	rcall	.+12     	; 0x75a <__divmodhi4_neg1>
 74e:	77 fd       	sbrc	r23, 7
 750:	08 d0       	rcall	.+16     	; 0x762 <__divmodhi4_neg2>
 752:	0b d0       	rcall	.+22     	; 0x76a <__udivmodhi4>
 754:	07 fc       	sbrc	r0, 7
 756:	05 d0       	rcall	.+10     	; 0x762 <__divmodhi4_neg2>
 758:	3e f4       	brtc	.+14     	; 0x768 <__divmodhi4_exit>

0000075a <__divmodhi4_neg1>:
 75a:	90 95       	com	r25
 75c:	81 95       	neg	r24
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__divmodhi4_neg2>:
 762:	70 95       	com	r23
 764:	61 95       	neg	r22
 766:	7f 4f       	sbci	r23, 0xFF	; 255

00000768 <__divmodhi4_exit>:
 768:	08 95       	ret

0000076a <__udivmodhi4>:
 76a:	aa 1b       	sub	r26, r26
 76c:	bb 1b       	sub	r27, r27
 76e:	51 e1       	ldi	r21, 0x11	; 17
 770:	07 c0       	rjmp	.+14     	; 0x780 <__udivmodhi4_ep>

00000772 <__udivmodhi4_loop>:
 772:	aa 1f       	adc	r26, r26
 774:	bb 1f       	adc	r27, r27
 776:	a6 17       	cp	r26, r22
 778:	b7 07       	cpc	r27, r23
 77a:	10 f0       	brcs	.+4      	; 0x780 <__udivmodhi4_ep>
 77c:	a6 1b       	sub	r26, r22
 77e:	b7 0b       	sbc	r27, r23

00000780 <__udivmodhi4_ep>:
 780:	88 1f       	adc	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	5a 95       	dec	r21
 786:	a9 f7       	brne	.-22     	; 0x772 <__udivmodhi4_loop>
 788:	80 95       	com	r24
 78a:	90 95       	com	r25
 78c:	bc 01       	movw	r22, r24
 78e:	cd 01       	movw	r24, r26
 790:	08 95       	ret

00000792 <_exit>:
 792:	f8 94       	cli

00000794 <__stop_program>:
 794:	ff cf       	rjmp	.-2      	; 0x794 <__stop_program>
