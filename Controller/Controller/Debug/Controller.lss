
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000156  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f6  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075d  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000687  00000000  00000000  0000149f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031d  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000249f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	7e c0       	rjmp	.+252    	; 0x10e <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	52 c0       	rjmp	.+164    	; 0xc0 <__vector_13>
  1c:	66 c0       	rjmp	.+204    	; 0xea <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e5       	ldi	r30, 0x56	; 86
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	16 d0       	rcall	.+44     	; 0x86 <main>
  5a:	7b c0       	rjmp	.+246    	; 0x152 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:
 void init_external_interrupt1_gpio(void){
	 MCUCR |= (1 << ISC10);				//The rising edge of INT1 generates an interrupt request
	 MCUCR |= (1 << ISC11);
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <__vector_2>:
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
	  
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <main>:
#include "timer.h"


int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
  8a:	16 bc       	out	0x26, r1	; 38
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	83 ed       	ldi	r24, 0xD3	; 211
  90:	90 e3       	ldi	r25, 0x30	; 48
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0xc>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x16>
  9c:	00 00       	nop
/*	DDRB |= (1<<2);
	PORTB &= ~(1<<2);*/
	_delay_ms(2000);
	init_timer0();
  9e:	01 d0       	rcall	.+2      	; 0xa2 <init_timer0>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x1a>

000000a2 <init_timer0>:
 #include "timer.h"

uint8_t count = 0;

 void init_timer0(void){
	DDRB |= (1<<DDB2);
  a2:	ba 9a       	sbi	0x17, 2	; 23
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
  a4:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00);		//Select 8MHz clock with no prescaler
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	83 bf       	out	0x33, r24	; 51
	OCR0A = 9;									//Set match register on 10 pulses
  aa:	89 e0       	ldi	r24, 0x09	; 9
  ac:	86 bf       	out	0x36, r24	; 54
	OCR0B = 160;
  ae:	80 ea       	ldi	r24, 0xA0	; 160
  b0:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0A);
  b2:	89 b7       	in	r24, 0x39	; 57
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<SREG_I);						//enable global interrupt
  b8:	8f b7       	in	r24, 0x3f	; 63
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	8f bf       	out	0x3f, r24	; 63
  be:	08 95       	ret

000000c0 <__vector_13>:
 }
 ISR(TIMER0_COMPA_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	 OCR0A += 10;
  ce:	86 b7       	in	r24, 0x36	; 54
  d0:	86 5f       	subi	r24, 0xF6	; 246
  d2:	86 bf       	out	0x36, r24	; 54
	 PORTB ^= (1<<2);
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	89 27       	eor	r24, r25
  da:	88 bb       	out	0x18, r24	; 24
 }
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_14>:
 
 
 ISR(TIMER0_COMPB_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	TCCR0A &= ~((1<<COM0A1)|(1<<COM0A0));
  f6:	80 b7       	in	r24, 0x30	; 48
  f8:	8f 73       	andi	r24, 0x3F	; 63
  fa:	80 bf       	out	0x30, r24	; 48
	OCR0A = 9;
  fc:	89 e0       	ldi	r24, 0x09	; 9
  fe:	86 bf       	out	0x36, r24	; 54
	TCNT0 = 0x00;
 100:	12 be       	out	0x32, r1	; 50
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_8>:
  bytes = 2;
  UCSRB |= (1<<UDRIE);							// enable uart data interrupt (send data)
}

//send a command out of the buffer
ISR(USART_UDRE_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	if(bytes > 0){
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 122:	88 23       	and	r24, r24
 124:	69 f0       	breq	.+26     	; 0x140 <__vector_8+0x32>
		UDR = tx_buffer[bytes];					//write byte to data register
 126:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ee 59       	subi	r30, 0x9E	; 158
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	80 81       	ld	r24, Z
 132:	8c b9       	out	0x0c, r24	; 12
		bytes--;								//lower bytes by one
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 13e:	01 c0       	rjmp	.+2      	; 0x142 <__vector_8+0x34>
	}else{
		UCSRB &= ~(1<<UDRIE);					//disable interrupt
 140:	55 98       	cbi	0x0a, 5	; 10
	}
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
