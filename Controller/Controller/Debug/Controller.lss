
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001374  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000997  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb4  00000000  00000000  00002413  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00002fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051f  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a41  00000000  00000000  0000386f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000042b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	45 c0       	rjmp	.+138    	; 0x8e <__vector_1>
   4:	a0 c0       	rjmp	.+320    	; 0x146 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	66 c0       	rjmp	.+204    	; 0xd8 <__vector_5>
   c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	2e c2       	rjmp	.+1116   	; 0x46e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	08 c1       	rjmp	.+528    	; 0x228 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	f6 d1       	rcall	.+1004   	; 0x430 <main>
  44:	39 c2       	rjmp	.+1138   	; 0x4b8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <acc_init>:
		count++;
	}while(count != 0x0400);
	
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
}
  48:	40 d1       	rcall	.+640    	; 0x2ca <i2c_init>
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	6b e6       	ldi	r22, 0x6B	; 107
  4e:	88 e6       	ldi	r24, 0x68	; 104
  50:	aa d1       	rcall	.+852    	; 0x3a6 <i2c_single_write>
  52:	40 e0       	ldi	r20, 0x00	; 0
  54:	6c e1       	ldi	r22, 0x1C	; 28
  56:	88 e6       	ldi	r24, 0x68	; 104
  58:	a6 d1       	rcall	.+844    	; 0x3a6 <i2c_single_write>
  5a:	40 e0       	ldi	r20, 0x00	; 0
  5c:	69 e1       	ldi	r22, 0x19	; 25
  5e:	88 e6       	ldi	r24, 0x68	; 104
  60:	a2 d1       	rcall	.+836    	; 0x3a6 <i2c_single_write>
  62:	40 e0       	ldi	r20, 0x00	; 0
  64:	67 e3       	ldi	r22, 0x37	; 55
  66:	88 e6       	ldi	r24, 0x68	; 104
  68:	9e d1       	rcall	.+828    	; 0x3a6 <i2c_single_write>
  6a:	41 e0       	ldi	r20, 0x01	; 1
  6c:	68 e3       	ldi	r22, 0x38	; 56
  6e:	88 e6       	ldi	r24, 0x68	; 104
  70:	9a d1       	rcall	.+820    	; 0x3a6 <i2c_single_write>
  72:	e5 d1       	rcall	.+970    	; 0x43e <uart_init>
  74:	85 b7       	in	r24, 0x35	; 53
  76:	81 60       	ori	r24, 0x01	; 1
  78:	85 bf       	out	0x35, r24	; 53
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	85 bf       	out	0x35, r24	; 53
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8b bf       	out	0x3b, r24	; 59
  86:	8f b7       	in	r24, 0x3f	; 63
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8f bf       	out	0x3f, r24	; 63
  8c:	08 95       	ret

0000008e <__vector_1>:

ISR(INT0_vect){		//External interrupt0 service routine
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	4f 93       	push	r20
  9e:	5f 93       	push	r21
  a0:	6f 93       	push	r22
  a2:	7f 93       	push	r23
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	af 93       	push	r26
  aa:	bf 93       	push	r27
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
/*	uint16_t time = 0;
	time = TCNT1;
	TCNT1 = 0x0000;
	ovf_counter = 0;
*/	
	i2c_burst_read(ACC_ADD, X_MSB);
  b0:	6b e3       	ldi	r22, 0x3B	; 59
  b2:	88 e6       	ldi	r24, 0x68	; 104
  b4:	a5 d1       	rcall	.+842    	; 0x400 <i2c_burst_read>
}
  b6:	ff 91       	pop	r31
  b8:	ef 91       	pop	r30
  ba:	bf 91       	pop	r27
  bc:	af 91       	pop	r26
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	7f 91       	pop	r23
  c4:	6f 91       	pop	r22
  c6:	5f 91       	pop	r21
  c8:	4f 91       	pop	r20
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_5>:

ISR(TIMER1_OVF_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	ovf_counter++;
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <gauge_init>:
#include "i2c.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_init();
  fa:	e7 d0       	rcall	.+462    	; 0x2ca <i2c_init>
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	4f ef       	ldi	r20, 0xFF	; 255
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	59 d1       	rcall	.+690    	; 0x3b8 <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 106:	2c e1       	ldi	r18, 0x1C	; 28
 108:	4c e7       	ldi	r20, 0x7C	; 124
 10a:	66 e0       	ldi	r22, 0x06	; 6
 10c:	84 e6       	ldi	r24, 0x64	; 100
 10e:	54 d1       	rcall	.+680    	; 0x3b8 <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 110:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 112:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 114:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 116:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 118:	89 b7       	in	r24, 0x39	; 57
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 11e:	85 b7       	in	r24, 0x35	; 53
 120:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 122:	85 b7       	in	r24, 0x35	; 53
 124:	88 60       	ori	r24, 0x08	; 8
 126:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 128:	8b b7       	in	r24, 0x3b	; 59
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 12e:	8f b7       	in	r24, 0x3f	; 63
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8f bf       	out	0x3f, r24	; 63
 134:	08 95       	ret

00000136 <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 136:	d6 d0       	rcall	.+428    	; 0x2e4 <i2c_send_start>
	i2c_send_data(ARA<<1);
 138:	88 e1       	ldi	r24, 0x18	; 24
 13a:	12 d1       	rcall	.+548    	; 0x360 <i2c_send_data>
	i2c_get_ack();						
 13c:	00 d1       	rcall	.+512    	; 0x33e <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 13e:	4b d1       	rcall	.+662    	; 0x3d6 <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 140:	f6 d0       	rcall	.+492    	; 0x32e <i2c_send_nack>
	i2c_send_stop();
 142:	e4 d0       	rcall	.+456    	; 0x30c <i2c_send_stop>
 144:	08 95       	ret

00000146 <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 168:	03 b6       	in	r0, 0x33	; 51
 16a:	02 fe       	sbrs	r0, 2
 16c:	13 c0       	rjmp	.+38     	; 0x194 <__vector_2+0x4e>
 16e:	03 b6       	in	r0, 0x33	; 51
 170:	00 fe       	sbrs	r0, 0
 172:	10 c0       	rjmp	.+32     	; 0x194 <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 174:	83 b7       	in	r24, 0x33	; 51
 176:	8a 7f       	andi	r24, 0xFA	; 250
 178:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 17a:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	84 e6       	ldi	r24, 0x64	; 100
 184:	19 d1       	rcall	.+562    	; 0x3b8 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 186:	2c e1       	ldi	r18, 0x1C	; 28
 188:	4c e7       	ldi	r20, 0x7C	; 124
 18a:	66 e0       	ldi	r22, 0x06	; 6
 18c:	84 e6       	ldi	r24, 0x64	; 100
 18e:	14 d1       	rcall	.+552    	; 0x3b8 <i2c_burst_write>
		gauge_send_arp();	
 190:	d2 df       	rcall	.-92     	; 0x136 <gauge_send_arp>
 192:	0f c0       	rjmp	.+30     	; 0x1b2 <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 194:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 196:	83 b7       	in	r24, 0x33	; 51
 198:	85 60       	ori	r24, 0x05	; 5
 19a:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	66 e0       	ldi	r22, 0x06	; 6
 1a2:	84 e6       	ldi	r24, 0x64	; 100
 1a4:	09 d1       	rcall	.+530    	; 0x3b8 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 1a6:	2d ef       	ldi	r18, 0xFD	; 253
 1a8:	4d e7       	ldi	r20, 0x7D	; 125
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	84 e6       	ldi	r24, 0x64	; 100
 1ae:	04 d1       	rcall	.+520    	; 0x3b8 <i2c_burst_write>
		gauge_send_arp();
 1b0:	c2 df       	rcall	.-124    	; 0x136 <gauge_send_arp>
	}
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_6>:

ISR(TIMER0_OVF_vect){
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
	if(count == 17){
 1e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count>
 1e6:	81 31       	cpi	r24, 0x11	; 17
 1e8:	39 f4       	brne	.+14     	; 0x1f8 <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 1ea:	98 b3       	in	r25, 0x18	; 24
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	89 27       	eor	r24, r25
 1f0:	88 bb       	out	0x18, r24	; 24
		count = 0;
 1f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count>
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <__vector_6+0x2a>
	}else{
		count++;
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count>
	}
}
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <buttons_init>:
#include "uart.h"

volatile uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 20c:	87 b3       	in	r24, 0x17	; 23
 20e:	80 7f       	andi	r24, 0xF0	; 240
 210:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 212:	80 b5       	in	r24, 0x20	; 32
 214:	8f 60       	ori	r24, 0x0F	; 15
 216:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 218:	8b b7       	in	r24, 0x3b	; 59
 21a:	80 62       	ori	r24, 0x20	; 32
 21c:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 21e:	8f b7       	in	r24, 0x3f	; 63
 220:	80 68       	ori	r24, 0x80	; 128
 222:	8f bf       	out	0x3f, r24	; 63
	
	uart_init();
 224:	0c d1       	rcall	.+536    	; 0x43e <uart_init>
 226:	08 95       	ret

00000228 <__vector_11>:
}

ISR(PCINT0_vect){		
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 24e:	d6 b3       	in	r29, 0x16	; 22
 250:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 252:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <old_buttons>
 256:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 258:	c0 ff       	sbrs	r28, 0
 25a:	07 c0       	rjmp	.+14     	; 0x26a <__vector_11+0x42>
 25c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 260:	80 ff       	sbrs	r24, 0
 262:	03 c0       	rjmp	.+6      	; 0x26a <__vector_11+0x42>
		uart_put_com(0xBB, 0xBB);
 264:	6b eb       	ldi	r22, 0xBB	; 187
 266:	8b eb       	ldi	r24, 0xBB	; 187
 268:	f5 d0       	rcall	.+490    	; 0x454 <uart_put_com>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 26a:	c1 ff       	sbrs	r28, 1
 26c:	07 c0       	rjmp	.+14     	; 0x27c <__vector_11+0x54>
 26e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 272:	81 ff       	sbrs	r24, 1
 274:	03 c0       	rjmp	.+6      	; 0x27c <__vector_11+0x54>
		uart_put_com(0x44, 0x44);
 276:	64 e4       	ldi	r22, 0x44	; 68
 278:	84 e4       	ldi	r24, 0x44	; 68
 27a:	ec d0       	rcall	.+472    	; 0x454 <uart_put_com>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 27c:	c2 ff       	sbrs	r28, 2
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__vector_11+0x66>
 280:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 284:	82 ff       	sbrs	r24, 2
 286:	03 c0       	rjmp	.+6      	; 0x28e <__vector_11+0x66>
		uart_put_com(0x00, 0x00);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	e3 d0       	rcall	.+454    	; 0x454 <uart_put_com>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 28e:	c3 ff       	sbrs	r28, 3
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <__vector_11+0x78>
 292:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 296:	83 ff       	sbrs	r24, 3
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <__vector_11+0x78>
		uart_put_com(0x99, 0x99);
 29a:	69 e9       	ldi	r22, 0x99	; 153
 29c:	89 e9       	ldi	r24, 0x99	; 153
 29e:	da d0       	rcall	.+436    	; 0x454 <uart_put_com>
	}
	old_buttons = new_buttons;
 2a0:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <old_buttons>
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	8f b9       	out	0x0f, r24	; 15
 2ce:	88 b3       	in	r24, 0x18	; 24
 2d0:	80 6a       	ori	r24, 0xA0	; 160
 2d2:	88 bb       	out	0x18, r24	; 24
 2d4:	87 b3       	in	r24, 0x17	; 23
 2d6:	80 6a       	ori	r24, 0xA0	; 160
 2d8:	87 bb       	out	0x17, r24	; 23
 2da:	8a e2       	ldi	r24, 0x2A	; 42
 2dc:	8d b9       	out	0x0d, r24	; 13
 2de:	80 ef       	ldi	r24, 0xF0	; 240
 2e0:	8e b9       	out	0x0e, r24	; 14
 2e2:	08 95       	ret

000002e4 <i2c_send_start>:
 2e4:	88 b3       	in	r24, 0x18	; 24
 2e6:	80 6a       	ori	r24, 0xA0	; 160
 2e8:	88 bb       	out	0x18, r24	; 24
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	98 b3       	in	r25, 0x18	; 24
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	85 fb       	bst	r24, 5
 2f2:	88 27       	eor	r24, r24
 2f4:	80 f9       	bld	r24, 0
 2f6:	82 13       	cpse	r24, r18
 2f8:	f9 cf       	rjmp	.-14     	; 0x2ec <i2c_send_start+0x8>
 2fa:	99 23       	and	r25, r25
 2fc:	bc f7       	brge	.-18     	; 0x2ec <i2c_send_start+0x8>
 2fe:	c5 98       	cbi	0x18, 5	; 24
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <i2c_send_start+0x1e>
 306:	00 00       	nop
 308:	c7 98       	cbi	0x18, 7	; 24
 30a:	08 95       	ret

0000030c <i2c_send_stop>:
 30c:	c5 98       	cbi	0x18, 5	; 24
 30e:	c7 9a       	sbi	0x18, 7	; 24
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <i2c_send_stop+0x6>
 316:	00 00       	nop
 318:	c5 9a       	sbi	0x18, 5	; 24
 31a:	08 95       	ret

0000031c <i2c_send_ack>:
 31c:	c5 98       	cbi	0x18, 5	; 24
 31e:	c7 9a       	sbi	0x18, 7	; 24
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <i2c_send_ack+0x6>
 326:	00 00       	nop
 328:	c7 98       	cbi	0x18, 7	; 24
 32a:	c5 9a       	sbi	0x18, 5	; 24
 32c:	08 95       	ret

0000032e <i2c_send_nack>:
 32e:	c5 9a       	sbi	0x18, 5	; 24
 330:	c7 9a       	sbi	0x18, 7	; 24
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <i2c_send_nack+0x6>
 338:	00 00       	nop
 33a:	c7 98       	cbi	0x18, 7	; 24
 33c:	08 95       	ret

0000033e <i2c_get_ack>:
 33e:	bd 98       	cbi	0x17, 5	; 23
 340:	68 9a       	sbi	0x0d, 0	; 13
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <i2c_get_ack+0x6>
 348:	00 00       	nop
 34a:	68 9a       	sbi	0x0d, 0	; 13
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <i2c_get_ack+0x10>
 352:	00 00       	nop
 354:	8f b1       	in	r24, 0x0f	; 15
 356:	9f ef       	ldi	r25, 0xFF	; 255
 358:	9f b9       	out	0x0f, r25	; 15
 35a:	bd 9a       	sbi	0x17, 5	; 23
 35c:	81 70       	andi	r24, 0x01	; 1
 35e:	08 95       	ret

00000360 <i2c_send_data>:
 360:	8f b9       	out	0x0f, r24	; 15
 362:	c5 9a       	sbi	0x18, 5	; 24
 364:	8e b1       	in	r24, 0x0e	; 14
 366:	80 7f       	andi	r24, 0xF0	; 240
 368:	8e b9       	out	0x0e, r24	; 14
 36a:	68 9a       	sbi	0x0d, 0	; 13
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <i2c_send_data+0xe>
 372:	00 00       	nop
 374:	68 9a       	sbi	0x0d, 0	; 13
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <i2c_send_data+0x18>
 37c:	00 00       	nop
 37e:	76 9b       	sbis	0x0e, 6	; 14
 380:	f4 cf       	rjmp	.-24     	; 0x36a <i2c_send_data+0xa>
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	8f b9       	out	0x0f, r24	; 15
 386:	08 95       	ret

00000388 <i2c_send_reg_add>:
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	d8 2f       	mov	r29, r24
 38e:	c6 2f       	mov	r28, r22
 390:	a9 df       	rcall	.-174    	; 0x2e4 <i2c_send_start>
 392:	8d 2f       	mov	r24, r29
 394:	88 0f       	add	r24, r24
 396:	e4 df       	rcall	.-56     	; 0x360 <i2c_send_data>
 398:	d2 df       	rcall	.-92     	; 0x33e <i2c_get_ack>
 39a:	8c 2f       	mov	r24, r28
 39c:	e1 df       	rcall	.-62     	; 0x360 <i2c_send_data>
 39e:	cf df       	rcall	.-98     	; 0x33e <i2c_get_ack>
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <i2c_single_write>:
 3a6:	cf 93       	push	r28
 3a8:	c4 2f       	mov	r28, r20
 3aa:	ee df       	rcall	.-36     	; 0x388 <i2c_send_reg_add>
 3ac:	8c 2f       	mov	r24, r28
 3ae:	d8 df       	rcall	.-80     	; 0x360 <i2c_send_data>
 3b0:	c6 df       	rcall	.-116    	; 0x33e <i2c_get_ack>
 3b2:	ac df       	rcall	.-168    	; 0x30c <i2c_send_stop>
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <i2c_burst_write>:
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	d4 2f       	mov	r29, r20
 3be:	c2 2f       	mov	r28, r18
 3c0:	e3 df       	rcall	.-58     	; 0x388 <i2c_send_reg_add>
 3c2:	8d 2f       	mov	r24, r29
 3c4:	cd df       	rcall	.-102    	; 0x360 <i2c_send_data>
 3c6:	bb df       	rcall	.-138    	; 0x33e <i2c_get_ack>
 3c8:	8c 2f       	mov	r24, r28
 3ca:	ca df       	rcall	.-108    	; 0x360 <i2c_send_data>
 3cc:	b8 df       	rcall	.-144    	; 0x33e <i2c_get_ack>
 3ce:	9e df       	rcall	.-196    	; 0x30c <i2c_send_stop>
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <i2c_get_data>:
 3d6:	bd 98       	cbi	0x17, 5	; 23
 3d8:	8e b1       	in	r24, 0x0e	; 14
 3da:	80 7f       	andi	r24, 0xF0	; 240
 3dc:	8e b9       	out	0x0e, r24	; 14
 3de:	68 9a       	sbi	0x0d, 0	; 13
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	8a 95       	dec	r24
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <i2c_get_data+0xc>
 3e6:	00 00       	nop
 3e8:	68 9a       	sbi	0x0d, 0	; 13
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	8a 95       	dec	r24
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <i2c_get_data+0x16>
 3f0:	00 00       	nop
 3f2:	76 9b       	sbis	0x0e, 6	; 14
 3f4:	f4 cf       	rjmp	.-24     	; 0x3de <i2c_get_data+0x8>
 3f6:	8f b1       	in	r24, 0x0f	; 15
 3f8:	9f ef       	ldi	r25, 0xFF	; 255
 3fa:	9f b9       	out	0x0f, r25	; 15
 3fc:	bd 9a       	sbi	0x17, 5	; 23
 3fe:	08 95       	ret

00000400 <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 406:	c0 df       	rcall	.-128    	; 0x388 <i2c_send_reg_add>
	i2c_send_start();
 408:	6d df       	rcall	.-294    	; 0x2e4 <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 40a:	8c 2f       	mov	r24, r28
 40c:	88 0f       	add	r24, r24
 40e:	81 60       	ori	r24, 0x01	; 1
 410:	a7 df       	rcall	.-178    	; 0x360 <i2c_send_data>
	i2c_get_ack();
 412:	95 df       	rcall	.-214    	; 0x33e <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 414:	e0 df       	rcall	.-64     	; 0x3d6 <i2c_get_data>
 416:	c8 2f       	mov	r28, r24
 418:	d0 e0       	ldi	r29, 0x00	; 0
 41a:	dc 2f       	mov	r29, r28
 41c:	cc 27       	eor	r28, r28
	i2c_send_ack();
 41e:	7e df       	rcall	.-260    	; 0x31c <i2c_send_ack>
	ret |= i2c_get_data();
 420:	da df       	rcall	.-76     	; 0x3d6 <i2c_get_data>
 422:	c8 2b       	or	r28, r24
	i2c_send_nack();
 424:	84 df       	rcall	.-248    	; 0x32e <i2c_send_nack>
	i2c_send_stop();
 426:	72 df       	rcall	.-284    	; 0x30c <i2c_send_stop>
	return(ret);
}
 428:	ce 01       	movw	r24, r28
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 434:	16 bc       	out	0x26, r1	; 38
	
	buttons_init();
 436:	ea de       	rcall	.-556    	; 0x20c <buttons_init>
	gauge_init();
 438:	60 de       	rcall	.-832    	; 0xfa <gauge_init>
	acc_init();
 43a:	06 de       	rcall	.-1012   	; 0x48 <acc_init>
 43c:	ff cf       	rjmp	.-2      	; 0x43c <main+0xc>

0000043e <uart_init>:

volatile static uint8_t tx_buffer[2];
volatile static uint8_t size = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 43e:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 440:	87 e6       	ldi	r24, 0x67	; 103
 442:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 444:	88 e0       	ldi	r24, 0x08	; 8
 446:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
 448:	86 e2       	ldi	r24, 0x26	; 38
 44a:	83 b9       	out	0x03, r24	; 3
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 44c:	8f b7       	in	r24, 0x3f	; 63
 44e:	80 68       	ori	r24, 0x80	; 128
 450:	8f bf       	out	0x3f, r24	; 63
 452:	08 95       	ret

00000454 <uart_put_com>:
}

void uart_put_com(uint8_t command, uint8_t data){
	while(size > 0);
 454:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <size>
 458:	91 11       	cpse	r25, r1
 45a:	fc cf       	rjmp	.-8      	; 0x454 <uart_put_com>
	tx_buffer[1] = command;
 45c:	e4 e6       	ldi	r30, 0x64	; 100
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 462:	60 83       	st	Z, r22
	size = 2;
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <size>
	UCSRB |= (1<<UDRIE);
 46a:	55 9a       	sbi	0x0a, 5	; 10
 46c:	08 95       	ret

0000046e <__vector_8>:
}

ISR(USART_UDRE_vect){
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	8f 93       	push	r24
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	if(size > 0){
 47e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 482:	88 23       	and	r24, r24
 484:	61 f0       	breq	.+24     	; 0x49e <__vector_8+0x30>
		UDR = tx_buffer[size-1];
 486:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <size>
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ed 59       	subi	r30, 0x9D	; 157
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	80 81       	ld	r24, Z
 492:	8c b9       	out	0x0c, r24	; 12
		size--;
 494:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 498:	81 50       	subi	r24, 0x01	; 1
 49a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <size>
	}
	if(size == 0){
 49e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 4a2:	81 11       	cpse	r24, r1
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <__vector_8+0x3a>
		UCSRB &= ~(1<<UDRIE);
 4a6:	55 98       	cbi	0x0a, 5	; 10
	}
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	8f 91       	pop	r24
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
