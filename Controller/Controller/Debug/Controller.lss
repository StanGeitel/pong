
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004d6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800066  00800066  00000570  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001470  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b8  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd1  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00003154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e2  00000000  00000000  00003a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	67 c0       	rjmp	.+206    	; 0xd2 <__vector_1>
   4:	ae c0       	rjmp	.+348    	; 0x162 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	4b c0       	rjmp	.+150    	; 0xa2 <__vector_5>
   c:	f1 c0       	rjmp	.+482    	; 0x1f0 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	31 c2       	rjmp	.+1122   	; 0x474 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	15 c1       	rjmp	.+554    	; 0x242 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ed       	ldi	r30, 0xD6	; 214
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 37       	cpi	r26, 0x7B	; 123
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ef d1       	rcall	.+990    	; 0x438 <main>
  5a:	3b c2       	rjmp	.+1142   	; 0x4d2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <acc_init>:
uint16_t x_pos[2], y_pos[2];
uint16_t x_noise = 0, y_noise = 0;
uint8_t ovf_counter = 0;

void acc_init(){
	i2c_single_write(ACC_ADD, PWR_MAN, 0x00);		//turn off sleep mode
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	6b e6       	ldi	r22, 0x6B	; 107
  62:	88 e6       	ldi	r24, 0x68	; 104
  64:	a4 d1       	rcall	.+840    	; 0x3ae <i2c_single_write>
	i2c_single_write(ACC_ADD, ACC_CON, 0x00);		//set range on +/- 2g
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	6c e1       	ldi	r22, 0x1C	; 28
  6a:	88 e6       	ldi	r24, 0x68	; 104
  6c:	a0 d1       	rcall	.+832    	; 0x3ae <i2c_single_write>
	i2c_single_write(ACC_ADD, SMPRT_DIV, 0x08);		//1kHz sample rate and interrupt rate
  6e:	48 e0       	ldi	r20, 0x08	; 8
  70:	69 e1       	ldi	r22, 0x19	; 25
  72:	88 e6       	ldi	r24, 0x68	; 104
  74:	9c d1       	rcall	.+824    	; 0x3ae <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_CON, 0x10);		//clear interrupt on any read
  76:	40 e1       	ldi	r20, 0x10	; 16
  78:	67 e3       	ldi	r22, 0x37	; 55
  7a:	88 e6       	ldi	r24, 0x68	; 104
  7c:	98 d1       	rcall	.+816    	; 0x3ae <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_EN, 0x01);		//enable interrupt on data ready
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	68 e3       	ldi	r22, 0x38	; 56
  82:	88 e6       	ldi	r24, 0x68	; 104
  84:	94 d1       	rcall	.+808    	; 0x3ae <i2c_single_write>

	uart_init();
  86:	e1 d1       	rcall	.+962    	; 0x44a <uart_init>
/*	
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(0<<CS10);		//no clock, clear timer on compare
	TIMSK |= (1<<TOIE1);							//enable overflow interrupt
*/	
	MCUCR |= (1 << ISC00);
  88:	85 b7       	in	r24, 0x35	; 53
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);							//The rising edge of INT0 generates an interrupt request
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);							//enable external interrupt 0 in general interrupt mask register
  94:	8b b7       	in	r24, 0x3b	; 59
  96:	80 64       	ori	r24, 0x40	; 64
  98:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);							//enable interrupts I in global status register
  9a:	8f b7       	in	r24, 0x3f	; 63
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8f bf       	out	0x3f, r24	; 63
  a0:	08 95       	ret

000000a2 <__vector_5>:
	y_pos[0] = y_pos[1];
*/
	test();
}

ISR(TIMER1_OVF_vect){
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
	ovf_counter++;
  ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <test>:

void test(){
	uint16_t temp_16;
	uint8_t temp_8[2];
	
	temp_16 = i2c_burst_read(ACC_ADD, X_MSB);
  c4:	6b e3       	ldi	r22, 0x3B	; 59
  c6:	88 e6       	ldi	r24, 0x68	; 104
  c8:	9f d1       	rcall	.+830    	; 0x408 <i2c_burst_read>
	temp_16 = i2c_burst_read(ACC_ADD, Y_MSB);
  ca:	6d e3       	ldi	r22, 0x3D	; 61
  cc:	88 e6       	ldi	r24, 0x68	; 104
  ce:	9c d1       	rcall	.+824    	; 0x408 <i2c_burst_read>
  d0:	08 95       	ret

000000d2 <__vector_1>:
	y_noise = (y_noise>>10);

}
*/

ISR(INT0_vect){		//External interrupt0 service routine
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	y_vel[0] = y_vel[1];
	
	x_pos[0] = x_pos[1];
	y_pos[0] = y_pos[1];
*/
	test();
  f4:	e7 df       	rcall	.-50     	; 0xc4 <test>
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <gauge_init>:
#include "i2c.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	4f ef       	ldi	r20, 0xFF	; 255
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	84 e6       	ldi	r24, 0x64	; 100
 120:	4f d1       	rcall	.+670    	; 0x3c0 <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 122:	2c e1       	ldi	r18, 0x1C	; 28
 124:	4c e7       	ldi	r20, 0x7C	; 124
 126:	66 e0       	ldi	r22, 0x06	; 6
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	4a d1       	rcall	.+660    	; 0x3c0 <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 12c:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 12e:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 130:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 132:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 134:	89 b7       	in	r24, 0x39	; 57
 136:	82 60       	ori	r24, 0x02	; 2
 138:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	88 60       	ori	r24, 0x08	; 8
 142:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 144:	8b b7       	in	r24, 0x3b	; 59
 146:	80 68       	ori	r24, 0x80	; 128
 148:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 14a:	8f b7       	in	r24, 0x3f	; 63
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8f bf       	out	0x3f, r24	; 63
 150:	08 95       	ret

00000152 <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 152:	cc d0       	rcall	.+408    	; 0x2ec <i2c_send_start>
	i2c_send_data(ARA<<1);
 154:	88 e1       	ldi	r24, 0x18	; 24
 156:	08 d1       	rcall	.+528    	; 0x368 <i2c_send_data>
	i2c_get_ack();						
 158:	f6 d0       	rcall	.+492    	; 0x346 <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 15a:	41 d1       	rcall	.+642    	; 0x3de <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 15c:	ec d0       	rcall	.+472    	; 0x336 <i2c_send_nack>
	i2c_send_stop();
 15e:	da d0       	rcall	.+436    	; 0x314 <i2c_send_stop>
 160:	08 95       	ret

00000162 <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 184:	03 b6       	in	r0, 0x33	; 51
 186:	02 fe       	sbrs	r0, 2
 188:	13 c0       	rjmp	.+38     	; 0x1b0 <__vector_2+0x4e>
 18a:	03 b6       	in	r0, 0x33	; 51
 18c:	00 fe       	sbrs	r0, 0
 18e:	10 c0       	rjmp	.+32     	; 0x1b0 <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 190:	83 b7       	in	r24, 0x33	; 51
 192:	8a 7f       	andi	r24, 0xFA	; 250
 194:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 196:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	64 e0       	ldi	r22, 0x04	; 4
 19e:	84 e6       	ldi	r24, 0x64	; 100
 1a0:	0f d1       	rcall	.+542    	; 0x3c0 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 1a2:	2c e1       	ldi	r18, 0x1C	; 28
 1a4:	4c e7       	ldi	r20, 0x7C	; 124
 1a6:	66 e0       	ldi	r22, 0x06	; 6
 1a8:	84 e6       	ldi	r24, 0x64	; 100
 1aa:	0a d1       	rcall	.+532    	; 0x3c0 <i2c_burst_write>
		gauge_send_arp();	
 1ac:	d2 df       	rcall	.-92     	; 0x152 <gauge_send_arp>
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 1b0:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	85 60       	ori	r24, 0x05	; 5
 1b6:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	66 e0       	ldi	r22, 0x06	; 6
 1be:	84 e6       	ldi	r24, 0x64	; 100
 1c0:	ff d0       	rcall	.+510    	; 0x3c0 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 1c2:	2d ef       	ldi	r18, 0xFD	; 253
 1c4:	4d e7       	ldi	r20, 0x7D	; 125
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	84 e6       	ldi	r24, 0x64	; 100
 1ca:	fa d0       	rcall	.+500    	; 0x3c0 <i2c_burst_write>
		gauge_send_arp();
 1cc:	c2 df       	rcall	.-124    	; 0x152 <gauge_send_arp>
	}
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_6>:

ISR(TIMER0_OVF_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	if(count == 17){
 1fe:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <count>
 202:	81 31       	cpi	r24, 0x11	; 17
 204:	39 f4       	brne	.+14     	; 0x214 <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 206:	98 b3       	in	r25, 0x18	; 24
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	89 27       	eor	r24, r25
 20c:	88 bb       	out	0x18, r24	; 24
		count = 0;
 20e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count>
 212:	03 c0       	rjmp	.+6      	; 0x21a <__vector_6+0x2a>
	}else{
		count++;
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <count>
	}
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <buttons_init>:
#include "uart.h"

volatile uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 228:	87 b3       	in	r24, 0x17	; 23
 22a:	80 7f       	andi	r24, 0xF0	; 240
 22c:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 22e:	80 b5       	in	r24, 0x20	; 32
 230:	8f 60       	ori	r24, 0x0F	; 15
 232:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 234:	8b b7       	in	r24, 0x3b	; 59
 236:	80 62       	ori	r24, 0x20	; 32
 238:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 23a:	8f b7       	in	r24, 0x3f	; 63
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	8f bf       	out	0x3f, r24	; 63
 240:	08 95       	ret

00000242 <__vector_11>:
}

ISR(PCINT0_vect){		
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 268:	d6 b3       	in	r29, 0x16	; 22
 26a:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 26c:	c0 91 68 00 	lds	r28, 0x0068	; 0x800068 <old_buttons>
 270:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 272:	c0 ff       	sbrs	r28, 0
 274:	06 c0       	rjmp	.+12     	; 0x282 <__vector_11+0x40>
 276:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <old_buttons>
 27a:	80 ff       	sbrs	r24, 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__vector_11+0x40>
		uart_set_button(0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	ef d0       	rcall	.+478    	; 0x460 <uart_set_button>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 282:	c1 ff       	sbrs	r28, 1
 284:	06 c0       	rjmp	.+12     	; 0x292 <__vector_11+0x50>
 286:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <old_buttons>
 28a:	81 ff       	sbrs	r24, 1
 28c:	02 c0       	rjmp	.+4      	; 0x292 <__vector_11+0x50>
		uart_set_button(1);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	e7 d0       	rcall	.+462    	; 0x460 <uart_set_button>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 292:	c2 ff       	sbrs	r28, 2
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <__vector_11+0x60>
 296:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <old_buttons>
 29a:	82 ff       	sbrs	r24, 2
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__vector_11+0x60>
		uart_set_button(2);
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	df d0       	rcall	.+446    	; 0x460 <uart_set_button>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 2a2:	c3 fd       	sbrc	r28, 3
 2a4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <old_buttons>
		
	}
	old_buttons = new_buttons;
 2a8:	d0 93 68 00 	sts	0x0068, r29	; 0x800068 <old_buttons>
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	8f b9       	out	0x0f, r24	; 15
 2d6:	88 b3       	in	r24, 0x18	; 24
 2d8:	80 6a       	ori	r24, 0xA0	; 160
 2da:	88 bb       	out	0x18, r24	; 24
 2dc:	87 b3       	in	r24, 0x17	; 23
 2de:	80 6a       	ori	r24, 0xA0	; 160
 2e0:	87 bb       	out	0x17, r24	; 23
 2e2:	8a e2       	ldi	r24, 0x2A	; 42
 2e4:	8d b9       	out	0x0d, r24	; 13
 2e6:	80 ef       	ldi	r24, 0xF0	; 240
 2e8:	8e b9       	out	0x0e, r24	; 14
 2ea:	08 95       	ret

000002ec <i2c_send_start>:
 2ec:	88 b3       	in	r24, 0x18	; 24
 2ee:	80 6a       	ori	r24, 0xA0	; 160
 2f0:	88 bb       	out	0x18, r24	; 24
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	98 b3       	in	r25, 0x18	; 24
 2f6:	88 b3       	in	r24, 0x18	; 24
 2f8:	85 fb       	bst	r24, 5
 2fa:	88 27       	eor	r24, r24
 2fc:	80 f9       	bld	r24, 0
 2fe:	82 13       	cpse	r24, r18
 300:	f9 cf       	rjmp	.-14     	; 0x2f4 <i2c_send_start+0x8>
 302:	99 23       	and	r25, r25
 304:	bc f7       	brge	.-18     	; 0x2f4 <i2c_send_start+0x8>
 306:	c5 98       	cbi	0x18, 5	; 24
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <i2c_send_start+0x1e>
 30e:	00 00       	nop
 310:	c7 98       	cbi	0x18, 7	; 24
 312:	08 95       	ret

00000314 <i2c_send_stop>:
 314:	c5 98       	cbi	0x18, 5	; 24
 316:	c7 9a       	sbi	0x18, 7	; 24
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <i2c_send_stop+0x6>
 31e:	00 00       	nop
 320:	c5 9a       	sbi	0x18, 5	; 24
 322:	08 95       	ret

00000324 <i2c_send_ack>:
 324:	c5 98       	cbi	0x18, 5	; 24
 326:	c7 9a       	sbi	0x18, 7	; 24
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <i2c_send_ack+0x6>
 32e:	00 00       	nop
 330:	c7 98       	cbi	0x18, 7	; 24
 332:	c5 9a       	sbi	0x18, 5	; 24
 334:	08 95       	ret

00000336 <i2c_send_nack>:
 336:	c5 9a       	sbi	0x18, 5	; 24
 338:	c7 9a       	sbi	0x18, 7	; 24
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	8a 95       	dec	r24
 33e:	f1 f7       	brne	.-4      	; 0x33c <i2c_send_nack+0x6>
 340:	00 00       	nop
 342:	c7 98       	cbi	0x18, 7	; 24
 344:	08 95       	ret

00000346 <i2c_get_ack>:
 346:	bd 98       	cbi	0x17, 5	; 23
 348:	68 9a       	sbi	0x0d, 0	; 13
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <i2c_get_ack+0x6>
 350:	00 00       	nop
 352:	68 9a       	sbi	0x0d, 0	; 13
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <i2c_get_ack+0x10>
 35a:	00 00       	nop
 35c:	8f b1       	in	r24, 0x0f	; 15
 35e:	9f ef       	ldi	r25, 0xFF	; 255
 360:	9f b9       	out	0x0f, r25	; 15
 362:	bd 9a       	sbi	0x17, 5	; 23
 364:	81 70       	andi	r24, 0x01	; 1
 366:	08 95       	ret

00000368 <i2c_send_data>:
 368:	8f b9       	out	0x0f, r24	; 15
 36a:	c5 9a       	sbi	0x18, 5	; 24
 36c:	8e b1       	in	r24, 0x0e	; 14
 36e:	80 7f       	andi	r24, 0xF0	; 240
 370:	8e b9       	out	0x0e, r24	; 14
 372:	68 9a       	sbi	0x0d, 0	; 13
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	8a 95       	dec	r24
 378:	f1 f7       	brne	.-4      	; 0x376 <i2c_send_data+0xe>
 37a:	00 00       	nop
 37c:	68 9a       	sbi	0x0d, 0	; 13
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <i2c_send_data+0x18>
 384:	00 00       	nop
 386:	76 9b       	sbis	0x0e, 6	; 14
 388:	f4 cf       	rjmp	.-24     	; 0x372 <i2c_send_data+0xa>
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	8f b9       	out	0x0f, r24	; 15
 38e:	08 95       	ret

00000390 <i2c_send_reg_add>:
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	d8 2f       	mov	r29, r24
 396:	c6 2f       	mov	r28, r22
 398:	a9 df       	rcall	.-174    	; 0x2ec <i2c_send_start>
 39a:	8d 2f       	mov	r24, r29
 39c:	88 0f       	add	r24, r24
 39e:	e4 df       	rcall	.-56     	; 0x368 <i2c_send_data>
 3a0:	d2 df       	rcall	.-92     	; 0x346 <i2c_get_ack>
 3a2:	8c 2f       	mov	r24, r28
 3a4:	e1 df       	rcall	.-62     	; 0x368 <i2c_send_data>
 3a6:	cf df       	rcall	.-98     	; 0x346 <i2c_get_ack>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <i2c_single_write>:
 3ae:	cf 93       	push	r28
 3b0:	c4 2f       	mov	r28, r20
 3b2:	ee df       	rcall	.-36     	; 0x390 <i2c_send_reg_add>
 3b4:	8c 2f       	mov	r24, r28
 3b6:	d8 df       	rcall	.-80     	; 0x368 <i2c_send_data>
 3b8:	c6 df       	rcall	.-116    	; 0x346 <i2c_get_ack>
 3ba:	ac df       	rcall	.-168    	; 0x314 <i2c_send_stop>
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <i2c_burst_write>:
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	d4 2f       	mov	r29, r20
 3c6:	c2 2f       	mov	r28, r18
 3c8:	e3 df       	rcall	.-58     	; 0x390 <i2c_send_reg_add>
 3ca:	8d 2f       	mov	r24, r29
 3cc:	cd df       	rcall	.-102    	; 0x368 <i2c_send_data>
 3ce:	bb df       	rcall	.-138    	; 0x346 <i2c_get_ack>
 3d0:	8c 2f       	mov	r24, r28
 3d2:	ca df       	rcall	.-108    	; 0x368 <i2c_send_data>
 3d4:	b8 df       	rcall	.-144    	; 0x346 <i2c_get_ack>
 3d6:	9e df       	rcall	.-196    	; 0x314 <i2c_send_stop>
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <i2c_get_data>:
 3de:	bd 98       	cbi	0x17, 5	; 23
 3e0:	8e b1       	in	r24, 0x0e	; 14
 3e2:	80 7f       	andi	r24, 0xF0	; 240
 3e4:	8e b9       	out	0x0e, r24	; 14
 3e6:	68 9a       	sbi	0x0d, 0	; 13
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	8a 95       	dec	r24
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <i2c_get_data+0xc>
 3ee:	00 00       	nop
 3f0:	68 9a       	sbi	0x0d, 0	; 13
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	8a 95       	dec	r24
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <i2c_get_data+0x16>
 3f8:	00 00       	nop
 3fa:	76 9b       	sbis	0x0e, 6	; 14
 3fc:	f4 cf       	rjmp	.-24     	; 0x3e6 <i2c_get_data+0x8>
 3fe:	8f b1       	in	r24, 0x0f	; 15
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	9f b9       	out	0x0f, r25	; 15
 404:	bd 9a       	sbi	0x17, 5	; 23
 406:	08 95       	ret

00000408 <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 40e:	c0 df       	rcall	.-128    	; 0x390 <i2c_send_reg_add>
	i2c_send_start();
 410:	6d df       	rcall	.-294    	; 0x2ec <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 412:	8c 2f       	mov	r24, r28
 414:	88 0f       	add	r24, r24
 416:	81 60       	ori	r24, 0x01	; 1
 418:	a7 df       	rcall	.-178    	; 0x368 <i2c_send_data>
	i2c_get_ack();
 41a:	95 df       	rcall	.-214    	; 0x346 <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 41c:	e0 df       	rcall	.-64     	; 0x3de <i2c_get_data>
 41e:	c8 2f       	mov	r28, r24
 420:	d0 e0       	ldi	r29, 0x00	; 0
 422:	dc 2f       	mov	r29, r28
 424:	cc 27       	eor	r28, r28
	i2c_send_ack();
 426:	7e df       	rcall	.-260    	; 0x324 <i2c_send_ack>
	ret |= i2c_get_data();
 428:	da df       	rcall	.-76     	; 0x3de <i2c_get_data>
 42a:	c8 2b       	or	r28, r24
	i2c_send_nack();
 42c:	84 df       	rcall	.-248    	; 0x336 <i2c_send_nack>
	i2c_send_stop();
 42e:	72 df       	rcall	.-284    	; 0x314 <i2c_send_stop>
	return(ret);
}
 430:	ce 01       	movw	r24, r28
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 438:	80 e8       	ldi	r24, 0x80	; 128
 43a:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 43c:	16 bc       	out	0x26, r1	; 38
	
	i2c_init();
 43e:	49 df       	rcall	.-366    	; 0x2d2 <i2c_init>
	uart_init();
 440:	04 d0       	rcall	.+8      	; 0x44a <uart_init>
	buttons_init();
 442:	f2 de       	rcall	.-540    	; 0x228 <buttons_init>
	gauge_init();
 444:	69 de       	rcall	.-814    	; 0x118 <gauge_init>
	acc_init();
 446:	0b de       	rcall	.-1002   	; 0x5e <acc_init>
 448:	ff cf       	rjmp	.-2      	; 0x448 <main+0x10>

0000044a <uart_init>:
void uart_putc(uint8_t c){
	uint8_t tmp_head = (tx_head + 1) % BUFFER_SIZE;
	while(tmp_head == tx_tail);
	tx_buffer[tx_head] = c;
	tx_head = tmp_head;
	UCSRB |= (1<<UDRIE);
 44a:	12 b8       	out	0x02, r1	; 2
 44c:	89 e1       	ldi	r24, 0x19	; 25
 44e:	89 b9       	out	0x09, r24	; 9
 450:	88 e0       	ldi	r24, 0x08	; 8
 452:	8a b9       	out	0x0a, r24	; 10
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	83 b9       	out	0x03, r24	; 3
 458:	8f b7       	in	r24, 0x3f	; 63
 45a:	80 68       	ori	r24, 0x80	; 128
 45c:	8f bf       	out	0x3f, r24	; 63
 45e:	08 95       	ret

00000460 <uart_set_button>:
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <uart_set_button+0xa>
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <uart_set_button+0x6>
 46e:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__data_start+0x4>
 472:	08 95       	ret

00000474 <__vector_8>:
}

ISR(USART_UDRE_vect){
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	uint8_t tmp_tail = 0;
	if(tx_tail != tx_head){
 486:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tx_tail>
 48a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tx_head>
 48e:	98 17       	cp	r25, r24
 490:	b1 f0       	breq	.+44     	; 0x4be <__vector_8+0x4a>
		tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 492:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tx_tail>
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	8f 70       	andi	r24, 0x0F	; 15
 49c:	90 78       	andi	r25, 0x80	; 128
 49e:	99 23       	and	r25, r25
 4a0:	24 f4       	brge	.+8      	; 0x4aa <__vector_8+0x36>
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	80 6f       	ori	r24, 0xF0	; 240
 4a6:	9f 6f       	ori	r25, 0xFF	; 255
 4a8:	01 96       	adiw	r24, 0x01	; 1
		UDR = tx_buffer[tx_tail];
 4aa:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <tx_tail>
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	e5 59       	subi	r30, 0x95	; 149
 4b2:	ff 4f       	sbci	r31, 0xFF	; 255
 4b4:	90 81       	ld	r25, Z
 4b6:	9c b9       	out	0x0c, r25	; 12
		tx_tail = tmp_tail;
 4b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tx_tail>
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <__vector_8+0x4c>
	}else{
		UCSRB &= ~(1<<UDRIE);
 4be:	55 98       	cbi	0x0a, 5	; 10
	}
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
