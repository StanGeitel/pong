
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001161  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  0000166d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4f  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00002b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000714  00000000  00000000  0000338d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00003aa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	36 c1       	rjmp	.+620    	; 0x27e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	5b c0       	rjmp	.+182    	; 0xce <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	f6 c0       	rjmp	.+492    	; 0x208 <__vector_13>
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	da d0       	rcall	.+436    	; 0x1f8 <main>
  44:	2b c1       	rjmp	.+598    	; 0x29c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ext_int0_init>:
	i2c_get_ack();
	i2c_send_stop();
}

void ext_int0_init(){
	MCUCR |= (1 << ISC00);
  48:	85 b7       	in	r24, 0x35	; 53
  4a:	81 60       	ori	r24, 0x01	; 1
  4c:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);				//The rising edge of INT0 generates an interrupt request
  4e:	85 b7       	in	r24, 0x35	; 53
  50:	82 60       	ori	r24, 0x02	; 2
  52:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);				//enable external interrupt 0 in general interrupt mask register
  54:	8b b7       	in	r24, 0x3b	; 59
  56:	80 64       	ori	r24, 0x40	; 64
  58:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << SREG_I);				//enable interrupts I in global status register
  5a:	8f b7       	in	r24, 0x3f	; 63
  5c:	80 68       	ori	r24, 0x80	; 128
  5e:	8f bf       	out	0x3f, r24	; 63
  60:	08 95       	ret

00000062 <acc_init>:

uint16_t x_pos = 0;
uint16_t y_pos = 0;

void acc_init(){
	i2c_init();
  62:	86 d0       	rcall	.+268    	; 0x170 <i2c_init>
	ext_int0_init();
  64:	f1 df       	rcall	.-30     	; 0x48 <ext_int0_init>
  66:	08 95       	ret

00000068 <__vector_1>:
	MCUCR |= (1 << ISC01);				//The rising edge of INT0 generates an interrupt request
	GIMSK |= (1 << INT0);				//enable external interrupt 0 in general interrupt mask register
	SREG |= (1 << SREG_I);				//enable interrupts I in global status register
}

ISR(INT0_vect){							//External interrupt0 service routine
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
	
}
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <gauge_send_reg_add>:
void gauge_init(void){
	gauge_single_write(CHARGE_MSB, 0xFF);
	gauge_single_write(CHARGE_LSB, 0xFF);
}

void gauge_send_reg_add(uint8_t reg_address){
  7c:	cf 93       	push	r28
  7e:	c8 2f       	mov	r28, r24
	i2c_send_start();
  80:	81 d0       	rcall	.+258    	; 0x184 <i2c_send_start>
	i2c_send_data(GAUGE_ADD<<1);				//send device address and write
  82:	88 ec       	ldi	r24, 0xC8	; 200
  84:	a7 d0       	rcall	.+334    	; 0x1d4 <i2c_send_data>
	i2c_get_ack();							//wait for acknowledge
  86:	97 d0       	rcall	.+302    	; 0x1b6 <i2c_get_ack>
	i2c_send_data(reg_address);				//send register address of MPU
  88:	8c 2f       	mov	r24, r28
  8a:	a4 d0       	rcall	.+328    	; 0x1d4 <i2c_send_data>
	i2c_get_ack();							//wait for acknowledge
  8c:	94 d0       	rcall	.+296    	; 0x1b6 <i2c_get_ack>
}
  8e:	cf 91       	pop	r28
  90:	08 95       	ret

00000092 <gauge_single_write>:
	i2c_send_stop();
	return(ret);
}
*/

void gauge_single_write(uint8_t reg_address, uint8_t data){
  92:	cf 93       	push	r28
  94:	c6 2f       	mov	r28, r22
	gauge_send_reg_add(reg_address);
  96:	f2 df       	rcall	.-28     	; 0x7c <gauge_send_reg_add>
	i2c_send_data(data);
  98:	8c 2f       	mov	r24, r28
  9a:	9c d0       	rcall	.+312    	; 0x1d4 <i2c_send_data>
	i2c_get_ack();
  9c:	8c d0       	rcall	.+280    	; 0x1b6 <i2c_get_ack>
	i2c_send_stop();
  9e:	84 d0       	rcall	.+264    	; 0x1a8 <i2c_send_stop>
}
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <gauge_init>:
#include "gauge.h"
#include "i2c.h"
// #include "gpio.h"

void gauge_init(void){
	gauge_single_write(CHARGE_MSB, 0xFF);
  a4:	6f ef       	ldi	r22, 0xFF	; 255
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	f4 df       	rcall	.-24     	; 0x92 <gauge_single_write>
	gauge_single_write(CHARGE_LSB, 0xFF);
  aa:	6f ef       	ldi	r22, 0xFF	; 255
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	f1 df       	rcall	.-30     	; 0x92 <gauge_single_write>
  b0:	08 95       	ret

000000b2 <gpio_init>:
#include "usart.h"

volatile uint8_t old_buttons = 0;

void gpio_init(){
	DDR(_PORT) &= ~((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));	//set buttons as input
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	87 bb       	out	0x17, r24	; 23
	DDR(_PORT) |= (1<<L0);								//set led as output
  b8:	bd 9a       	sbi	0x17, 5	; 23
	
	PCMSK0 |= ((1<<B3)|(1<<B2)|(1<<B1)|(1<<B0));		//set buttons as source for pin change interrupt 0
  ba:	80 b5       	in	r24, 0x20	; 32
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);								//enable pin change interrupt 0
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);								//enable interrupts I in global status register
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8f bf       	out	0x3f, r24	; 63
  cc:	08 95       	ret

000000ce <__vector_11>:
}
 
ISR(PCINT0_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	uint8_t new_buttons = PORT(_PORT) & 0xF;
  f4:	d8 b3       	in	r29, 0x18	; 24
  f6:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = new_buttons ^ old_buttons;
  f8:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <_edata>
  fc:	cd 27       	eor	r28, r29
	if(temp & (1<<B0)){
  fe:	c0 ff       	sbrs	r28, 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <__stack+0x31>
		PORT(_PORT) ^= (1<<L0);
 102:	98 b3       	in	r25, 0x18	; 24
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	89 27       	eor	r24, r25
 108:	88 bb       	out	0x18, r24	; 24
		uart_put_com((B0_COM<<2), (PORT(_PORT)>>B0));
 10a:	68 b3       	in	r22, 0x18	; 24
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	ac d0       	rcall	.+344    	; 0x268 <uart_put_com>
	}
	if(temp & (1<<B1)){
 110:	c1 ff       	sbrs	r28, 1
 112:	08 c0       	rjmp	.+16     	; 0x124 <__stack+0x45>
		PORT(_PORT) ^= (1<<L0);
 114:	98 b3       	in	r25, 0x18	; 24
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	89 27       	eor	r24, r25
 11a:	88 bb       	out	0x18, r24	; 24
		uart_put_com((B1_COM<<2), (PORT(_PORT)>>B1));
 11c:	68 b3       	in	r22, 0x18	; 24
 11e:	66 95       	lsr	r22
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	a2 d0       	rcall	.+324    	; 0x268 <uart_put_com>
	}
	if(temp & (1<<B2)){
 124:	c2 ff       	sbrs	r28, 2
 126:	09 c0       	rjmp	.+18     	; 0x13a <__stack+0x5b>
		PORT(_PORT) ^= (1<<L0);
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	89 27       	eor	r24, r25
 12e:	88 bb       	out	0x18, r24	; 24
		uart_put_com((B2_COM<<2), (PORT(_PORT)>>B2));
 130:	68 b3       	in	r22, 0x18	; 24
 132:	66 95       	lsr	r22
 134:	66 95       	lsr	r22
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	97 d0       	rcall	.+302    	; 0x268 <uart_put_com>
	}
	if(temp & (1<<B3)){
 13a:	c3 ff       	sbrs	r28, 3
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__stack+0x67>
		PORT(_PORT) ^= (1<<L0);
 13e:	98 b3       	in	r25, 0x18	; 24
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	89 27       	eor	r24, r25
 144:	88 bb       	out	0x18, r24	; 24
		
	}
	old_buttons = new_buttons;
 146:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <_edata>
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <i2c_init>:

void i2c_send_nack(){
	PORT(_PORT) |= (1<<_SDA);				//release SDA
	PORT(_PORT) |= (1<<_SCL);				//release SCL
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8f b9       	out	0x0f, r24	; 15
 174:	80 ea       	ldi	r24, 0xA0	; 160
 176:	88 bb       	out	0x18, r24	; 24
 178:	87 bb       	out	0x17, r24	; 23
 17a:	8a e2       	ldi	r24, 0x2A	; 42
 17c:	8d b9       	out	0x0d, r24	; 13
 17e:	80 ef       	ldi	r24, 0xF0	; 240
 180:	8e b9       	out	0x0e, r24	; 14
 182:	08 95       	ret

00000184 <i2c_send_start>:
 184:	80 ea       	ldi	r24, 0xA0	; 160
 186:	88 bb       	out	0x18, r24	; 24
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	98 b3       	in	r25, 0x18	; 24
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	85 fb       	bst	r24, 5
 190:	88 27       	eor	r24, r24
 192:	80 f9       	bld	r24, 0
 194:	82 13       	cpse	r24, r18
 196:	f9 cf       	rjmp	.-14     	; 0x18a <i2c_send_start+0x6>
 198:	99 23       	and	r25, r25
 19a:	bc f7       	brge	.-18     	; 0x18a <i2c_send_start+0x6>
 19c:	c5 98       	cbi	0x18, 5	; 24
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <i2c_send_start+0x1c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <i2c_send_start+0x1e>
 1a2:	00 00       	nop
 1a4:	c7 98       	cbi	0x18, 7	; 24
 1a6:	08 95       	ret

000001a8 <i2c_send_stop>:
 1a8:	c5 98       	cbi	0x18, 5	; 24
 1aa:	c7 9a       	sbi	0x18, 7	; 24
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <i2c_send_stop+0x6>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <i2c_send_stop+0x8>
 1b0:	00 00       	nop
 1b2:	c5 9a       	sbi	0x18, 5	; 24
 1b4:	08 95       	ret

000001b6 <i2c_get_ack>:
}

uint8_t i2c_get_ack(){
	uint8_t ret = 0;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 1b6:	bd 98       	cbi	0x17, 5	; 23
	USICR |= (1<<USITC);						//toggle SCL to HIGH
 1b8:	68 9a       	sbi	0x0d, 0	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <i2c_get_ack+0x6>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <i2c_get_ack+0x8>
 1be:	00 00       	nop
	_delay_us(BIT_TIME);
	USICR |= (1<<USITC);						//toggle SCL to LOW
 1c0:	68 9a       	sbi	0x0d, 0	; 13
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <i2c_get_ack+0xe>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <i2c_get_ack+0x10>
 1c6:	00 00       	nop
	_delay_us(BIT_TIME);
	ret = (USIDR & 1);
 1c8:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 1ce:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 1d0:	81 70       	andi	r24, 0x01	; 1
 1d2:	08 95       	ret

000001d4 <i2c_send_data>:

void i2c_send_data(uint8_t data){
	USIDR = data;
 1d4:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) |= (1<<_SDA);
 1d6:	c5 9a       	sbi	0x18, 5	; 24
	USISR &= ~(0xF<<USICNT0);					//reset counter
 1d8:	8e b1       	in	r24, 0x0e	; 14
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 1de:	68 9a       	sbi	0x0d, 0	; 13
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <i2c_send_data+0xe>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <i2c_send_data+0x10>
 1e4:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 1e6:	68 9a       	sbi	0x0d, 0	; 13
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <i2c_send_data+0x16>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <i2c_send_data+0x18>
 1ec:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 1ee:	76 9b       	sbis	0x0e, 6	; 14
 1f0:	f6 cf       	rjmp	.-20     	; 0x1de <i2c_send_data+0xa>
	
	USIDR = 0xFF;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	8f b9       	out	0x0f, r24	; 15
 1f6:	08 95       	ret

000001f8 <main>:
#include "gauge.h"
#include "gpio.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 1fc:	16 bc       	out	0x26, r1	; 38
		
	acc_init();
 1fe:	31 df       	rcall	.-414    	; 0x62 <acc_init>
	uart_init();
 200:	28 d0       	rcall	.+80     	; 0x252 <uart_init>
	gauge_init();
 202:	50 df       	rcall	.-352    	; 0xa4 <gauge_init>
	gpio_init();
 204:	56 df       	rcall	.-340    	; 0xb2 <gpio_init>
 206:	ff cf       	rjmp	.-2      	; 0x206 <main+0xe>

00000208 <__vector_13>:
	OCR0B = 9;
	TIMSK |= (1<<OCIE0A)|(1<<OCIE0B);
	SREG |= (1<<SREG_I);								//enable global interrupt
 }
 
 ISR(TIMER0_COMPA_vect){
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 214:	83 b7       	in	r24, 0x33	; 51
 216:	88 7f       	andi	r24, 0xF8	; 248
 218:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 21a:	12 be       	out	0x32, r1	; 50
 }
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_14>:
 
 ISR(TIMER0_COMPB_vect){
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
	OCR0B += 10;
 236:	8c b7       	in	r24, 0x3c	; 60
 238:	86 5f       	subi	r24, 0xF6	; 246
 23a:	8c bf       	out	0x3c, r24	; 60
	PORTB ^= (1<<2);
 23c:	98 b3       	in	r25, 0x18	; 24
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	89 27       	eor	r24, r25
 242:	88 bb       	out	0x18, r24	; 24
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <uart_init>:
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
}

void uart_transmit(uint8_t command) { //, uint8_t data
	while (!(UCSRA & (1<<UDRE)));
	UDR = command;
 252:	12 b8       	out	0x02, r1	; 2
 254:	83 e3       	ldi	r24, 0x33	; 51
 256:	89 b9       	out	0x09, r24	; 9
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	8a b9       	out	0x0a, r24	; 10
 25c:	86 e2       	ldi	r24, 0x26	; 38
 25e:	83 b9       	out	0x03, r24	; 3
 260:	8f b7       	in	r24, 0x3f	; 63
 262:	80 68       	ori	r24, 0x80	; 128
 264:	8f bf       	out	0x3f, r24	; 63
 266:	08 95       	ret

00000268 <uart_put_com>:
	//while (!(UCSRA & (1<<UDRE)));
	//UDR = data; 
}

void uart_put_com(uint8_t command, uint8_t data){
	while(size < 0);
 268:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <size>
	tx_buffer[1] = command;
 26c:	e2 e6       	ldi	r30, 0x62	; 98
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 272:	60 83       	st	Z, r22
	size = 2;
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <size>
	UCSRB |= (1<<UDRIE);
 27a:	55 9a       	sbi	0x0a, 5	; 10
 27c:	08 95       	ret

0000027e <__vector_8>:
}

ISR(USART_UDRE_vect){
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
	if(size < 0){
 28a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
		UDR = tx_buffer[size-1];
		size--;
	}else{
		UCSRB &= ~(1<<UDRIE);
 28e:	55 98       	cbi	0x0a, 5	; 10
	}
}
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
