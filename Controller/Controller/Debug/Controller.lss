
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c8  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a3  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0e  00000000  00000000  000023a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00002fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057b  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000918  00000000  00000000  000038e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000041fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	62 c0       	rjmp	.+196    	; 0xc8 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	bb c1       	rjmp	.+886    	; 0x388 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	d3 c0       	rjmp	.+422    	; 0x1be <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	93 c0       	rjmp	.+294    	; 0x142 <__vector_13>
  1c:	9c c0       	rjmp	.+312    	; 0x156 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	84 d1       	rcall	.+776    	; 0x34c <main>
  44:	b0 c1       	rjmp	.+864    	; 0x3a6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ext_int0_init>:
	TCCR0A = ((0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00));
	TCCR0B = ((0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00));		//Select 8MHz clock with no prescaler
	OCR0A = 160;
	OCR0B = 9;													//Set match register on 10 pulses
	TIMSK |= ((1<<OCIE0A)|(1<<OCIE0B));							//enable interrupts on compare register A and B
	SREG |= (1<<SREG_I);										//enable global interrupt
  48:	85 b7       	in	r24, 0x35	; 53
  4a:	81 60       	ori	r24, 0x01	; 1
  4c:	85 bf       	out	0x35, r24	; 53
  4e:	85 b7       	in	r24, 0x35	; 53
  50:	82 60       	ori	r24, 0x02	; 2
  52:	85 bf       	out	0x35, r24	; 53
  54:	8b b7       	in	r24, 0x3b	; 59
  56:	80 64       	ori	r24, 0x40	; 64
  58:	8b bf       	out	0x3b, r24	; 59
  5a:	8f b7       	in	r24, 0x3f	; 63
  5c:	80 68       	ori	r24, 0x80	; 128
  5e:	8f bf       	out	0x3f, r24	; 63
  60:	08 95       	ret

00000062 <acc_send_reg_add>:
  62:	cf 93       	push	r28
  64:	c8 2f       	mov	r28, r24
  66:	16 d1       	rcall	.+556    	; 0x294 <i2c_send_start>
  68:	80 ed       	ldi	r24, 0xD0	; 208
  6a:	4b d1       	rcall	.+662    	; 0x302 <i2c_send_data>
  6c:	3b d1       	rcall	.+630    	; 0x2e4 <i2c_get_ack>
  6e:	8c 2f       	mov	r24, r28
  70:	48 d1       	rcall	.+656    	; 0x302 <i2c_send_data>
  72:	38 d1       	rcall	.+624    	; 0x2e4 <i2c_get_ack>
  74:	cf 91       	pop	r28
  76:	08 95       	ret

00000078 <acc_single_write>:
  78:	cf 93       	push	r28
  7a:	c6 2f       	mov	r28, r22
  7c:	f2 df       	rcall	.-28     	; 0x62 <acc_send_reg_add>
  7e:	8c 2f       	mov	r24, r28
  80:	40 d1       	rcall	.+640    	; 0x302 <i2c_send_data>
  82:	30 d1       	rcall	.+608    	; 0x2e4 <i2c_get_ack>
  84:	19 d1       	rcall	.+562    	; 0x2b8 <i2c_send_stop>
  86:	cf 91       	pop	r28
  88:	08 95       	ret

0000008a <acc_init>:
  8a:	fa d0       	rcall	.+500    	; 0x280 <i2c_init>
  8c:	dd df       	rcall	.-70     	; 0x48 <ext_int0_init>
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	8c e1       	ldi	r24, 0x1C	; 28
  92:	f2 df       	rcall	.-28     	; 0x78 <acc_single_write>
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	ef df       	rcall	.-34     	; 0x78 <acc_single_write>
  9a:	08 95       	ret

0000009c <acc_burst_read>:
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	e0 df       	rcall	.-64     	; 0x62 <acc_send_reg_add>
  a2:	f8 d0       	rcall	.+496    	; 0x294 <i2c_send_start>
  a4:	81 ed       	ldi	r24, 0xD1	; 209
  a6:	2d d1       	rcall	.+602    	; 0x302 <i2c_send_data>
  a8:	1d d1       	rcall	.+570    	; 0x2e4 <i2c_get_ack>
  aa:	3d d1       	rcall	.+634    	; 0x326 <i2c_get_data>
  ac:	c8 2f       	mov	r28, r24
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	dc 2f       	mov	r29, r28
  b2:	cc 27       	eor	r28, r28
  b4:	08 d1       	rcall	.+528    	; 0x2c6 <i2c_send_ack>
  b6:	37 d1       	rcall	.+622    	; 0x326 <i2c_get_data>
  b8:	c8 2b       	or	r28, r24
  ba:	0d d1       	rcall	.+538    	; 0x2d6 <i2c_send_nack>
  bc:	fd d0       	rcall	.+506    	; 0x2b8 <i2c_send_stop>
  be:	ce 01       	movw	r24, r28
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <acc_calibrate>:
  c6:	08 95       	ret

000000c8 <__vector_1>:
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  ea:	8b e3       	ldi	r24, 0x3B	; 59
  ec:	d7 df       	rcall	.-82     	; 0x9c <acc_burst_read>
  ee:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <x_acc>
  f2:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <x_acc+0x1>
  f6:	82 17       	cp	r24, r18
  f8:	93 07       	cpc	r25, r19
  fa:	29 f0       	breq	.+10     	; 0x106 <__stack+0x27>
  fc:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <x_acc+0x1>
 100:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <x_acc>
 104:	0d c0       	rjmp	.+26     	; 0x120 <__stack+0x41>
 106:	8d e3       	ldi	r24, 0x3D	; 61
 108:	c9 df       	rcall	.-110    	; 0x9c <acc_burst_read>
 10a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <y_acc>
 10e:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <y_acc+0x1>
 112:	82 17       	cp	r24, r18
 114:	93 07       	cpc	r25, r19
 116:	21 f0       	breq	.+8      	; 0x120 <__stack+0x41>
 118:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <y_acc+0x1>
 11c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <y_acc>
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_13>:
}
 
ISR(TIMER0_COMPA_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
	
}
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_14>:
 
ISR(TIMER0_COMPB_vect){
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
	
}
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <gauge_send_reg_add>:
void gauge_init(void){
	gauge_single_write(CHARGE_MSB, 0xFF);
	gauge_single_write(CHARGE_LSB, 0xFF);
}

void gauge_send_reg_add(uint8_t reg_address){
 16a:	cf 93       	push	r28
 16c:	c8 2f       	mov	r28, r24
	i2c_send_start();
 16e:	92 d0       	rcall	.+292    	; 0x294 <i2c_send_start>
	i2c_send_data(GAUGE_ADD<<1);				//send device address and write
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	c7 d0       	rcall	.+398    	; 0x302 <i2c_send_data>
	i2c_get_ack();							//wait for acknowledge
 174:	b7 d0       	rcall	.+366    	; 0x2e4 <i2c_get_ack>
	i2c_send_data(reg_address);				//send register address of MPU
 176:	8c 2f       	mov	r24, r28
 178:	c4 d0       	rcall	.+392    	; 0x302 <i2c_send_data>
	i2c_get_ack();							//wait for acknowledge
 17a:	b4 d0       	rcall	.+360    	; 0x2e4 <i2c_get_ack>
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <gauge_single_write>:
	i2c_send_stop();
	return(ret);
}
*/

void gauge_single_write(uint8_t reg_address, uint8_t data){
 180:	cf 93       	push	r28
 182:	c6 2f       	mov	r28, r22
	gauge_send_reg_add(reg_address);
 184:	f2 df       	rcall	.-28     	; 0x16a <gauge_send_reg_add>
	i2c_send_data(data);
 186:	8c 2f       	mov	r24, r28
 188:	bc d0       	rcall	.+376    	; 0x302 <i2c_send_data>
	i2c_get_ack();
 18a:	ac d0       	rcall	.+344    	; 0x2e4 <i2c_get_ack>
	i2c_send_stop();
 18c:	95 d0       	rcall	.+298    	; 0x2b8 <i2c_send_stop>
}
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <gauge_init>:
#include "gauge.h"
#include "i2c.h"
// #include "gpio.h"

void gauge_init(void){
	gauge_single_write(CHARGE_MSB, 0xFF);
 192:	6f ef       	ldi	r22, 0xFF	; 255
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	f4 df       	rcall	.-24     	; 0x180 <gauge_single_write>
	gauge_single_write(CHARGE_LSB, 0xFF);
 198:	6f ef       	ldi	r22, 0xFF	; 255
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	f1 df       	rcall	.-30     	; 0x180 <gauge_single_write>
 19e:	08 95       	ret

000001a0 <gpio_init>:
void gpio_set_led(){
	PORT(_PORT) &= ~(1<<L0); 
}

void gpio_reset_led(){
	PORT(_PORT) |= (1<<L0);
 1a0:	87 b3       	in	r24, 0x17	; 23
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	87 bb       	out	0x17, r24	; 23
 1a6:	c5 9a       	sbi	0x18, 5	; 24
 1a8:	bd 9a       	sbi	0x17, 5	; 23
 1aa:	80 b5       	in	r24, 0x20	; 32
 1ac:	8f 60       	ori	r24, 0x0F	; 15
 1ae:	80 bd       	out	0x20, r24	; 32
 1b0:	8b b7       	in	r24, 0x3b	; 59
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	8b bf       	out	0x3b, r24	; 59
 1b6:	8f b7       	in	r24, 0x3f	; 63
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	8f bf       	out	0x3f, r24	; 63
 1bc:	08 95       	ret

000001be <__vector_11>:
}
 
ISR(PCINT0_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	uint8_t new_buttons = PORT(_PORT) & 0xF;
 1e4:	d8 b3       	in	r29, 0x18	; 24
 1e6:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = new_buttons ^ old_buttons;
 1e8:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <_edata>
 1ec:	cd 27       	eor	r28, r29
	if(temp & (1<<B0)){
 1ee:	c0 ff       	sbrs	r28, 0
 1f0:	0b c0       	rjmp	.+22     	; 0x208 <__vector_11+0x4a>
		PORT(_PORT) ^= (1<<L0);
 1f2:	98 b3       	in	r25, 0x18	; 24
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	89 27       	eor	r24, r25
 1f8:	88 bb       	out	0x18, r24	; 24
		
		if(!(old_buttons&(1<<B0))){
 1fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1fe:	80 fd       	sbrc	r24, 0
 200:	03 c0       	rjmp	.+6      	; 0x208 <__vector_11+0x4a>
			uart_put_com((B0_COM<<2), (PORT(_PORT)>>B0));
 202:	68 b3       	in	r22, 0x18	; 24
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	b5 d0       	rcall	.+362    	; 0x372 <uart_put_com>
		}
	}
	if(temp & (1<<B1)){
 208:	c1 ff       	sbrs	r28, 1
 20a:	0c c0       	rjmp	.+24     	; 0x224 <__vector_11+0x66>
		PORT(_PORT) ^= (1<<L0);
 20c:	98 b3       	in	r25, 0x18	; 24
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	89 27       	eor	r24, r25
 212:	88 bb       	out	0x18, r24	; 24
		
		if(!(old_buttons&(1<<B1))){
 214:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 218:	81 fd       	sbrc	r24, 1
 21a:	04 c0       	rjmp	.+8      	; 0x224 <__vector_11+0x66>
			uart_put_com((B1_COM<<2), (PORT(_PORT)>>B1));
 21c:	68 b3       	in	r22, 0x18	; 24
 21e:	66 95       	lsr	r22
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	a7 d0       	rcall	.+334    	; 0x372 <uart_put_com>
		}
	}
	if(temp & (1<<B2)){
 224:	c2 ff       	sbrs	r28, 2
 226:	0d c0       	rjmp	.+26     	; 0x242 <__vector_11+0x84>
		PORT(_PORT) ^= (1<<L0);
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	80 e2       	ldi	r24, 0x20	; 32
 22c:	89 27       	eor	r24, r25
 22e:	88 bb       	out	0x18, r24	; 24
		
		if(!(old_buttons&(1<<B2))){
 230:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 234:	82 fd       	sbrc	r24, 2
 236:	05 c0       	rjmp	.+10     	; 0x242 <__vector_11+0x84>
			uart_put_com((B2_COM<<2), (PORT(_PORT)>>B2));
 238:	68 b3       	in	r22, 0x18	; 24
 23a:	66 95       	lsr	r22
 23c:	66 95       	lsr	r22
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	98 d0       	rcall	.+304    	; 0x372 <uart_put_com>
		}
	}
	
	if(temp & (1<<B3)){									//calibration button
 242:	c3 ff       	sbrs	r28, 3
 244:	08 c0       	rjmp	.+16     	; 0x256 <__vector_11+0x98>
		PORT(_PORT) ^= (1<<L0);
 246:	98 b3       	in	r25, 0x18	; 24
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	89 27       	eor	r24, r25
 24c:	88 bb       	out	0x18, r24	; 24
		
		if(!(old_buttons&(1<<B2))){
 24e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 252:	82 ff       	sbrs	r24, 2
			acc_calibrate();
 254:	38 df       	rcall	.-400    	; 0xc6 <acc_calibrate>
		}
	}
	old_buttons = new_buttons;
 256:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <_edata>
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <i2c_init>:
#include <util/delay.h>

#include "i2c.h"

void i2c_init(){
	USIDR = 0xFF;							//set data register high for start condition
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) = (1<<_SDA)|(1<<_SCL);		//set HIGH with pull up.
 284:	80 ea       	ldi	r24, 0xA0	; 160
 286:	88 bb       	out	0x18, r24	; 24
	DDR(_PORT) = (1<<_SDA)|(1<<_SCL);		//enable output driver for SDA and SCL.
 288:	87 bb       	out	0x17, r24	; 23
	//SDA corresponds with MSB of USIDR and PORTB bit. SCL is high unless forced low by start detector or bit PORTB register.
	USICR = (0<<USISIE)|(0<<USISIE)|(1<<USIWM1)|(0<<USIWM0)|(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|(0<<USITC);
 28a:	8a e2       	ldi	r24, 0x2A	; 42
 28c:	8d b9       	out	0x0d, r24	; 13
	USISR = (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|(0x0<<USICNT0);		//reset flags and counter value
 28e:	80 ef       	ldi	r24, 0xF0	; 240
 290:	8e b9       	out	0x0e, r24	; 14
 292:	08 95       	ret

00000294 <i2c_send_start>:
}

void i2c_send_start(){
	PORT(_PORT) = (1<<_SDA)|(1<<_SCL);		//release both for start condition
 294:	80 ea       	ldi	r24, 0xA0	; 160
 296:	88 bb       	out	0x18, r24	; 24
	while((!(PORT(_PORT)&(1<<_SCL)))|(!(PORT(_PORT)&(1<<_SDA))));
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	98 b3       	in	r25, 0x18	; 24
 29c:	88 b3       	in	r24, 0x18	; 24
 29e:	85 fb       	bst	r24, 5
 2a0:	88 27       	eor	r24, r24
 2a2:	80 f9       	bld	r24, 0
 2a4:	82 13       	cpse	r24, r18
 2a6:	f9 cf       	rjmp	.-14     	; 0x29a <i2c_send_start+0x6>
 2a8:	99 23       	and	r25, r25
 2aa:	bc f7       	brge	.-18     	; 0x29a <i2c_send_start+0x6>
	PORT(_PORT) &= ~(1<<_SDA);				//force SDA low
 2ac:	c5 98       	cbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <i2c_send_start+0x1c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <i2c_send_start+0x1e>
 2b2:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 2b4:	c7 98       	cbi	0x18, 7	; 24
 2b6:	08 95       	ret

000002b8 <i2c_send_stop>:
}

void i2c_send_stop(){
	PORT(_PORT) &= ~(1<<_SDA);				//force SDA low
 2b8:	c5 98       	cbi	0x18, 5	; 24
	PORT(_PORT) |= (1<<_SCL);				//release SCL
 2ba:	c7 9a       	sbi	0x18, 7	; 24
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <i2c_send_stop+0x6>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <i2c_send_stop+0x8>
 2c0:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) |= (1<<_SDA);				//release SDA
 2c2:	c5 9a       	sbi	0x18, 5	; 24
 2c4:	08 95       	ret

000002c6 <i2c_send_ack>:
}

void i2c_send_ack(){
	PORT(_PORT) &= ~(1<<_SDA);				//force SDA low
 2c6:	c5 98       	cbi	0x18, 5	; 24
	PORT(_PORT) |= (1<<_SCL);				//release SCL
 2c8:	c7 9a       	sbi	0x18, 7	; 24
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <i2c_send_ack+0x6>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <i2c_send_ack+0x8>
 2ce:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 2d0:	c7 98       	cbi	0x18, 7	; 24
	PORT(_PORT) |= (1<<_SDA);				//release SDA
 2d2:	c5 9a       	sbi	0x18, 5	; 24
 2d4:	08 95       	ret

000002d6 <i2c_send_nack>:
}

void i2c_send_nack(){
	PORT(_PORT) |= (1<<_SDA);				//release SDA
 2d6:	c5 9a       	sbi	0x18, 5	; 24
	PORT(_PORT) |= (1<<_SCL);				//release SCL
 2d8:	c7 9a       	sbi	0x18, 7	; 24
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <i2c_send_nack+0x6>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <i2c_send_nack+0x8>
 2de:	00 00       	nop
	_delay_us(BIT_TIME);
	PORT(_PORT) &= ~(1<<_SCL);				//force SCL low
 2e0:	c7 98       	cbi	0x18, 7	; 24
 2e2:	08 95       	ret

000002e4 <i2c_get_ack>:
}

uint8_t i2c_get_ack(){
	uint8_t ret = 0;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 2e4:	bd 98       	cbi	0x17, 5	; 23
	USICR |= (1<<USITC);						//toggle SCL to HIGH
 2e6:	68 9a       	sbi	0x0d, 0	; 13
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <i2c_get_ack+0x6>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <i2c_get_ack+0x8>
 2ec:	00 00       	nop
	_delay_us(BIT_TIME);
	USICR |= (1<<USITC);						//toggle SCL to LOW
 2ee:	68 9a       	sbi	0x0d, 0	; 13
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <i2c_get_ack+0xe>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <i2c_get_ack+0x10>
 2f4:	00 00       	nop
	_delay_us(BIT_TIME);
	ret = (USIDR & 1);
 2f6:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 2f8:	9f ef       	ldi	r25, 0xFF	; 255
 2fa:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 2fc:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 2fe:	81 70       	andi	r24, 0x01	; 1
 300:	08 95       	ret

00000302 <i2c_send_data>:

void i2c_send_data(uint8_t data){
	USIDR = data;
 302:	8f b9       	out	0x0f, r24	; 15
	PORT(_PORT) |= (1<<_SDA);
 304:	c5 9a       	sbi	0x18, 5	; 24
	USISR &= ~(0xF<<USICNT0);					//reset counter
 306:	8e b1       	in	r24, 0x0e	; 14
 308:	80 7f       	andi	r24, 0xF0	; 240
 30a:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 30c:	68 9a       	sbi	0x0d, 0	; 13
 30e:	00 c0       	rjmp	.+0      	; 0x310 <i2c_send_data+0xe>
 310:	00 c0       	rjmp	.+0      	; 0x312 <i2c_send_data+0x10>
 312:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 314:	68 9a       	sbi	0x0d, 0	; 13
 316:	00 c0       	rjmp	.+0      	; 0x318 <i2c_send_data+0x16>
 318:	00 c0       	rjmp	.+0      	; 0x31a <i2c_send_data+0x18>
 31a:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 31c:	76 9b       	sbis	0x0e, 6	; 14
 31e:	f6 cf       	rjmp	.-20     	; 0x30c <i2c_send_data+0xa>
	
	USIDR = 0xFF;
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	8f b9       	out	0x0f, r24	; 15
 324:	08 95       	ret

00000326 <i2c_get_data>:
}

uint8_t i2c_get_data(){
	uint8_t ret;
	DDR(_PORT) &= ~(1<<_SDA);					//set SDA as input
 326:	bd 98       	cbi	0x17, 5	; 23
	USISR &= ~(0xF << USICNT0);					//reset counter
 328:	8e b1       	in	r24, 0x0e	; 14
 32a:	80 7f       	andi	r24, 0xF0	; 240
 32c:	8e b9       	out	0x0e, r24	; 14
	do{
		USICR |= (1<<USITC);					//toggle SCL to HIGH
 32e:	68 9a       	sbi	0x0d, 0	; 13
 330:	00 c0       	rjmp	.+0      	; 0x332 <i2c_get_data+0xc>
 332:	00 c0       	rjmp	.+0      	; 0x334 <i2c_get_data+0xe>
 334:	00 00       	nop
		_delay_us(BIT_TIME);
		USICR |= (1<<USITC);					//toggle SCL to LOW
 336:	68 9a       	sbi	0x0d, 0	; 13
 338:	00 c0       	rjmp	.+0      	; 0x33a <i2c_get_data+0x14>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <i2c_get_data+0x16>
 33c:	00 00       	nop
		_delay_us(BIT_TIME);
	}while(!(USISR & (1<<USIOIF)));				//check counter overflow flag
 33e:	76 9b       	sbis	0x0e, 6	; 14
 340:	f6 cf       	rjmp	.-20     	; 0x32e <i2c_get_data+0x8>
	ret = USIDR;
 342:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	9f b9       	out	0x0f, r25	; 15
	DDR(_PORT) |= (1<<_SDA);					//set as SDA as output
 348:	bd 9a       	sbi	0x17, 5	; 23
	return(ret);
}
 34a:	08 95       	ret

0000034c <main>:
#include "gauge.h"
#include "gpio.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 350:	16 bc       	out	0x26, r1	; 38
		
	acc_init();
 352:	9b de       	rcall	.-714    	; 0x8a <acc_init>
	uart_init();
 354:	03 d0       	rcall	.+6      	; 0x35c <uart_init>
	gauge_init();
 356:	1d df       	rcall	.-454    	; 0x192 <gauge_init>
	gpio_init();
 358:	23 df       	rcall	.-442    	; 0x1a0 <gpio_init>
 35a:	ff cf       	rjmp	.-2      	; 0x35a <main+0xe>

0000035c <uart_init>:
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
}

void uart_transmit(uint8_t command) { //, uint8_t data
	while (!(UCSRA & (1<<UDRE)));
	UDR = command;
 35c:	12 b8       	out	0x02, r1	; 2
 35e:	83 e3       	ldi	r24, 0x33	; 51
 360:	89 b9       	out	0x09, r24	; 9
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	8a b9       	out	0x0a, r24	; 10
 366:	86 e2       	ldi	r24, 0x26	; 38
 368:	83 b9       	out	0x03, r24	; 3
 36a:	8f b7       	in	r24, 0x3f	; 63
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	8f bf       	out	0x3f, r24	; 63
 370:	08 95       	ret

00000372 <uart_put_com>:
	//while (!(UCSRA & (1<<UDRE)));
	//UDR = data; 
}

void uart_put_com(uint8_t command, uint8_t data){
	while(size < 0);
 372:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <size>
	tx_buffer[1] = command;
 376:	e2 e6       	ldi	r30, 0x62	; 98
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 37c:	60 83       	st	Z, r22
	size = 2;
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <size>
	UCSRB |= (1<<UDRIE);
 384:	55 9a       	sbi	0x0a, 5	; 10
 386:	08 95       	ret

00000388 <__vector_8>:
}

ISR(USART_UDRE_vect){
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	8f 93       	push	r24
	if(size < 0){
 394:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <size>
		UDR = tx_buffer[size-1];
		size--;
	}else{
		UCSRB &= ~(1<<UDRIE);
 398:	55 98       	cbi	0x0a, 5	; 10
	}
}
 39a:	8f 91       	pop	r24
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
