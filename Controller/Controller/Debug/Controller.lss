
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146c  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bb  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b88  00000000  00000000  00002537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  000030c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3b  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000043ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	45 c0       	rjmp	.+138    	; 0x8e <__vector_1>
   4:	a9 c0       	rjmp	.+338    	; 0x158 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	6f c0       	rjmp	.+222    	; 0xea <__vector_5>
   c:	ec c0       	rjmp	.+472    	; 0x1e6 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	36 c2       	rjmp	.+1132   	; 0x47e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	11 c1       	rjmp	.+546    	; 0x23a <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d2       	rcall	.+1028   	; 0x448 <main>
  44:	41 c2       	rjmp	.+1154   	; 0x4c8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <acc_init>:
uint16_t x_pos[2], y_pos[2];
uint16_t x_noise, y_noise;
uint8_t ovf_counter = 0;

void acc_init(){
	i2c_init();
  48:	4c d1       	rcall	.+664    	; 0x2e2 <i2c_init>
	i2c_single_write(ACC_ADD, PWR_MAN, 0x00);		//turn off sleep mode
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	6b e6       	ldi	r22, 0x6B	; 107
  4e:	88 e6       	ldi	r24, 0x68	; 104
  50:	b6 d1       	rcall	.+876    	; 0x3be <i2c_single_write>
	i2c_single_write(ACC_ADD, ACC_CON, 0x00);		//set range on +/- 2g
  52:	40 e0       	ldi	r20, 0x00	; 0
  54:	6c e1       	ldi	r22, 0x1C	; 28
  56:	88 e6       	ldi	r24, 0x68	; 104
  58:	b2 d1       	rcall	.+868    	; 0x3be <i2c_single_write>
	i2c_single_write(ACC_ADD, SMPRT_DIV, 0x00);
  5a:	40 e0       	ldi	r20, 0x00	; 0
  5c:	69 e1       	ldi	r22, 0x19	; 25
  5e:	88 e6       	ldi	r24, 0x68	; 104
  60:	ae d1       	rcall	.+860    	; 0x3be <i2c_single_write>
	i2c_single_write(ACC_ADD, INT_CON, 0x00);
  62:	40 e0       	ldi	r20, 0x00	; 0
  64:	67 e3       	ldi	r22, 0x37	; 55
  66:	88 e6       	ldi	r24, 0x68	; 104
  68:	aa d1       	rcall	.+852    	; 0x3be <i2c_single_write>
//	i2c_single_write(ACC_ADD, FIFO_EN, 0x08);		//write x,y,z to FIFO
//	i2c_single_write(ACC_ADD, INT_EN, 0x10);		//enable interrupt on FIFO overflow	
	i2c_single_write(ACC_ADD, INT_EN, 0x01);		//enable interrupt on data ready
  6a:	41 e0       	ldi	r20, 0x01	; 1
  6c:	68 e3       	ldi	r22, 0x38	; 56
  6e:	88 e6       	ldi	r24, 0x68	; 104
  70:	a6 d1       	rcall	.+844    	; 0x3be <i2c_single_write>

	uart_init();
  72:	f1 d1       	rcall	.+994    	; 0x456 <uart_init>
/*	
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(0<<CS10);		//no clock, clear timer on compare
	TIMSK |= (1<<TOIE1);							//enable overflow interrupt
*/	
	MCUCR |= (1 << ISC00);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	81 60       	ori	r24, 0x01	; 1
  78:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);							//The rising edge of INT0 generates an interrupt request
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);							//enable external interrupt 0 in general interrupt mask register
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);							//enable interrupts I in global status register
  86:	8f b7       	in	r24, 0x3f	; 63
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8f bf       	out	0x3f, r24	; 63
  8c:	08 95       	ret

0000008e <__vector_1>:
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);
}
*/

ISR(INT0_vect){		//External interrupt0 service routine
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	4f 93       	push	r20
  9e:	5f 93       	push	r21
  a0:	6f 93       	push	r22
  a2:	7f 93       	push	r23
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	af 93       	push	r26
  aa:	bf 93       	push	r27
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
	ovf_counter = 0;
*/	
	uint16_t temp_16;
	uint8_t temp_8[2];
	
	temp_16 = i2c_burst_read(ACC_ADD, X_MSB);
  b0:	6b e3       	ldi	r22, 0x3B	; 59
  b2:	88 e6       	ldi	r24, 0x68	; 104
  b4:	b1 d1       	rcall	.+866    	; 0x418 <i2c_burst_read>
	temp_8[1] = (temp_16>>8);
	temp_8[0] = (temp_16&0xFF);
	uart_put_com(temp_8[1], temp_8[0]);
  b6:	68 2f       	mov	r22, r24
  b8:	89 2f       	mov	r24, r25
  ba:	d8 d1       	rcall	.+944    	; 0x46c <uart_put_com>
	
	temp_16 = i2c_burst_read(ACC_ADD, Y_MSB);
  bc:	6d e3       	ldi	r22, 0x3D	; 61
  be:	88 e6       	ldi	r24, 0x68	; 104
  c0:	ab d1       	rcall	.+854    	; 0x418 <i2c_burst_read>
	temp_8[1] = (temp_16>>8);
	temp_8[0] = (temp_16&0xFF);
	uart_put_com(temp_8[1], temp_8[0]);
  c2:	68 2f       	mov	r22, r24
  c4:	89 2f       	mov	r24, r25
  c6:	d2 d1       	rcall	.+932    	; 0x46c <uart_put_com>
}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_5>:

ISR(TIMER1_OVF_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	ovf_counter++;
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <gauge_init>:
#include "i2c.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_init();
 10c:	ea d0       	rcall	.+468    	; 0x2e2 <i2c_init>
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	4f ef       	ldi	r20, 0xFF	; 255
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	84 e6       	ldi	r24, 0x64	; 100
 116:	5c d1       	rcall	.+696    	; 0x3d0 <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 118:	2c e1       	ldi	r18, 0x1C	; 28
 11a:	4c e7       	ldi	r20, 0x7C	; 124
 11c:	66 e0       	ldi	r22, 0x06	; 6
 11e:	84 e6       	ldi	r24, 0x64	; 100
 120:	57 d1       	rcall	.+686    	; 0x3d0 <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 122:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 124:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 126:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 128:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 12a:	89 b7       	in	r24, 0x39	; 57
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 130:	85 b7       	in	r24, 0x35	; 53
 132:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 134:	85 b7       	in	r24, 0x35	; 53
 136:	88 60       	ori	r24, 0x08	; 8
 138:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 13a:	8b b7       	in	r24, 0x3b	; 59
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 140:	8f b7       	in	r24, 0x3f	; 63
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8f bf       	out	0x3f, r24	; 63
 146:	08 95       	ret

00000148 <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 148:	d9 d0       	rcall	.+434    	; 0x2fc <i2c_send_start>
	i2c_send_data(ARA<<1);
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	15 d1       	rcall	.+554    	; 0x378 <i2c_send_data>
	i2c_get_ack();						
 14e:	03 d1       	rcall	.+518    	; 0x356 <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 150:	4e d1       	rcall	.+668    	; 0x3ee <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 152:	f9 d0       	rcall	.+498    	; 0x346 <i2c_send_nack>
	i2c_send_stop();
 154:	e7 d0       	rcall	.+462    	; 0x324 <i2c_send_stop>
 156:	08 95       	ret

00000158 <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 17a:	03 b6       	in	r0, 0x33	; 51
 17c:	02 fe       	sbrs	r0, 2
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <__vector_2+0x4e>
 180:	03 b6       	in	r0, 0x33	; 51
 182:	00 fe       	sbrs	r0, 0
 184:	10 c0       	rjmp	.+32     	; 0x1a6 <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 186:	83 b7       	in	r24, 0x33	; 51
 188:	8a 7f       	andi	r24, 0xFA	; 250
 18a:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 18c:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	64 e0       	ldi	r22, 0x04	; 4
 194:	84 e6       	ldi	r24, 0x64	; 100
 196:	1c d1       	rcall	.+568    	; 0x3d0 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 198:	2c e1       	ldi	r18, 0x1C	; 28
 19a:	4c e7       	ldi	r20, 0x7C	; 124
 19c:	66 e0       	ldi	r22, 0x06	; 6
 19e:	84 e6       	ldi	r24, 0x64	; 100
 1a0:	17 d1       	rcall	.+558    	; 0x3d0 <i2c_burst_write>
		gauge_send_arp();	
 1a2:	d2 df       	rcall	.-92     	; 0x148 <gauge_send_arp>
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 1a6:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 1a8:	83 b7       	in	r24, 0x33	; 51
 1aa:	85 60       	ori	r24, 0x05	; 5
 1ac:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	66 e0       	ldi	r22, 0x06	; 6
 1b4:	84 e6       	ldi	r24, 0x64	; 100
 1b6:	0c d1       	rcall	.+536    	; 0x3d0 <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 1b8:	2d ef       	ldi	r18, 0xFD	; 253
 1ba:	4d e7       	ldi	r20, 0x7D	; 125
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	84 e6       	ldi	r24, 0x64	; 100
 1c0:	07 d1       	rcall	.+526    	; 0x3d0 <i2c_burst_write>
		gauge_send_arp();
 1c2:	c2 df       	rcall	.-124    	; 0x148 <gauge_send_arp>
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_6>:

ISR(TIMER0_OVF_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	if(count == 17){
 1f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count>
 1f8:	81 31       	cpi	r24, 0x11	; 17
 1fa:	39 f4       	brne	.+14     	; 0x20a <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 1fc:	98 b3       	in	r25, 0x18	; 24
 1fe:	80 e1       	ldi	r24, 0x10	; 16
 200:	89 27       	eor	r24, r25
 202:	88 bb       	out	0x18, r24	; 24
		count = 0;
 204:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count>
 208:	03 c0       	rjmp	.+6      	; 0x210 <__vector_6+0x2a>
	}else{
		count++;
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count>
	}
}
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <buttons_init>:
#include "i2c.h"

volatile uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 21e:	87 b3       	in	r24, 0x17	; 23
 220:	80 7f       	andi	r24, 0xF0	; 240
 222:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 224:	80 b5       	in	r24, 0x20	; 32
 226:	8f 60       	ori	r24, 0x0F	; 15
 228:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 22a:	8b b7       	in	r24, 0x3b	; 59
 22c:	80 62       	ori	r24, 0x20	; 32
 22e:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 230:	8f b7       	in	r24, 0x3f	; 63
 232:	80 68       	ori	r24, 0x80	; 128
 234:	8f bf       	out	0x3f, r24	; 63
	
	uart_init();
 236:	0f d1       	rcall	.+542    	; 0x456 <uart_init>
 238:	08 95       	ret

0000023a <__vector_11>:
}

ISR(PCINT0_vect){		
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 260:	d6 b3       	in	r29, 0x16	; 22
 262:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 264:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <old_buttons>
 268:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 26a:	c0 ff       	sbrs	r28, 0
 26c:	07 c0       	rjmp	.+14     	; 0x27c <__vector_11+0x42>
 26e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 272:	80 ff       	sbrs	r24, 0
 274:	03 c0       	rjmp	.+6      	; 0x27c <__vector_11+0x42>
		uart_put_com(0xBB, 0xBB);
 276:	6b eb       	ldi	r22, 0xBB	; 187
 278:	8b eb       	ldi	r24, 0xBB	; 187
 27a:	f8 d0       	rcall	.+496    	; 0x46c <uart_put_com>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 27c:	c1 ff       	sbrs	r28, 1
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__vector_11+0x54>
 280:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 284:	81 ff       	sbrs	r24, 1
 286:	03 c0       	rjmp	.+6      	; 0x28e <__vector_11+0x54>
		uart_put_com(0x44, 0x44);
 288:	64 e4       	ldi	r22, 0x44	; 68
 28a:	84 e4       	ldi	r24, 0x44	; 68
 28c:	ef d0       	rcall	.+478    	; 0x46c <uart_put_com>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 28e:	c2 ff       	sbrs	r28, 2
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <__vector_11+0x66>
 292:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 296:	82 ff       	sbrs	r24, 2
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <__vector_11+0x66>
		uart_put_com(0x11, 0x11);
 29a:	61 e1       	ldi	r22, 0x11	; 17
 29c:	81 e1       	ldi	r24, 0x11	; 17
 29e:	e6 d0       	rcall	.+460    	; 0x46c <uart_put_com>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 2a0:	c3 ff       	sbrs	r28, 3
 2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <__vector_11+0x7e>
 2a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <old_buttons>
 2a8:	83 ff       	sbrs	r24, 3
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <__vector_11+0x7e>
		uint16_t temp_16;
		uint8_t temp_8[2];
		temp_16 = i2c_burst_read(ACC_ADD, X_MSB);
 2ac:	6b e3       	ldi	r22, 0x3B	; 59
 2ae:	88 e6       	ldi	r24, 0x68	; 104
 2b0:	b3 d0       	rcall	.+358    	; 0x418 <i2c_burst_read>
		temp_8[1] = (temp_16>>8);
		temp_8[0] = (temp_16&0xFF);
		uart_put_com(temp_8[1], temp_8[0]);
 2b2:	68 2f       	mov	r22, r24
 2b4:	89 2f       	mov	r24, r25
 2b6:	da d0       	rcall	.+436    	; 0x46c <uart_put_com>
	}
	old_buttons = new_buttons;
 2b8:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <old_buttons>
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	8f b9       	out	0x0f, r24	; 15
 2e6:	88 b3       	in	r24, 0x18	; 24
 2e8:	80 6a       	ori	r24, 0xA0	; 160
 2ea:	88 bb       	out	0x18, r24	; 24
 2ec:	87 b3       	in	r24, 0x17	; 23
 2ee:	80 6a       	ori	r24, 0xA0	; 160
 2f0:	87 bb       	out	0x17, r24	; 23
 2f2:	8a e2       	ldi	r24, 0x2A	; 42
 2f4:	8d b9       	out	0x0d, r24	; 13
 2f6:	80 ef       	ldi	r24, 0xF0	; 240
 2f8:	8e b9       	out	0x0e, r24	; 14
 2fa:	08 95       	ret

000002fc <i2c_send_start>:
 2fc:	88 b3       	in	r24, 0x18	; 24
 2fe:	80 6a       	ori	r24, 0xA0	; 160
 300:	88 bb       	out	0x18, r24	; 24
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	98 b3       	in	r25, 0x18	; 24
 306:	88 b3       	in	r24, 0x18	; 24
 308:	85 fb       	bst	r24, 5
 30a:	88 27       	eor	r24, r24
 30c:	80 f9       	bld	r24, 0
 30e:	82 13       	cpse	r24, r18
 310:	f9 cf       	rjmp	.-14     	; 0x304 <i2c_send_start+0x8>
 312:	99 23       	and	r25, r25
 314:	bc f7       	brge	.-18     	; 0x304 <i2c_send_start+0x8>
 316:	c5 98       	cbi	0x18, 5	; 24
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <i2c_send_start+0x1e>
 31e:	00 00       	nop
 320:	c7 98       	cbi	0x18, 7	; 24
 322:	08 95       	ret

00000324 <i2c_send_stop>:
 324:	c5 98       	cbi	0x18, 5	; 24
 326:	c7 9a       	sbi	0x18, 7	; 24
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <i2c_send_stop+0x6>
 32e:	00 00       	nop
 330:	c5 9a       	sbi	0x18, 5	; 24
 332:	08 95       	ret

00000334 <i2c_send_ack>:
 334:	c5 98       	cbi	0x18, 5	; 24
 336:	c7 9a       	sbi	0x18, 7	; 24
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	8a 95       	dec	r24
 33c:	f1 f7       	brne	.-4      	; 0x33a <i2c_send_ack+0x6>
 33e:	00 00       	nop
 340:	c7 98       	cbi	0x18, 7	; 24
 342:	c5 9a       	sbi	0x18, 5	; 24
 344:	08 95       	ret

00000346 <i2c_send_nack>:
 346:	c5 9a       	sbi	0x18, 5	; 24
 348:	c7 9a       	sbi	0x18, 7	; 24
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <i2c_send_nack+0x6>
 350:	00 00       	nop
 352:	c7 98       	cbi	0x18, 7	; 24
 354:	08 95       	ret

00000356 <i2c_get_ack>:
 356:	bd 98       	cbi	0x17, 5	; 23
 358:	68 9a       	sbi	0x0d, 0	; 13
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	8a 95       	dec	r24
 35e:	f1 f7       	brne	.-4      	; 0x35c <i2c_get_ack+0x6>
 360:	00 00       	nop
 362:	68 9a       	sbi	0x0d, 0	; 13
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <i2c_get_ack+0x10>
 36a:	00 00       	nop
 36c:	8f b1       	in	r24, 0x0f	; 15
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	9f b9       	out	0x0f, r25	; 15
 372:	bd 9a       	sbi	0x17, 5	; 23
 374:	81 70       	andi	r24, 0x01	; 1
 376:	08 95       	ret

00000378 <i2c_send_data>:
 378:	8f b9       	out	0x0f, r24	; 15
 37a:	c5 9a       	sbi	0x18, 5	; 24
 37c:	8e b1       	in	r24, 0x0e	; 14
 37e:	80 7f       	andi	r24, 0xF0	; 240
 380:	8e b9       	out	0x0e, r24	; 14
 382:	68 9a       	sbi	0x0d, 0	; 13
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <i2c_send_data+0xe>
 38a:	00 00       	nop
 38c:	68 9a       	sbi	0x0d, 0	; 13
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <i2c_send_data+0x18>
 394:	00 00       	nop
 396:	76 9b       	sbis	0x0e, 6	; 14
 398:	f4 cf       	rjmp	.-24     	; 0x382 <i2c_send_data+0xa>
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	8f b9       	out	0x0f, r24	; 15
 39e:	08 95       	ret

000003a0 <i2c_send_reg_add>:
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	d8 2f       	mov	r29, r24
 3a6:	c6 2f       	mov	r28, r22
 3a8:	a9 df       	rcall	.-174    	; 0x2fc <i2c_send_start>
 3aa:	8d 2f       	mov	r24, r29
 3ac:	88 0f       	add	r24, r24
 3ae:	e4 df       	rcall	.-56     	; 0x378 <i2c_send_data>
 3b0:	d2 df       	rcall	.-92     	; 0x356 <i2c_get_ack>
 3b2:	8c 2f       	mov	r24, r28
 3b4:	e1 df       	rcall	.-62     	; 0x378 <i2c_send_data>
 3b6:	cf df       	rcall	.-98     	; 0x356 <i2c_get_ack>
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <i2c_single_write>:
 3be:	cf 93       	push	r28
 3c0:	c4 2f       	mov	r28, r20
 3c2:	ee df       	rcall	.-36     	; 0x3a0 <i2c_send_reg_add>
 3c4:	8c 2f       	mov	r24, r28
 3c6:	d8 df       	rcall	.-80     	; 0x378 <i2c_send_data>
 3c8:	c6 df       	rcall	.-116    	; 0x356 <i2c_get_ack>
 3ca:	ac df       	rcall	.-168    	; 0x324 <i2c_send_stop>
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <i2c_burst_write>:
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	d4 2f       	mov	r29, r20
 3d6:	c2 2f       	mov	r28, r18
 3d8:	e3 df       	rcall	.-58     	; 0x3a0 <i2c_send_reg_add>
 3da:	8d 2f       	mov	r24, r29
 3dc:	cd df       	rcall	.-102    	; 0x378 <i2c_send_data>
 3de:	bb df       	rcall	.-138    	; 0x356 <i2c_get_ack>
 3e0:	8c 2f       	mov	r24, r28
 3e2:	ca df       	rcall	.-108    	; 0x378 <i2c_send_data>
 3e4:	b8 df       	rcall	.-144    	; 0x356 <i2c_get_ack>
 3e6:	9e df       	rcall	.-196    	; 0x324 <i2c_send_stop>
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <i2c_get_data>:
 3ee:	bd 98       	cbi	0x17, 5	; 23
 3f0:	8e b1       	in	r24, 0x0e	; 14
 3f2:	80 7f       	andi	r24, 0xF0	; 240
 3f4:	8e b9       	out	0x0e, r24	; 14
 3f6:	68 9a       	sbi	0x0d, 0	; 13
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	8a 95       	dec	r24
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <i2c_get_data+0xc>
 3fe:	00 00       	nop
 400:	68 9a       	sbi	0x0d, 0	; 13
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	8a 95       	dec	r24
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 00       	nop
 40a:	76 9b       	sbis	0x0e, 6	; 14
 40c:	f4 cf       	rjmp	.-24     	; 0x3f6 <i2c_get_data+0x8>
 40e:	8f b1       	in	r24, 0x0f	; 15
 410:	9f ef       	ldi	r25, 0xFF	; 255
 412:	9f b9       	out	0x0f, r25	; 15
 414:	bd 9a       	sbi	0x17, 5	; 23
 416:	08 95       	ret

00000418 <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 41e:	c0 df       	rcall	.-128    	; 0x3a0 <i2c_send_reg_add>
	i2c_send_start();
 420:	6d df       	rcall	.-294    	; 0x2fc <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 422:	8c 2f       	mov	r24, r28
 424:	88 0f       	add	r24, r24
 426:	81 60       	ori	r24, 0x01	; 1
 428:	a7 df       	rcall	.-178    	; 0x378 <i2c_send_data>
	i2c_get_ack();
 42a:	95 df       	rcall	.-214    	; 0x356 <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 42c:	e0 df       	rcall	.-64     	; 0x3ee <i2c_get_data>
 42e:	c8 2f       	mov	r28, r24
 430:	d0 e0       	ldi	r29, 0x00	; 0
 432:	dc 2f       	mov	r29, r28
 434:	cc 27       	eor	r28, r28
	i2c_send_ack();
 436:	7e df       	rcall	.-260    	; 0x334 <i2c_send_ack>
	ret |= i2c_get_data();
 438:	da df       	rcall	.-76     	; 0x3ee <i2c_get_data>
 43a:	c8 2b       	or	r28, r24
	i2c_send_nack();
 43c:	84 df       	rcall	.-248    	; 0x346 <i2c_send_nack>
	i2c_send_stop();
 43e:	72 df       	rcall	.-284    	; 0x324 <i2c_send_stop>
	return(ret);
}
 440:	ce 01       	movw	r24, r28
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 44c:	16 bc       	out	0x26, r1	; 38
	
	buttons_init();
 44e:	e7 de       	rcall	.-562    	; 0x21e <buttons_init>
	gauge_init();
 450:	5d de       	rcall	.-838    	; 0x10c <gauge_init>
	acc_init();
 452:	fa dd       	rcall	.-1036   	; 0x48 <acc_init>
 454:	ff cf       	rjmp	.-2      	; 0x454 <main+0xc>

00000456 <uart_init>:

volatile static uint8_t tx_buffer[2];
volatile static uint8_t size = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 456:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 458:	87 e6       	ldi	r24, 0x67	; 103
 45a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 45c:	88 e0       	ldi	r24, 0x08	; 8
 45e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UPM1)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);			//enable even parity, set 8-bit character, set 1 stop bit
 460:	86 e2       	ldi	r24, 0x26	; 38
 462:	83 b9       	out	0x03, r24	; 3
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 464:	8f b7       	in	r24, 0x3f	; 63
 466:	80 68       	ori	r24, 0x80	; 128
 468:	8f bf       	out	0x3f, r24	; 63
 46a:	08 95       	ret

0000046c <uart_put_com>:
}

void uart_put_com(uint8_t command, uint8_t data){
	tx_buffer[1] = command;
 46c:	e4 e6       	ldi	r30, 0x64	; 100
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[0] = data;
 472:	60 83       	st	Z, r22
	size = 2;
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <size>
	UCSRB |= (1<<UDRIE);
 47a:	55 9a       	sbi	0x0a, 5	; 10
 47c:	08 95       	ret

0000047e <__vector_8>:
}

ISR(USART_UDRE_vect){
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	8f 93       	push	r24
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	if(size > 0){
 48e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 492:	88 23       	and	r24, r24
 494:	61 f0       	breq	.+24     	; 0x4ae <__vector_8+0x30>
		UDR = tx_buffer[size-1];
 496:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <size>
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	ed 59       	subi	r30, 0x9D	; 157
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	80 81       	ld	r24, Z
 4a2:	8c b9       	out	0x0c, r24	; 12
		size--;
 4a4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 4a8:	81 50       	subi	r24, 0x01	; 1
 4aa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <size>
	}
	if(size == 0){
 4ae:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <size>
 4b2:	81 11       	cpse	r24, r1
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__vector_8+0x3a>
		UCSRB &= ~(1<<UDRIE);
 4b6:	55 98       	cbi	0x0a, 5	; 10
	}
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	8f 91       	pop	r24
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
