
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000073a  000007ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800066  00800066  000007d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014be  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8b  00000000  00000000  00002837  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  000034c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  00003904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c33  00000000  00000000  00003e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004abe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__vector_1>
   4:	53 c1       	rjmp	.+678    	; 0x2ac <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	36 c3       	rjmp	.+1644   	; 0x676 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	96 c1       	rjmp	.+812    	; 0x33a <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	fe c2       	rjmp	.+1532   	; 0x60e <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	ba c1       	rjmp	.+884    	; 0x38c <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e3       	ldi	r30, 0x3A	; 58
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 38       	cpi	r26, 0x8B	; 139
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	94 d2       	rcall	.+1320   	; 0x582 <main>
  5a:	6d c3       	rjmp	.+1754   	; 0x736 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <acc_init>:
	}while(count != 0x0400);
	
	x_noise = (x_noise>>10);
	y_noise = (y_noise>>10);

}
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	6b e6       	ldi	r22, 0x6B	; 107
  62:	88 e6       	ldi	r24, 0x68	; 104
  64:	49 d2       	rcall	.+1170   	; 0x4f8 <i2c_single_write>
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	6c e1       	ldi	r22, 0x1C	; 28
  6a:	88 e6       	ldi	r24, 0x68	; 104
  6c:	45 d2       	rcall	.+1162   	; 0x4f8 <i2c_single_write>
  6e:	48 e0       	ldi	r20, 0x08	; 8
  70:	69 e1       	ldi	r22, 0x19	; 25
  72:	88 e6       	ldi	r24, 0x68	; 104
  74:	41 d2       	rcall	.+1154   	; 0x4f8 <i2c_single_write>
  76:	40 e1       	ldi	r20, 0x10	; 16
  78:	67 e3       	ldi	r22, 0x37	; 55
  7a:	88 e6       	ldi	r24, 0x68	; 104
  7c:	3d d2       	rcall	.+1146   	; 0x4f8 <i2c_single_write>
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	68 e3       	ldi	r22, 0x38	; 56
  82:	88 e6       	ldi	r24, 0x68	; 104
  84:	39 d2       	rcall	.+1138   	; 0x4f8 <i2c_single_write>
  86:	85 b7       	in	r24, 0x35	; 53
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bf       	out	0x35, r24	; 53
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	85 bf       	out	0x35, r24	; 53
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
  98:	8f b7       	in	r24, 0x3f	; 63
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8f bf       	out	0x3f, r24	; 63
  9e:	08 95       	ret

000000a0 <__vector_1>:

ISR(INT0_vect){		//External interrupt0 service routine
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 92       	push	r8
  ac:	9f 92       	push	r9
  ae:	af 92       	push	r10
  b0:	bf 92       	push	r11
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	x_acc[1] = i2c_burst_read(ACC_ADD, X_MSB) + x_noise;
  da:	6b e3       	ldi	r22, 0x3B	; 59
  dc:	88 e6       	ldi	r24, 0x68	; 104
  de:	39 d2       	rcall	.+1138   	; 0x552 <i2c_burst_read>
  e0:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <x_noise>
  e4:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <x_noise+0x1>
  e8:	82 0f       	add	r24, r18
  ea:	93 1f       	adc	r25, r19
  ec:	0f 2e       	mov	r0, r31
  ee:	fe e7       	ldi	r31, 0x7E	; 126
  f0:	cf 2e       	mov	r12, r31
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	df 2e       	mov	r13, r31
  f6:	f0 2d       	mov	r31, r0
  f8:	f6 01       	movw	r30, r12
  fa:	93 83       	std	Z+3, r25	; 0x03
  fc:	82 83       	std	Z+2, r24	; 0x02
	y_acc[1] = i2c_burst_read(ACC_ADD, Y_MSB) + y_noise;
  fe:	6d e3       	ldi	r22, 0x3D	; 61
 100:	88 e6       	ldi	r24, 0x68	; 104
 102:	27 d2       	rcall	.+1102   	; 0x552 <i2c_burst_read>
 104:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 108:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 10c:	82 0f       	add	r24, r18
 10e:	93 1f       	adc	r25, r19
 110:	0f 2e       	mov	r0, r31
 112:	fa e7       	ldi	r31, 0x7A	; 122
 114:	ef 2e       	mov	r14, r31
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
 11c:	f7 01       	movw	r30, r14
 11e:	93 83       	std	Z+3, r25	; 0x03
 120:	82 83       	std	Z+2, r24	; 0x02
	
//	if((x_acc[1] <= 30 && x_acc[1] >=-30) 
	
	x_vel[1] = x_vel[0] + (x_acc[0] + ((x_acc[1] - x_acc[0])>>1));
 122:	06 e7       	ldi	r16, 0x76	; 118
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	f8 01       	movw	r30, r16
 128:	20 81       	ld	r18, Z
 12a:	31 81       	ldd	r19, Z+1	; 0x01
 12c:	f6 01       	movw	r30, r12
 12e:	40 81       	ld	r20, Z
 130:	51 81       	ldd	r21, Z+1	; 0x01
 132:	82 81       	ldd	r24, Z+2	; 0x02
 134:	93 81       	ldd	r25, Z+3	; 0x03
 136:	60 81       	ld	r22, Z
 138:	71 81       	ldd	r23, Z+1	; 0x01
 13a:	86 1b       	sub	r24, r22
 13c:	97 0b       	sbc	r25, r23
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	84 0f       	add	r24, r20
 144:	95 1f       	adc	r25, r21
 146:	82 0f       	add	r24, r18
 148:	93 1f       	adc	r25, r19
 14a:	f8 01       	movw	r30, r16
 14c:	93 83       	std	Z+3, r25	; 0x03
 14e:	82 83       	std	Z+2, r24	; 0x02
	y_vel[1] = y_vel[0] + (y_acc[0] + ((y_acc[1] - y_acc[0])>>1));
 150:	c2 e7       	ldi	r28, 0x72	; 114
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	28 81       	ld	r18, Y
 156:	39 81       	ldd	r19, Y+1	; 0x01
 158:	f7 01       	movw	r30, r14
 15a:	40 81       	ld	r20, Z
 15c:	51 81       	ldd	r21, Z+1	; 0x01
 15e:	82 81       	ldd	r24, Z+2	; 0x02
 160:	93 81       	ldd	r25, Z+3	; 0x03
 162:	60 81       	ld	r22, Z
 164:	71 81       	ldd	r23, Z+1	; 0x01
 166:	86 1b       	sub	r24, r22
 168:	97 0b       	sbc	r25, r23
 16a:	95 95       	asr	r25
 16c:	87 95       	ror	r24
 16e:	84 0f       	add	r24, r20
 170:	95 1f       	adc	r25, r21
 172:	82 0f       	add	r24, r18
 174:	93 1f       	adc	r25, r19
 176:	9b 83       	std	Y+3, r25	; 0x03
 178:	8a 83       	std	Y+2, r24	; 0x02
	
	x_pos[1] = x_pos[0] + (x_vel[0] + ((x_vel[1] - x_vel[0])>>1));
 17a:	0f 2e       	mov	r0, r31
 17c:	fe e6       	ldi	r31, 0x6E	; 110
 17e:	8f 2e       	mov	r8, r31
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	9f 2e       	mov	r9, r31
 184:	f0 2d       	mov	r31, r0
 186:	f4 01       	movw	r30, r8
 188:	20 81       	ld	r18, Z
 18a:	31 81       	ldd	r19, Z+1	; 0x01
 18c:	f8 01       	movw	r30, r16
 18e:	40 81       	ld	r20, Z
 190:	51 81       	ldd	r21, Z+1	; 0x01
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	93 81       	ldd	r25, Z+3	; 0x03
 196:	60 81       	ld	r22, Z
 198:	71 81       	ldd	r23, Z+1	; 0x01
 19a:	86 1b       	sub	r24, r22
 19c:	97 0b       	sbc	r25, r23
 19e:	95 95       	asr	r25
 1a0:	87 95       	ror	r24
 1a2:	84 0f       	add	r24, r20
 1a4:	95 1f       	adc	r25, r21
 1a6:	82 0f       	add	r24, r18
 1a8:	93 1f       	adc	r25, r19
 1aa:	f4 01       	movw	r30, r8
 1ac:	93 83       	std	Z+3, r25	; 0x03
 1ae:	82 83       	std	Z+2, r24	; 0x02
	y_pos[1] = y_pos[0] + (y_vel[0] + ((y_vel[1] - y_vel[0])>>1));
 1b0:	0f 2e       	mov	r0, r31
 1b2:	fa e6       	ldi	r31, 0x6A	; 106
 1b4:	af 2e       	mov	r10, r31
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	bf 2e       	mov	r11, r31
 1ba:	f0 2d       	mov	r31, r0
 1bc:	f5 01       	movw	r30, r10
 1be:	20 81       	ld	r18, Z
 1c0:	31 81       	ldd	r19, Z+1	; 0x01
 1c2:	48 81       	ld	r20, Y
 1c4:	59 81       	ldd	r21, Y+1	; 0x01
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	9b 81       	ldd	r25, Y+3	; 0x03
 1ca:	68 81       	ld	r22, Y
 1cc:	79 81       	ldd	r23, Y+1	; 0x01
 1ce:	86 1b       	sub	r24, r22
 1d0:	97 0b       	sbc	r25, r23
 1d2:	95 95       	asr	r25
 1d4:	87 95       	ror	r24
 1d6:	84 0f       	add	r24, r20
 1d8:	95 1f       	adc	r25, r21
 1da:	28 0f       	add	r18, r24
 1dc:	39 1f       	adc	r19, r25
 1de:	33 83       	std	Z+3, r19	; 0x03
 1e0:	22 83       	std	Z+2, r18	; 0x02
	
	uart_set_pos(x_pos[1], y_pos[1]);
 1e2:	62 81       	ldd	r22, Z+2	; 0x02
 1e4:	73 81       	ldd	r23, Z+3	; 0x03
 1e6:	f4 01       	movw	r30, r8
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	93 81       	ldd	r25, Z+3	; 0x03
 1ec:	e8 d1       	rcall	.+976    	; 0x5be <uart_set_pos>
	
	x_acc[0] = x_acc[1];
 1ee:	f6 01       	movw	r30, r12
 1f0:	82 81       	ldd	r24, Z+2	; 0x02
 1f2:	93 81       	ldd	r25, Z+3	; 0x03
 1f4:	91 83       	std	Z+1, r25	; 0x01
 1f6:	80 83       	st	Z, r24
	y_acc[0] = y_acc[1];
 1f8:	f7 01       	movw	r30, r14
 1fa:	82 81       	ldd	r24, Z+2	; 0x02
 1fc:	93 81       	ldd	r25, Z+3	; 0x03
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	80 83       	st	Z, r24
	
	x_vel[0] = x_vel[1];
 202:	f8 01       	movw	r30, r16
 204:	82 81       	ldd	r24, Z+2	; 0x02
 206:	93 81       	ldd	r25, Z+3	; 0x03
 208:	91 83       	std	Z+1, r25	; 0x01
 20a:	80 83       	st	Z, r24
	y_vel[0] = y_vel[1];
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	9b 81       	ldd	r25, Y+3	; 0x03
 210:	99 83       	std	Y+1, r25	; 0x01
 212:	88 83       	st	Y, r24
	
	x_pos[0] = x_pos[1];
 214:	f4 01       	movw	r30, r8
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	93 81       	ldd	r25, Z+3	; 0x03
 21a:	91 83       	std	Z+1, r25	; 0x01
 21c:	80 83       	st	Z, r24
	y_pos[0] = y_pos[1];
 21e:	f5 01       	movw	r30, r10
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	93 81       	ldd	r25, Z+3	; 0x03
 224:	91 83       	std	Z+1, r25	; 0x01
 226:	80 83       	st	Z, r24

}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <gauge_init>:
#include "i2c.h"

uint8_t count = 0;

void gauge_init(void){
	i2c_burst_write(GAUGE_ADD, CHARGE_MSB, 0xFF, 0xFF);
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	4f ef       	ldi	r20, 0xFF	; 255
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	84 e6       	ldi	r24, 0x64	; 100
 26a:	4f d1       	rcall	.+670    	; 0x50a <i2c_burst_write>
	i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C);
 26c:	2c e1       	ldi	r18, 0x1C	; 28
 26e:	4c e7       	ldi	r20, 0x7C	; 124
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	84 e6       	ldi	r24, 0x64	; 100
 274:	4a d1       	rcall	.+660    	; 0x50a <i2c_burst_write>
	
	PORTB &= ~(1<<PINB4);		//turn led on
 276:	c4 98       	cbi	0x18, 4	; 24
	DDRB |= (1<<PINB4);			//set led as output
 278:	bc 9a       	sbi	0x17, 4	; 23
	
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00);
 27a:	10 be       	out	0x30, r1	; 48
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(0<<CS00);
 27c:	13 be       	out	0x33, r1	; 51
	//8MHz / 1024 = 7812,5Hz een overflow is 30ms, 17 * 30 = 500ms
	TIMSK |= (1<<TOIE0);	//enable interrupt on overflow 8-bit
 27e:	89 b7       	in	r24, 0x39	; 57
 280:	82 60       	ori	r24, 0x02	; 2
 282:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (0<<ISC10);	//The falling edge of INT1 generates an interrupt request
 284:	85 b7       	in	r24, 0x35	; 53
 286:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 288:	85 b7       	in	r24, 0x35	; 53
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT1);		//enable external interrupt 1 in general interrupt mask register
 28e:	8b b7       	in	r24, 0x3b	; 59
 290:	80 68       	ori	r24, 0x80	; 128
 292:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<SREG_I);	//enable interrupts I in global status register	
 294:	8f b7       	in	r24, 0x3f	; 63
 296:	80 68       	ori	r24, 0x80	; 128
 298:	8f bf       	out	0x3f, r24	; 63
 29a:	08 95       	ret

0000029c <gauge_send_arp>:
}

void gauge_send_arp(){
	uint8_t temp;
	i2c_send_start();
 29c:	cc d0       	rcall	.+408    	; 0x436 <i2c_send_start>
	i2c_send_data(ARA<<1);
 29e:	88 e1       	ldi	r24, 0x18	; 24
 2a0:	08 d1       	rcall	.+528    	; 0x4b2 <i2c_send_data>
	i2c_get_ack();						
 2a2:	f6 d0       	rcall	.+492    	; 0x490 <i2c_get_ack>
	temp = i2c_get_data();	//fuel gauge zou reageren met zijn adress
 2a4:	41 d1       	rcall	.+642    	; 0x528 <i2c_get_data>
	if (temp != GAUGE_ADD){
		// Eventueel warning naar console sturen als temp niet gelijk is aan GAUGE_ADD of nogmaals proberen
	}
	i2c_send_nack();
 2a6:	ec d0       	rcall	.+472    	; 0x480 <i2c_send_nack>
	i2c_send_stop();
 2a8:	da d0       	rcall	.+436    	; 0x45e <i2c_send_stop>
 2aa:	08 95       	ret

000002ac <__vector_2>:
}

ISR(INT1_vect){	//External interrupt1 service routine
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	if((TCCR0B & (1<<CS02)) && (TCCR0B & (1<<CS00))){
 2ce:	03 b6       	in	r0, 0x33	; 51
 2d0:	02 fe       	sbrs	r0, 2
 2d2:	13 c0       	rjmp	.+38     	; 0x2fa <__vector_2+0x4e>
 2d4:	03 b6       	in	r0, 0x33	; 51
 2d6:	00 fe       	sbrs	r0, 0
 2d8:	10 c0       	rjmp	.+32     	; 0x2fa <__vector_2+0x4e>
		TCCR0B &= ~((1<<CS02)|(1<<CS00));		//disconnect clock
 2da:	83 b7       	in	r24, 0x33	; 51
 2dc:	8a 7f       	andi	r24, 0xFA	; 250
 2de:	83 bf       	out	0x33, r24	; 51
		PORTB &= ~(1<<PINB4);
 2e0:	c4 98       	cbi	0x18, 4	; 24
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x00, 0x00);
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	64 e0       	ldi	r22, 0x04	; 4
 2e8:	84 e6       	ldi	r24, 0x64	; 100
 2ea:	0f d1       	rcall	.+542    	; 0x50a <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x7C, 0x1C); // 30%
 2ec:	2c e1       	ldi	r18, 0x1C	; 28
 2ee:	4c e7       	ldi	r20, 0x7C	; 124
 2f0:	66 e0       	ldi	r22, 0x06	; 6
 2f2:	84 e6       	ldi	r24, 0x64	; 100
 2f4:	0a d1       	rcall	.+532    	; 0x50a <i2c_burst_write>
		gauge_send_arp();	
 2f6:	d2 df       	rcall	.-92     	; 0x29c <gauge_send_arp>
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <__vector_2+0x6c>
	}else{
		TCNT0 = 0x00;							//reset timer
 2fa:	12 be       	out	0x32, r1	; 50
		TCCR0B |= (1<<CS02)|(1<<CS00);			//connect clock with 1024 prescaler
 2fc:	83 b7       	in	r24, 0x33	; 51
 2fe:	85 60       	ori	r24, 0x05	; 5
 300:	83 bf       	out	0x33, r24	; 51
		i2c_burst_write(GAUGE_ADD, LOW_TRE_MSB, 0x00, 0x00);
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	66 e0       	ldi	r22, 0x06	; 6
 308:	84 e6       	ldi	r24, 0x64	; 100
 30a:	ff d0       	rcall	.+510    	; 0x50a <i2c_burst_write>
		i2c_burst_write(GAUGE_ADD, HIGH_TRE_MSB, 0x7D, 0xFD); // 31%
 30c:	2d ef       	ldi	r18, 0xFD	; 253
 30e:	4d e7       	ldi	r20, 0x7D	; 125
 310:	64 e0       	ldi	r22, 0x04	; 4
 312:	84 e6       	ldi	r24, 0x64	; 100
 314:	fa d0       	rcall	.+500    	; 0x50a <i2c_burst_write>
		gauge_send_arp();
 316:	c2 df       	rcall	.-124    	; 0x29c <gauge_send_arp>
	}
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_6>:

ISR(TIMER0_OVF_vect){
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
	if(count == 17){
 348:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <count>
 34c:	81 31       	cpi	r24, 0x11	; 17
 34e:	39 f4       	brne	.+14     	; 0x35e <__vector_6+0x24>
		PORTB ^= (1<<PINB4);
 350:	98 b3       	in	r25, 0x18	; 24
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	89 27       	eor	r24, r25
 356:	88 bb       	out	0x18, r24	; 24
		count = 0;
 358:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <count>
 35c:	03 c0       	rjmp	.+6      	; 0x364 <__vector_6+0x2a>
	}else{
		count++;
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <count>
	}
}
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <buttons_init>:
#include "uart.h"

volatile uint8_t old_buttons = 0x0;

void buttons_init(){
	DDRB &= ~((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));				//set buttons as input
 372:	87 b3       	in	r24, 0x17	; 23
 374:	80 7f       	andi	r24, 0xF0	; 240
 376:	87 bb       	out	0x17, r24	; 23
	PCMSK0 |= ((1<<PINB3)|(1<<PINB2)|(1<<PINB1)|(1<<PINB0));			//set buttons as source for pin change interrupt 0
 378:	80 b5       	in	r24, 0x20	; 32
 37a:	8f 60       	ori	r24, 0x0F	; 15
 37c:	80 bd       	out	0x20, r24	; 32
	GIMSK |= (1<<PCIE0);												//enable pin change interrupt 0
 37e:	8b b7       	in	r24, 0x3b	; 59
 380:	80 62       	ori	r24, 0x20	; 32
 382:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1<<SREG_I);												//enable interrupts I in global status register
 384:	8f b7       	in	r24, 0x3f	; 63
 386:	80 68       	ori	r24, 0x80	; 128
 388:	8f bf       	out	0x3f, r24	; 63
 38a:	08 95       	ret

0000038c <__vector_11>:
}

ISR(PCINT0_vect){		
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	uint8_t new_buttons = (PINB & 0xF);
 3b2:	d6 b3       	in	r29, 0x16	; 22
 3b4:	df 70       	andi	r29, 0x0F	; 15
	uint8_t temp = (new_buttons ^ old_buttons);
 3b6:	c0 91 83 00 	lds	r28, 0x0083	; 0x800083 <old_buttons>
 3ba:	cd 27       	eor	r28, r29
	if((temp & (1<<PINB0)) && (old_buttons & (1<<PINB0))){
 3bc:	c0 ff       	sbrs	r28, 0
 3be:	06 c0       	rjmp	.+12     	; 0x3cc <__vector_11+0x40>
 3c0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <old_buttons>
 3c4:	80 ff       	sbrs	r24, 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <__vector_11+0x40>
		uart_set_button(0);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	00 d1       	rcall	.+512    	; 0x5cc <uart_set_button>
	}
	if((temp & (1<<PINB1)) && (old_buttons & (1<<PINB1))){
 3cc:	c1 ff       	sbrs	r28, 1
 3ce:	06 c0       	rjmp	.+12     	; 0x3dc <__vector_11+0x50>
 3d0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <old_buttons>
 3d4:	81 ff       	sbrs	r24, 1
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__vector_11+0x50>
		uart_set_button(1);
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	f8 d0       	rcall	.+496    	; 0x5cc <uart_set_button>
	}
	if((temp & (1<<PINB2)) && (old_buttons & (1<<PINB2))){
 3dc:	c2 ff       	sbrs	r28, 2
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <__vector_11+0x60>
 3e0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <old_buttons>
 3e4:	82 ff       	sbrs	r24, 2
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <__vector_11+0x60>
		uart_set_button(2);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	f0 d0       	rcall	.+480    	; 0x5cc <uart_set_button>
	}
	if((temp & (1<<PINB3)) && (old_buttons & (1<<PINB3))){
 3ec:	c3 fd       	sbrc	r28, 3
 3ee:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <old_buttons>
		
	}
	old_buttons = new_buttons;
 3f2:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <old_buttons>
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <i2c_init>:
	i2c_get_ack();
	ret = i2c_get_data();
	i2c_send_nack();
	i2c_send_stop();
	return(ret);
}
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	8f b9       	out	0x0f, r24	; 15
 420:	88 b3       	in	r24, 0x18	; 24
 422:	80 6a       	ori	r24, 0xA0	; 160
 424:	88 bb       	out	0x18, r24	; 24
 426:	87 b3       	in	r24, 0x17	; 23
 428:	80 6a       	ori	r24, 0xA0	; 160
 42a:	87 bb       	out	0x17, r24	; 23
 42c:	8a e2       	ldi	r24, 0x2A	; 42
 42e:	8d b9       	out	0x0d, r24	; 13
 430:	80 ef       	ldi	r24, 0xF0	; 240
 432:	8e b9       	out	0x0e, r24	; 14
 434:	08 95       	ret

00000436 <i2c_send_start>:
 436:	88 b3       	in	r24, 0x18	; 24
 438:	80 6a       	ori	r24, 0xA0	; 160
 43a:	88 bb       	out	0x18, r24	; 24
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	98 b3       	in	r25, 0x18	; 24
 440:	88 b3       	in	r24, 0x18	; 24
 442:	85 fb       	bst	r24, 5
 444:	88 27       	eor	r24, r24
 446:	80 f9       	bld	r24, 0
 448:	82 13       	cpse	r24, r18
 44a:	f9 cf       	rjmp	.-14     	; 0x43e <i2c_send_start+0x8>
 44c:	99 23       	and	r25, r25
 44e:	bc f7       	brge	.-18     	; 0x43e <i2c_send_start+0x8>
 450:	c5 98       	cbi	0x18, 5	; 24
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	8a 95       	dec	r24
 456:	f1 f7       	brne	.-4      	; 0x454 <i2c_send_start+0x1e>
 458:	00 00       	nop
 45a:	c7 98       	cbi	0x18, 7	; 24
 45c:	08 95       	ret

0000045e <i2c_send_stop>:
 45e:	c5 98       	cbi	0x18, 5	; 24
 460:	c7 9a       	sbi	0x18, 7	; 24
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	8a 95       	dec	r24
 466:	f1 f7       	brne	.-4      	; 0x464 <i2c_send_stop+0x6>
 468:	00 00       	nop
 46a:	c5 9a       	sbi	0x18, 5	; 24
 46c:	08 95       	ret

0000046e <i2c_send_ack>:
 46e:	c5 98       	cbi	0x18, 5	; 24
 470:	c7 9a       	sbi	0x18, 7	; 24
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <i2c_send_ack+0x6>
 478:	00 00       	nop
 47a:	c7 98       	cbi	0x18, 7	; 24
 47c:	c5 9a       	sbi	0x18, 5	; 24
 47e:	08 95       	ret

00000480 <i2c_send_nack>:
 480:	c5 9a       	sbi	0x18, 5	; 24
 482:	c7 9a       	sbi	0x18, 7	; 24
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	8a 95       	dec	r24
 488:	f1 f7       	brne	.-4      	; 0x486 <i2c_send_nack+0x6>
 48a:	00 00       	nop
 48c:	c7 98       	cbi	0x18, 7	; 24
 48e:	08 95       	ret

00000490 <i2c_get_ack>:
 490:	bd 98       	cbi	0x17, 5	; 23
 492:	68 9a       	sbi	0x0d, 0	; 13
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	8a 95       	dec	r24
 498:	f1 f7       	brne	.-4      	; 0x496 <i2c_get_ack+0x6>
 49a:	00 00       	nop
 49c:	68 9a       	sbi	0x0d, 0	; 13
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	8a 95       	dec	r24
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <i2c_get_ack+0x10>
 4a4:	00 00       	nop
 4a6:	8f b1       	in	r24, 0x0f	; 15
 4a8:	9f ef       	ldi	r25, 0xFF	; 255
 4aa:	9f b9       	out	0x0f, r25	; 15
 4ac:	bd 9a       	sbi	0x17, 5	; 23
 4ae:	81 70       	andi	r24, 0x01	; 1
 4b0:	08 95       	ret

000004b2 <i2c_send_data>:
 4b2:	8f b9       	out	0x0f, r24	; 15
 4b4:	c5 9a       	sbi	0x18, 5	; 24
 4b6:	8e b1       	in	r24, 0x0e	; 14
 4b8:	80 7f       	andi	r24, 0xF0	; 240
 4ba:	8e b9       	out	0x0e, r24	; 14
 4bc:	68 9a       	sbi	0x0d, 0	; 13
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	8a 95       	dec	r24
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <i2c_send_data+0xe>
 4c4:	00 00       	nop
 4c6:	68 9a       	sbi	0x0d, 0	; 13
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	8a 95       	dec	r24
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <i2c_send_data+0x18>
 4ce:	00 00       	nop
 4d0:	76 9b       	sbis	0x0e, 6	; 14
 4d2:	f4 cf       	rjmp	.-24     	; 0x4bc <i2c_send_data+0xa>
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
 4d6:	8f b9       	out	0x0f, r24	; 15
 4d8:	08 95       	ret

000004da <i2c_send_reg_add>:
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	d8 2f       	mov	r29, r24
 4e0:	c6 2f       	mov	r28, r22
 4e2:	a9 df       	rcall	.-174    	; 0x436 <i2c_send_start>
 4e4:	8d 2f       	mov	r24, r29
 4e6:	88 0f       	add	r24, r24
 4e8:	e4 df       	rcall	.-56     	; 0x4b2 <i2c_send_data>
 4ea:	d2 df       	rcall	.-92     	; 0x490 <i2c_get_ack>
 4ec:	8c 2f       	mov	r24, r28
 4ee:	e1 df       	rcall	.-62     	; 0x4b2 <i2c_send_data>
 4f0:	cf df       	rcall	.-98     	; 0x490 <i2c_get_ack>
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <i2c_single_write>:
 4f8:	cf 93       	push	r28
 4fa:	c4 2f       	mov	r28, r20
 4fc:	ee df       	rcall	.-36     	; 0x4da <i2c_send_reg_add>
 4fe:	8c 2f       	mov	r24, r28
 500:	d8 df       	rcall	.-80     	; 0x4b2 <i2c_send_data>
 502:	c6 df       	rcall	.-116    	; 0x490 <i2c_get_ack>
 504:	ac df       	rcall	.-168    	; 0x45e <i2c_send_stop>
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <i2c_burst_write>:
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	d4 2f       	mov	r29, r20
 510:	c2 2f       	mov	r28, r18
 512:	e3 df       	rcall	.-58     	; 0x4da <i2c_send_reg_add>
 514:	8d 2f       	mov	r24, r29
 516:	cd df       	rcall	.-102    	; 0x4b2 <i2c_send_data>
 518:	bb df       	rcall	.-138    	; 0x490 <i2c_get_ack>
 51a:	8c 2f       	mov	r24, r28
 51c:	ca df       	rcall	.-108    	; 0x4b2 <i2c_send_data>
 51e:	b8 df       	rcall	.-144    	; 0x490 <i2c_get_ack>
 520:	9e df       	rcall	.-196    	; 0x45e <i2c_send_stop>
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <i2c_get_data>:
 528:	bd 98       	cbi	0x17, 5	; 23
 52a:	8e b1       	in	r24, 0x0e	; 14
 52c:	80 7f       	andi	r24, 0xF0	; 240
 52e:	8e b9       	out	0x0e, r24	; 14
 530:	68 9a       	sbi	0x0d, 0	; 13
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	8a 95       	dec	r24
 536:	f1 f7       	brne	.-4      	; 0x534 <i2c_get_data+0xc>
 538:	00 00       	nop
 53a:	68 9a       	sbi	0x0d, 0	; 13
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	8a 95       	dec	r24
 540:	f1 f7       	brne	.-4      	; 0x53e <i2c_get_data+0x16>
 542:	00 00       	nop
 544:	76 9b       	sbis	0x0e, 6	; 14
 546:	f4 cf       	rjmp	.-24     	; 0x530 <i2c_get_data+0x8>
 548:	8f b1       	in	r24, 0x0f	; 15
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	9f b9       	out	0x0f, r25	; 15
 54e:	bd 9a       	sbi	0x17, 5	; 23
 550:	08 95       	ret

00000552 <i2c_burst_read>:

uint16_t i2c_burst_read(uint8_t dev_address, uint8_t reg_address){
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	c8 2f       	mov	r28, r24
	uint16_t ret;
	i2c_send_reg_add(dev_address, reg_address);
 558:	c0 df       	rcall	.-128    	; 0x4da <i2c_send_reg_add>
	i2c_send_start();
 55a:	6d df       	rcall	.-294    	; 0x436 <i2c_send_start>
	i2c_send_data((dev_address<<1)|1);			//device address and read is 1
 55c:	8c 2f       	mov	r24, r28
 55e:	88 0f       	add	r24, r24
 560:	81 60       	ori	r24, 0x01	; 1
 562:	a7 df       	rcall	.-178    	; 0x4b2 <i2c_send_data>
	i2c_get_ack();
 564:	95 df       	rcall	.-214    	; 0x490 <i2c_get_ack>
	ret = (i2c_get_data()<<8);
 566:	e0 df       	rcall	.-64     	; 0x528 <i2c_get_data>
 568:	c8 2f       	mov	r28, r24
 56a:	d0 e0       	ldi	r29, 0x00	; 0
 56c:	dc 2f       	mov	r29, r28
 56e:	cc 27       	eor	r28, r28
	i2c_send_ack();
 570:	7e df       	rcall	.-260    	; 0x46e <i2c_send_ack>
	ret |= i2c_get_data();
 572:	da df       	rcall	.-76     	; 0x528 <i2c_get_data>
 574:	c8 2b       	or	r28, r24
	i2c_send_nack();
 576:	84 df       	rcall	.-248    	; 0x480 <i2c_send_nack>
	i2c_send_stop();
 578:	72 df       	rcall	.-284    	; 0x45e <i2c_send_stop>
	return(ret);
}
 57a:	ce 01       	movw	r24, r28
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <main>:
#include "acc.h"
#include "gauge.h"

int main(void)
{
	CLKPR = (1<<CLKPCE);		//enable clock divider changes
 582:	80 e8       	ldi	r24, 0x80	; 128
 584:	86 bd       	out	0x26, r24	; 38
	CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);	//set clock divider to 1, 8MHz system clock
 586:	16 bc       	out	0x26, r1	; 38
	
	i2c_init();
 588:	49 df       	rcall	.-366    	; 0x41c <i2c_init>
	uart_init();
 58a:	04 d0       	rcall	.+8      	; 0x594 <uart_init>
	buttons_init();
 58c:	f2 de       	rcall	.-540    	; 0x372 <buttons_init>
	gauge_init();
 58e:	69 de       	rcall	.-814    	; 0x262 <gauge_init>
	acc_init();
 590:	66 dd       	rcall	.-1332   	; 0x5e <acc_init>
 592:	ff cf       	rjmp	.-2      	; 0x592 <main+0x10>

00000594 <uart_init>:
volatile static uint8_t tx_tele[BUFFER_SIZE] = {0x00, 0xFF, 0xFF, 0xFF, 0xFF};
volatile static uint8_t tx_buffer[BUFFER_SIZE];
volatile static uint8_t ovf_counter = 0;

void uart_init(void) {
	UBRRH = (uint8_t)(MYUBBR>>8);								//set baud rate
 594:	12 b8       	out	0x02, r1	; 2
	UBRRL = (uint8_t)(MYUBBR);
 596:	89 e1       	ldi	r24, 0x19	; 25
 598:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN);											//enable transmit
 59a:	88 e0       	ldi	r24, 0x08	; 8
 59c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);					//set 8-bit character, set 1 stop bit
 59e:	86 e0       	ldi	r24, 0x06	; 6
 5a0:	83 b9       	out	0x03, r24	; 3
	
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
 5a2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);		//8MHz with 8 prescaler, clear timer on compare results in 1MHz counter
 5a4:	8a e0       	ldi	r24, 0x0A	; 10
 5a6:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);										//enable output compare A match interrupt
 5a8:	89 b7       	in	r24, 0x39	; 57
 5aa:	80 64       	ori	r24, 0x40	; 64
 5ac:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0x27;												//compare on 10000 clock cycles resulting in 10 milliseconds
 5ae:	87 e2       	ldi	r24, 0x27	; 39
 5b0:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0x10;												
 5b2:	80 e1       	ldi	r24, 0x10	; 16
 5b4:	8a bd       	out	0x2a, r24	; 42
	SREG |= (1<<SREG_I);										//enable interrupts I in global status register
 5b6:	8f b7       	in	r24, 0x3f	; 63
 5b8:	80 68       	ori	r24, 0x80	; 128
 5ba:	8f bf       	out	0x3f, r24	; 63
 5bc:	08 95       	ret

000005be <uart_set_pos>:
}

void uart_set_pos(int16_t xpos, int16_t ypos){
	tx_tele[0] = (xpos&0xFF);		//x_pos_LSB
 5be:	e0 e6       	ldi	r30, 0x60	; 96
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 83       	st	Z, r24
	tx_tele[1] = (xpos>>8);			//x_pos_MSB
 5c4:	91 83       	std	Z+1, r25	; 0x01
	tx_tele[2] = (ypos&0xFF);		//y_pos_LSB
 5c6:	62 83       	std	Z+2, r22	; 0x02
	tx_tele[3] = (ypos>>8);			//y_pos_MSB
 5c8:	73 83       	std	Z+3, r23	; 0x03
 5ca:	08 95       	ret

000005cc <uart_set_button>:
}

void uart_set_button(uint8_t button){
	tx_tele[4] = (1<<button);		//set one button as pressed
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <uart_set_button+0xa>
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <uart_set_button+0x6>
 5da:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__data_start+0x4>
 5de:	08 95       	ret

000005e0 <uart_putc>:
}

void uart_putc(uint8_t c){
 5e0:	38 2f       	mov	r19, r24
	uint8_t tmp_head = (tx_head + 1) % BUFFER_SIZE;
 5e2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <tx_head>
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	65 e0       	ldi	r22, 0x05	; 5
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	7c d0       	rcall	.+248    	; 0x6e8 <__divmodhi4>
 5f0:	28 2f       	mov	r18, r24
	while(tmp_head == tx_tail);
 5f2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <tx_tail>
 5f6:	29 17       	cp	r18, r25
 5f8:	e1 f3       	breq	.-8      	; 0x5f2 <uart_putc+0x12>
	tx_buffer[tx_head] = c;
 5fa:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <tx_head>
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	ec 57       	subi	r30, 0x7C	; 124
 602:	ff 4f       	sbci	r31, 0xFF	; 255
 604:	30 83       	st	Z, r19
	tx_head = tmp_head;
 606:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <tx_head>
	UCSRB |= (1<<UDRIE);
 60a:	55 9a       	sbi	0x0a, 5	; 10
 60c:	08 95       	ret

0000060e <__vector_8>:
}

ISR(USART_UDRE_vect){
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
	uint8_t tmp_tail = 0;
	if(tx_tail != tx_head){
 62a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <tx_tail>
 62e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <tx_head>
 632:	98 17       	cp	r25, r24
 634:	89 f0       	breq	.+34     	; 0x658 <__vector_8+0x4a>
		tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 636:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <tx_tail>
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	65 e0       	ldi	r22, 0x05	; 5
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	52 d0       	rcall	.+164    	; 0x6e8 <__divmodhi4>
		UDR = tx_buffer[tx_tail];
 644:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <tx_tail>
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	ec 57       	subi	r30, 0x7C	; 124
 64c:	ff 4f       	sbci	r31, 0xFF	; 255
 64e:	90 81       	ld	r25, Z
 650:	9c b9       	out	0x0c, r25	; 12
		tx_tail = tmp_tail;
 652:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <tx_tail>
 656:	01 c0       	rjmp	.+2      	; 0x65a <__vector_8+0x4c>
	}else{
		UCSRB &= ~(1<<UDRIE);
 658:	55 98       	cbi	0x0a, 5	; 10
	}
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <__vector_4>:

ISR(TIMER1_COMPA_vect){
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	2f 93       	push	r18
 682:	3f 93       	push	r19
 684:	4f 93       	push	r20
 686:	5f 93       	push	r21
 688:	6f 93       	push	r22
 68a:	7f 93       	push	r23
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	af 93       	push	r26
 692:	bf 93       	push	r27
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	ef 93       	push	r30
 69a:	ff 93       	push	r31
 69c:	c0 e0       	ldi	r28, 0x00	; 0
 69e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < BUFFER_SIZE; i++){
		uart_putc(tx_tele[i]);		//put telegram in UART-buffer
 6a0:	fe 01       	movw	r30, r28
 6a2:	e0 5a       	subi	r30, 0xA0	; 160
 6a4:	ff 4f       	sbci	r31, 0xFF	; 255
 6a6:	80 81       	ld	r24, Z
 6a8:	9b df       	rcall	.-202    	; 0x5e0 <uart_putc>
 6aa:	21 96       	adiw	r28, 0x01	; 1
		UCSRB &= ~(1<<UDRIE);
	}
}

ISR(TIMER1_COMPA_vect){
	for(uint8_t i = 0; i < BUFFER_SIZE; i++){
 6ac:	c5 30       	cpi	r28, 0x05	; 5
 6ae:	d1 05       	cpc	r29, r1
 6b0:	b9 f7       	brne	.-18     	; 0x6a0 <__vector_4+0x2a>
		uart_putc(tx_tele[i]);		//put telegram in UART-buffer
	}
	tx_tele[0] = 0x00;				//reset telegram
 6b2:	e0 e6       	ldi	r30, 0x60	; 96
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	10 82       	st	Z, r1
	tx_tele[1] = 0xFF;
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	81 83       	std	Z+1, r24	; 0x01
	tx_tele[2] = 0xFF;
 6bc:	82 83       	std	Z+2, r24	; 0x02
	tx_tele[3] = 0xFF;
 6be:	83 83       	std	Z+3, r24	; 0x03
	tx_tele[4] = 0xFF;
 6c0:	84 83       	std	Z+4, r24	; 0x04
}
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <__divmodhi4>:
 6e8:	97 fb       	bst	r25, 7
 6ea:	07 2e       	mov	r0, r23
 6ec:	16 f4       	brtc	.+4      	; 0x6f2 <__divmodhi4+0xa>
 6ee:	00 94       	com	r0
 6f0:	06 d0       	rcall	.+12     	; 0x6fe <__divmodhi4_neg1>
 6f2:	77 fd       	sbrc	r23, 7
 6f4:	08 d0       	rcall	.+16     	; 0x706 <__divmodhi4_neg2>
 6f6:	0b d0       	rcall	.+22     	; 0x70e <__udivmodhi4>
 6f8:	07 fc       	sbrc	r0, 7
 6fa:	05 d0       	rcall	.+10     	; 0x706 <__divmodhi4_neg2>
 6fc:	3e f4       	brtc	.+14     	; 0x70c <__divmodhi4_exit>

000006fe <__divmodhi4_neg1>:
 6fe:	90 95       	com	r25
 700:	81 95       	neg	r24
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <__divmodhi4_neg2>:
 706:	70 95       	com	r23
 708:	61 95       	neg	r22
 70a:	7f 4f       	sbci	r23, 0xFF	; 255

0000070c <__divmodhi4_exit>:
 70c:	08 95       	ret

0000070e <__udivmodhi4>:
 70e:	aa 1b       	sub	r26, r26
 710:	bb 1b       	sub	r27, r27
 712:	51 e1       	ldi	r21, 0x11	; 17
 714:	07 c0       	rjmp	.+14     	; 0x724 <__udivmodhi4_ep>

00000716 <__udivmodhi4_loop>:
 716:	aa 1f       	adc	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	a6 17       	cp	r26, r22
 71c:	b7 07       	cpc	r27, r23
 71e:	10 f0       	brcs	.+4      	; 0x724 <__udivmodhi4_ep>
 720:	a6 1b       	sub	r26, r22
 722:	b7 0b       	sbc	r27, r23

00000724 <__udivmodhi4_ep>:
 724:	88 1f       	adc	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	5a 95       	dec	r21
 72a:	a9 f7       	brne	.-22     	; 0x716 <__udivmodhi4_loop>
 72c:	80 95       	com	r24
 72e:	90 95       	com	r25
 730:	bc 01       	movw	r22, r24
 732:	cd 01       	movw	r24, r26
 734:	08 95       	ret

00000736 <_exit>:
 736:	f8 94       	cli

00000738 <__stop_program>:
 738:	ff cf       	rjmp	.-2      	; 0x738 <__stop_program>
